# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: commenter
on:
  issue_comment:
    types: 
      - created
      - edited
      
jobs:
  comment:
    if: contains(github.event.comment.body, '!deploy')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: show data
        run:   echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
    
      - uses: actions/checkout@v3
        
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.1.1
        with:
          node-version: '>=14'
          check-latest: true

      - name: Install Salesforce CLI
        run: |
          npm install sfdx-cli
          node_modules/sfdx-cli/bin/run --version
          node_modules/sfdx-cli/bin/run plugins --core

      - name: install yaml parser
        run: pip install -U niet       
        
      - name: Setting variables
        run: |
          commands=(${{github.event.comment.body}})
          IFS=":"
          for val in "${commands[@]}";do if [[ "$val" == *"package"* ]]; then command=(${val}); echo "directory=${command[1]}" >> $GITHUB_ENV; elif [[ "$val" == *"env"* ]];then command=(${val}); echo "path=${command[1]}" >> $GITHUB_ENV; elif [[ "$val" == *"version"* ]];then command=(${val}); echo "packageId=${command[1]}" >> $GITHUB_ENV;fi done
          
      - name: Directory structure
        working-directory: $directory
        run: |
          ls -ltr
        
      - name: Authorize devhub
        working-directory: $directory
        run: |
          echo '${{ secrets.MY_DEVHUB }}' >> sfdcCred.json
          ../node_modules/sfdx-cli/bin/run force:auth:sfdxurl:store -f ./sfdcCred.json -d -s -a devhub
        
      - name: Create package
        working-directory: $directory
        run: |
          packageAlreadyExits=false
          package=$(niet -f json .package deploy-config.yml)
          name=$(niet .name <<< $package)
          type=$(niet .type <<< $package)
          wait=$(niet .wait <<< $package)
          description=$(niet .description <<< $package)
          path=$(niet .path <<< $package)
          packageList=$(../node_modules/sfdx-cli/bin/run force:package:list --json)
          ../node_modules/sfdx-cli/bin/run force:package:list --json
          for packageName in $(niet -s .result <<< $packageList); do if [[ "$packageName" = *"$name"* ]];then echo $packageName ; packageAlreadyExits=true; fi;  done
          if [ "$packageAlreadyExits" = false ]; then ../node_modules/sfdx-cli/bin/run  force:package:create -n $name -d "$description" -r $path -t $type --orgdependent; fi
          ../node_modules/sfdx-cli/bin/run force:package:list
          packageResult=$(../node_modules/sfdx-cli/bin/run force:package:version:create -p $name -x -c -w $wait --json)
          SubscriberPackageVersionId=$(niet .result.SubscriberPackageVersionId <<< $packageResult)
          echo $SubscriberPackageVersionId
          echo "SubscriberPackageVersionId=$SubscriberPackageVersionId" >> $GITHUB_ENV
          ../node_modules/sfdx-cli/bin/run force:package:version:list -p $name


      - name: install package
        working-directory: $directory
        run: |
          package=$(niet -f json .package deploy-config.yml)
          name=$(niet .name <<< $package)
          wait=$(niet .wait <<< $package)
          ../node_modules/sfdx-cli/bin/run force:package:install -p $SubscriberPackageVersionId -w $wait
