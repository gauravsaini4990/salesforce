import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.array.sort";
import "core-js/modules/es.promise";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _sortInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/sort";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context12; _forEachInstanceProperty(_context12 = ownKeys(Object(source), true)).call(_context12, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context13; _forEachInstanceProperty(_context13 = ownKeys(Object(source))).call(_context13, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @file Manages query for records in Salesforce
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { getLogger } from './util/logger';
import RecordStream, { Serializable } from './record-stream';
import { createSOQL } from './soql-builder';
const ResponseTargetValues = ['QueryResult', 'Records', 'SingleRecord', 'Count'];
export const ResponseTargets = _reduceInstanceProperty(ResponseTargetValues).call(ResponseTargetValues, (values, target) => _objectSpread(_objectSpread({}, values), {}, {
  [target]: target
}), {});

/**
 *
 */
const DEFAULT_BULK_THRESHOLD = 200;
/**
 * Query
 */

export class Query extends EventEmitter {
  /**
   *
   */
  constructor(conn, config, options) {
    super();

    _defineProperty(this, "_conn", void 0);

    _defineProperty(this, "_logger", void 0);

    _defineProperty(this, "_soql", void 0);

    _defineProperty(this, "_locator", void 0);

    _defineProperty(this, "_config", {});

    _defineProperty(this, "_children", []);

    _defineProperty(this, "_options", void 0);

    _defineProperty(this, "_executed", false);

    _defineProperty(this, "_finished", false);

    _defineProperty(this, "_chaining", false);

    _defineProperty(this, "_promise", void 0);

    _defineProperty(this, "_stream", void 0);

    _defineProperty(this, "totalSize", void 0);

    _defineProperty(this, "totalFetched", void 0);

    _defineProperty(this, "offset", this.skip);

    _defineProperty(this, "orderby", _sortInstanceProperty(this));

    _defineProperty(this, "exec", this.execute);

    _defineProperty(this, "run", this.execute);

    _defineProperty(this, "delete", this.destroy);

    _defineProperty(this, "del", this.destroy);

    this._conn = conn;
    this._logger = conn._logLevel ? Query._logger.createInstance(conn._logLevel) : Query._logger;

    if (typeof config === 'string') {
      this._soql = config;
    } else if (typeof config.locator === 'string') {
      const locator = config.locator;

      if (_indexOfInstanceProperty(locator).call(locator, '/') >= 0) {
        this._locator = locator.split('/').pop();
      }
    } else {
      const _ref = config,
            {
        fields,
        includes,
        sort
      } = _ref,
            _config = _objectWithoutProperties(_ref, ["fields", "includes", "sort"]);

      this._config = _config;
      this.select(fields);

      if (includes) {
        this.includeChildren(includes);
      }

      if (sort) {
        var _context;

        _sortInstanceProperty(_context = this).call(_context, sort);
      }
    }

    this._options = _objectSpread({
      headers: {},
      maxFetch: 10000,
      autoFetch: false,
      scanAll: false,
      responseTarget: 'QueryResult'
    }, options || {}); // promise instance

    this._promise = new _Promise((resolve, reject) => {
      this.on('response', resolve);
      this.on('error', reject);
    });
    this._stream = new Serializable();
    this.on('record', record => this._stream.push(record));
    this.on('end', () => this._stream.push(null));
    this.on('error', err => {
      try {
        this._stream.emit('error', err);
      } catch (e) {// eslint-disable-line no-empty
      }
    });
  }
  /**
   * Select fields to include in the returning result
   */


  select(fields = '*') {
    if (this._soql) {
      throw Error('Cannot set select fields for the query which has already built SOQL.');
    }

    function toFieldArray(fields) {
      var _context2, _context3, _context4, _context5;

      return typeof fields === 'string' ? fields.split(/\s*,\s*/) : _Array$isArray(fields) ? _reduceInstanceProperty(_context2 = _mapInstanceProperty(_context3 = fields).call(_context3, toFieldArray)).call(_context2, (fs, f) => [...fs, ...f], []) : _reduceInstanceProperty(_context4 = _mapInstanceProperty(_context5 = _Object$entries(fields)).call(_context5, ([f, v]) => {
        if (typeof v === 'number' || typeof v === 'boolean') {
          return v ? [f] : [];
        } else {
          var _context6;

          return _mapInstanceProperty(_context6 = toFieldArray(v)).call(_context6, p => `${f}.${p}`);
        }
      })).call(_context4, (fs, f) => [...fs, ...f], []);
    }

    if (fields) {
      this._config.fields = toFieldArray(fields);
    } // force convert query record type without changing instance;


    return this;
  }
  /**
   * Set query conditions to filter the result records
   */


  where(conditions) {
    if (this._soql) {
      throw Error('Cannot set where conditions for the query which has already built SOQL.');
    }

    this._config.conditions = conditions;
    return this;
  }
  /**
   * Limit the returning result
   */


  limit(limit) {
    if (this._soql) {
      throw Error('Cannot set limit for the query which has already built SOQL.');
    }

    this._config.limit = limit;
    return this;
  }
  /**
   * Skip records
   */


  skip(offset) {
    if (this._soql) {
      throw Error('Cannot set skip/offset for the query which has already built SOQL.');
    }

    this._config.offset = offset;
    return this;
  }
  /**
   * Synonym of Query#skip()
   */


  sort(sort, dir) {
    if (this._soql) {
      throw Error('Cannot set sort for the query which has already built SOQL.');
    }

    if (typeof sort === 'string' && typeof dir !== 'undefined') {
      this._config.sort = [[sort, dir]];
    } else {
      this._config.sort = sort;
    }

    return this;
  }
  /**
   * Synonym of Query#sort()
   */


  include(childRelName, conditions, fields, options = {}) {
    if (this._soql) {
      throw Error('Cannot include child relationship into the query which has already built SOQL.');
    }

    const childConfig = {
      fields: fields === null ? undefined : fields,
      table: childRelName,
      conditions: conditions === null ? undefined : conditions,
      limit: options.limit,
      offset: options.offset,
      sort: _sortInstanceProperty(options)
    }; // eslint-disable-next-line no-use-before-define

    const childQuery = new SubQuery(this._conn, childRelName, childConfig, this);

    this._children.push(childQuery);

    return childQuery;
  }
  /**
   * Include child relationship queryies, but not moving down to the children context
   */


  includeChildren(includes) {
    if (this._soql) {
      throw Error('Cannot include child relationship into the query which has already built SOQL.');
    }

    for (const crname of _Object$keys(includes)) {
      const _ref2 = includes[crname],
            {
        conditions,
        fields
      } = _ref2,
            options = _objectWithoutProperties(_ref2, ["conditions", "fields"]);

      this.include(crname, conditions, fields, options);
    }

    return this;
  }
  /**
   * Setting maxFetch query option
   */


  maxFetch(maxFetch) {
    this._options.maxFetch = maxFetch;
    return this;
  }
  /**
   * Switching auto fetch mode
   */


  autoFetch(autoFetch) {
    this._options.autoFetch = autoFetch;
    return this;
  }
  /**
   * Set flag to scan all records including deleted and archived.
   */


  scanAll(scanAll) {
    this._options.scanAll = scanAll;
    return this;
  }
  /**
   *
   */


  setResponseTarget(responseTarget) {
    if (responseTarget in ResponseTargets) {
      this._options.responseTarget = responseTarget;
    } // force change query response target without changing instance


    return this;
  }
  /**
   * Execute query and fetch records from server.
   */


  execute(options_ = {}) {
    if (this._executed) {
      throw new Error('re-executing already executed query');
    }

    if (this._finished) {
      throw new Error('executing already closed query');
    }

    const options = {
      headers: options_.headers || this._options.headers,
      responseTarget: options_.responseTarget || this._options.responseTarget,
      autoFetch: options_.autoFetch || this._options.autoFetch,
      maxFetch: options_.maxFetch || this._options.maxFetch,
      scanAll: options_.scanAll || this._options.scanAll
    }; // collect fetched records in array
    // only when response target is Records and
    // either callback or chaining promises are available to this query.

    this.once('fetch', () => {
      if (options.responseTarget === ResponseTargets.Records && this._chaining) {
        this._logger.debug('--- collecting all fetched records ---');

        const records = [];

        const onRecord = record => records.push(record);

        this.on('record', onRecord);
        this.once('end', () => {
          this.removeListener('record', onRecord);
          this.emit('response', records, this);
        });
      }
    }); // flag to prevent re-execution

    this._executed = true;

    (async () => {
      // start actual query
      this._logger.debug('>>> Query start >>>');

      try {
        await this._execute(options);

        this._logger.debug('*** Query finished ***');
      } catch (error) {
        this._logger.debug('--- Query error ---', error);

        this.emit('error', error);
      }
    })(); // return Query instance for chaining


    return this;
  }
  /**
   * Synonym of Query#execute()
   */


  /**
   * @private
   */
  async _execute(options) {
    const {
      headers,
      responseTarget,
      autoFetch,
      maxFetch,
      scanAll
    } = options;
    let url = '';

    if (this._locator) {
      url = [this._conn._baseUrl(), '/query/', this._locator].join('');
    } else {
      const soql = await this.toSOQL();
      this.totalFetched = 0;

      this._logger.debug(`SOQL = ${soql}`);

      url = [this._conn._baseUrl(), '/', scanAll ? 'queryAll' : 'query', '?q=', encodeURIComponent(soql)].join('');
    }

    const data = await this._conn.request({
      method: 'GET',
      url,
      headers
    });
    this.emit('fetch');
    this.totalSize = data.totalSize;
    let res;

    switch (responseTarget) {
      case ResponseTargets.SingleRecord:
        res = data.records && data.records.length > 0 ? data.records[0] : null;
        break;

      case ResponseTargets.Records:
        res = data.records;
        break;

      case ResponseTargets.Count:
        res = data.totalSize;
        break;

      default:
        res = data;
    } // only fire response event when it should be notified per fetch


    if (responseTarget !== ResponseTargets.Records) {
      this.emit('response', res, this);
    } // streaming record instances


    const numRecords = data.records && data.records.length || 0;
    let totalFetched = this.totalFetched || 0;

    for (let i = 0; i < numRecords; i++) {
      if (totalFetched >= maxFetch) {
        this._finished = true;
        break;
      }

      const record = data.records[i];
      this.emit('record', record, totalFetched, this);
      totalFetched += 1;
    }

    this.totalFetched = totalFetched;

    if (data.nextRecordsUrl) {
      this._locator = data.nextRecordsUrl.split('/').pop();
    }

    this._finished = this._finished || data.done || !autoFetch;

    if (this._finished) {
      this.emit('end');
    } else {
      this._execute(options);
    }

    return res;
  }
  /**
   * Obtain readable stream instance
   */


  stream(type = 'csv') {
    if (!this._finished && !this._executed) {
      this.execute({
        autoFetch: true
      });
    }

    return type === 'record' ? this._stream : this._stream.stream(type);
  }
  /**
   * Pipe the queried records to another stream
   * This is for backward compatibility; Query is not a record stream instance anymore in 2.0.
   * If you want a record stream instance, use `Query#stream('record')`.
   */


  pipe(stream) {
    return this.stream('record').pipe(stream);
  }
  /**
   * @protected
   */


  async _expandFields(sobject_) {
    var _context7, _context8, _context9;

    if (this._soql) {
      throw new Error('Cannot expand fields for the query which has already built SOQL.');
    }

    const {
      fields = [],
      table = ''
    } = this._config;
    const sobject = sobject_ || table;

    this._logger.debug(`_expandFields: sobject = ${sobject}, fields = ${fields.join(', ')}`);

    const [efields] = await _Promise.all([this._expandAsteriskFields(sobject, fields), ..._mapInstanceProperty(_context7 = this._children).call(_context7, async childQuery => {
      await childQuery._expandFields();
      return [];
    })]);
    this._config.fields = efields;
    this._config.includes = _reduceInstanceProperty(_context8 = _mapInstanceProperty(_context9 = this._children).call(_context9, cquery => {
      const cconfig = cquery._query._config;
      return [cconfig.table, cconfig];
    })).call(_context8, (includes, [ctable, cconfig]) => _objectSpread(_objectSpread({}, includes), {}, {
      [ctable]: cconfig
    }), {});
  }
  /**
   *
   */


  async _findRelationObject(relName) {
    const table = this._config.table;

    if (!table) {
      throw new Error('No table information provided in the query');
    }

    this._logger.debug(`finding table for relation "${relName}" in "${table}"...`);

    const sobject = await this._conn.describe$(table);
    const upperRname = relName.toUpperCase();

    for (const cr of sobject.childRelationships) {
      if ((cr.relationshipName || '').toUpperCase() === upperRname && cr.childSObject) {
        return cr.childSObject;
      }
    }

    throw new Error(`No child relationship found: ${relName}`);
  }
  /**
   *
   */


  async _expandAsteriskFields(sobject, fields) {
    const expandedFields = await _Promise.all(_mapInstanceProperty(fields).call(fields, async field => this._expandAsteriskField(sobject, field)));
    return _reduceInstanceProperty(expandedFields).call(expandedFields, (eflds, flds) => [...eflds, ...flds], []);
  }
  /**
   *
   */


  async _expandAsteriskField(sobject, field) {
    this._logger.debug(`expanding field "${field}" in "${sobject}"...`);

    const fpath = field.split('.');

    if (fpath[fpath.length - 1] === '*') {
      var _context10;

      const so = await this._conn.describe$(sobject);

      this._logger.debug(`table ${sobject} has been described`);

      if (fpath.length > 1) {
        const rname = fpath.shift();

        for (const f of so.fields) {
          if (f.relationshipName && rname && f.relationshipName.toUpperCase() === rname.toUpperCase()) {
            const rfield = f;
            const referenceTo = rfield.referenceTo || [];
            const rtable = referenceTo.length === 1 ? referenceTo[0] : 'Name';
            const fpaths = await this._expandAsteriskField(rtable, fpath.join('.'));
            return _mapInstanceProperty(fpaths).call(fpaths, fp => `${rname}.${fp}`);
          }
        }

        return [];
      }

      return _mapInstanceProperty(_context10 = so.fields).call(_context10, f => f.name);
    }

    return [field];
  }
  /**
   * Explain plan for executing query
   */


  async explain() {
    const soql = await this.toSOQL();

    this._logger.debug(`SOQL = ${soql}`);

    const url = `/query/?explain=${encodeURIComponent(soql)}`;
    return this._conn.request(url);
  }
  /**
   * Return SOQL expression for the query
   */


  async toSOQL() {
    if (this._soql) {
      return this._soql;
    }

    await this._expandFields();
    return createSOQL(this._config);
  }
  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * Delegate to deferred promise, return promise instance for query result
   */


  then(onResolve, onReject) {
    this._chaining = true;

    if (!this._finished && !this._executed) {
      this.execute();
    }

    if (!this._promise) {
      throw new Error('invalid state: promise is not set after query execution');
    }

    return this._promise.then(onResolve, onReject);
  }

  catch(onReject) {
    return this.then(null, onReject);
  }

  promise() {
    return _Promise.resolve(this);
  }
  /**
   * Bulk delete queried records
   */


  destroy(type, options) {
    if (typeof type === 'object' && type !== null) {
      options = type;
      type = undefined;
    }

    options = options || {};
    const type_ = type || this._config.table;

    if (!type_) {
      throw new Error('SOQL based query needs SObject type information to bulk delete.');
    } // Set the threshold number to pass to bulk API


    const thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold : // determine threshold if the connection version supports SObject collection API or not
    this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
    return new _Promise((resolve, reject) => {
      const createBatch = () => this._conn.sobject(type_).deleteBulk().on('response', resolve).on('error', reject);

      let records = [];
      let batch = null;

      const handleRecord = rec => {
        if (!rec.Id) {
          const err = new Error('Queried record does not include Salesforce record ID.');
          this.emit('error', err);
          return;
        }

        const record = {
          Id: rec.Id
        };

        if (batch) {
          batch.write(record);
        } else {
          records.push(record);

          if (thresholdNum >= 0 && records.length > thresholdNum) {
            // Use bulk delete instead of SObject REST API
            batch = createBatch();

            for (const record of records) {
              batch.write(record);
            }

            records = [];
          }
        }
      };

      const handleEnd = () => {
        if (batch) {
          batch.end();
        } else {
          const ids = _mapInstanceProperty(records).call(records, record => record.Id);

          this._conn.sobject(type_).destroy(ids, {
            allowRecursive: true
          }).then(resolve, reject);
        }
      };

      this.stream('record').on('data', handleRecord).on('end', handleEnd).on('error', reject);
    });
  }
  /**
   * Synonym of Query#destroy()
   */


  update(mapping, type, options) {
    if (typeof type === 'object' && type !== null) {
      options = type;
      type = undefined;
    }

    options = options || {};
    const type_ = type || this._config && this._config.table;

    if (!type_) {
      throw new Error('SOQL based query needs SObject type information to bulk update.');
    }

    const updateStream = typeof mapping === 'function' ? _mapInstanceProperty(RecordStream).call(RecordStream, mapping) : RecordStream.recordMapStream(mapping); // Set the threshold number to pass to bulk API

    const thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold : // determine threshold if the connection version supports SObject collection API or not
    this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
    return new _Promise((resolve, reject) => {
      const createBatch = () => this._conn.sobject(type_).updateBulk().on('response', resolve).on('error', reject);

      let records = [];
      let batch = null;

      const handleRecord = record => {
        if (batch) {
          batch.write(record);
        } else {
          records.push(record);
        }

        if (thresholdNum >= 0 && records.length > thresholdNum) {
          // Use bulk update instead of SObject REST API
          batch = createBatch();

          for (const record of records) {
            batch.write(record);
          }

          records = [];
        }
      };

      const handleEnd = () => {
        if (batch) {
          batch.end();
        } else {
          this._conn.sobject(type_).update(records, {
            allowRecursive: true
          }).then(resolve, reject);
        }
      };

      this.stream('record').on('error', reject).pipe(updateStream).on('data', handleRecord).on('end', handleEnd).on('error', reject);
    });
  }

}
/*--------------------------------------------*/

/**
 * SubQuery object for representing child relationship query
 */

_defineProperty(Query, "_logger", getLogger('query'));

export class SubQuery {
  /**
   *
   */
  constructor(conn, relName, config, parent) {
    _defineProperty(this, "_relName", void 0);

    _defineProperty(this, "_query", void 0);

    _defineProperty(this, "_parent", void 0);

    _defineProperty(this, "offset", this.skip);

    _defineProperty(this, "orderby", _sortInstanceProperty(this));

    this._relName = relName;
    this._query = new Query(conn, config);
    this._parent = parent;
  }
  /**
   *
   */


  select(fields) {
    // force convert query record type without changing instance
    this._query = this._query.select(fields);
    return this;
  }
  /**
   *
   */


  where(conditions) {
    this._query = this._query.where(conditions);
    return this;
  }
  /**
   * Limit the returning result
   */


  limit(limit) {
    this._query = this._query.limit(limit);
    return this;
  }
  /**
   * Skip records
   */


  skip(offset) {
    this._query = this._query.skip(offset);
    return this;
  }
  /**
   * Synonym of SubQuery#skip()
   */


  sort(sort, dir) {
    var _context11;

    this._query = _sortInstanceProperty(_context11 = this._query).call(_context11, sort, dir);
    return this;
  }
  /**
   * Synonym of SubQuery#sort()
   */


  /**
   *
   */
  async _expandFields() {
    const sobject = await this._parent._findRelationObject(this._relName);
    return this._query._expandFields(sobject);
  }
  /**
   * Back the context to parent query object
   */


  end() {
    return this._parent;
  }

}
export default Query;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9xdWVyeS50cyJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJnZXRMb2dnZXIiLCJSZWNvcmRTdHJlYW0iLCJTZXJpYWxpemFibGUiLCJjcmVhdGVTT1FMIiwiUmVzcG9uc2VUYXJnZXRWYWx1ZXMiLCJSZXNwb25zZVRhcmdldHMiLCJ2YWx1ZXMiLCJ0YXJnZXQiLCJERUZBVUxUX0JVTEtfVEhSRVNIT0xEIiwiUXVlcnkiLCJjb25zdHJ1Y3RvciIsImNvbm4iLCJjb25maWciLCJvcHRpb25zIiwic2tpcCIsImV4ZWN1dGUiLCJkZXN0cm95IiwiX2Nvbm4iLCJfbG9nZ2VyIiwiX2xvZ0xldmVsIiwiY3JlYXRlSW5zdGFuY2UiLCJfc29xbCIsImxvY2F0b3IiLCJfbG9jYXRvciIsInNwbGl0IiwicG9wIiwiZmllbGRzIiwiaW5jbHVkZXMiLCJzb3J0IiwiX2NvbmZpZyIsInNlbGVjdCIsImluY2x1ZGVDaGlsZHJlbiIsIl9vcHRpb25zIiwiaGVhZGVycyIsIm1heEZldGNoIiwiYXV0b0ZldGNoIiwic2NhbkFsbCIsInJlc3BvbnNlVGFyZ2V0IiwiX3Byb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib24iLCJfc3RyZWFtIiwicmVjb3JkIiwicHVzaCIsImVyciIsImVtaXQiLCJlIiwiRXJyb3IiLCJ0b0ZpZWxkQXJyYXkiLCJmcyIsImYiLCJ2IiwicCIsIndoZXJlIiwiY29uZGl0aW9ucyIsImxpbWl0Iiwib2Zmc2V0IiwiZGlyIiwiaW5jbHVkZSIsImNoaWxkUmVsTmFtZSIsImNoaWxkQ29uZmlnIiwidW5kZWZpbmVkIiwidGFibGUiLCJjaGlsZFF1ZXJ5IiwiU3ViUXVlcnkiLCJfY2hpbGRyZW4iLCJjcm5hbWUiLCJzZXRSZXNwb25zZVRhcmdldCIsIm9wdGlvbnNfIiwiX2V4ZWN1dGVkIiwiX2ZpbmlzaGVkIiwib25jZSIsIlJlY29yZHMiLCJfY2hhaW5pbmciLCJkZWJ1ZyIsInJlY29yZHMiLCJvblJlY29yZCIsInJlbW92ZUxpc3RlbmVyIiwiX2V4ZWN1dGUiLCJlcnJvciIsInVybCIsIl9iYXNlVXJsIiwiam9pbiIsInNvcWwiLCJ0b1NPUUwiLCJ0b3RhbEZldGNoZWQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkYXRhIiwicmVxdWVzdCIsIm1ldGhvZCIsInRvdGFsU2l6ZSIsInJlcyIsIlNpbmdsZVJlY29yZCIsImxlbmd0aCIsIkNvdW50IiwibnVtUmVjb3JkcyIsImkiLCJuZXh0UmVjb3Jkc1VybCIsImRvbmUiLCJzdHJlYW0iLCJ0eXBlIiwicGlwZSIsIl9leHBhbmRGaWVsZHMiLCJzb2JqZWN0XyIsInNvYmplY3QiLCJlZmllbGRzIiwiYWxsIiwiX2V4cGFuZEFzdGVyaXNrRmllbGRzIiwiY3F1ZXJ5IiwiY2NvbmZpZyIsIl9xdWVyeSIsImN0YWJsZSIsIl9maW5kUmVsYXRpb25PYmplY3QiLCJyZWxOYW1lIiwiZGVzY3JpYmUkIiwidXBwZXJSbmFtZSIsInRvVXBwZXJDYXNlIiwiY3IiLCJjaGlsZFJlbGF0aW9uc2hpcHMiLCJyZWxhdGlvbnNoaXBOYW1lIiwiY2hpbGRTT2JqZWN0IiwiZXhwYW5kZWRGaWVsZHMiLCJmaWVsZCIsIl9leHBhbmRBc3Rlcmlza0ZpZWxkIiwiZWZsZHMiLCJmbGRzIiwiZnBhdGgiLCJzbyIsInJuYW1lIiwic2hpZnQiLCJyZmllbGQiLCJyZWZlcmVuY2VUbyIsInJ0YWJsZSIsImZwYXRocyIsImZwIiwibmFtZSIsImV4cGxhaW4iLCJ0aGVuIiwib25SZXNvbHZlIiwib25SZWplY3QiLCJjYXRjaCIsInByb21pc2UiLCJ0eXBlXyIsInRocmVzaG9sZE51bSIsImFsbG93QnVsayIsImJ1bGtUaHJlc2hvbGQiLCJfZW5zdXJlVmVyc2lvbiIsIl9tYXhSZXF1ZXN0IiwiY3JlYXRlQmF0Y2giLCJkZWxldGVCdWxrIiwiYmF0Y2giLCJoYW5kbGVSZWNvcmQiLCJyZWMiLCJJZCIsIndyaXRlIiwiaGFuZGxlRW5kIiwiZW5kIiwiaWRzIiwiYWxsb3dSZWN1cnNpdmUiLCJ1cGRhdGUiLCJtYXBwaW5nIiwidXBkYXRlU3RyZWFtIiwicmVjb3JkTWFwU3RyZWFtIiwidXBkYXRlQnVsayIsInBhcmVudCIsIl9yZWxOYW1lIiwiX3BhcmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsWUFBVCxRQUE2QixRQUE3QjtBQUNBLFNBQWlCQyxTQUFqQixRQUFrQyxlQUFsQztBQUNBLE9BQU9DLFlBQVAsSUFBdUJDLFlBQXZCLFFBQTJDLGlCQUEzQztBQUVBLFNBQVNDLFVBQVQsUUFBMkIsZ0JBQTNCO0FBNElBLE1BQU1DLG9CQUFvQixHQUFHLENBQzNCLGFBRDJCLEVBRTNCLFNBRjJCLEVBRzNCLGNBSDJCLEVBSTNCLE9BSjJCLENBQTdCO0FBU0EsT0FBTyxNQUFNQyxlQUVaLEdBQUcsd0JBQUFELG9CQUFvQixNQUFwQixDQUFBQSxvQkFBb0IsRUFDdEIsQ0FBQ0UsTUFBRCxFQUFTQyxNQUFULHFDQUEwQkQsTUFBMUI7QUFBa0MsR0FBQ0MsTUFBRCxHQUFVQTtBQUE1QyxFQURzQixFQUV0QixFQUZzQixDQUZqQjs7QUE4QlA7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsR0FBL0I7QUFFQTtBQUNBO0FBQ0E7O0FBQ0EsT0FBTyxNQUFNQyxLQUFOLFNBS0dWLFlBTEgsQ0FLZ0I7QUFtQnJCO0FBQ0Y7QUFDQTtBQUNFVyxFQUFBQSxXQUFXLENBQ1RDLElBRFMsRUFFVEMsTUFGUyxFQUdUQyxPQUhTLEVBSVQ7QUFDQTs7QUFEQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQSxxQ0FuQnlCLEVBbUJ6Qjs7QUFBQSx1Q0FsQm1ELEVBa0JuRDs7QUFBQTs7QUFBQSx1Q0FoQm1CLEtBZ0JuQjs7QUFBQSx1Q0FmbUIsS0FlbkI7O0FBQUEsdUNBZG1CLEtBY25COztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBLG9DQW9JTyxLQUFLQyxJQXBJWjs7QUFBQSwyREFpS3FDLElBaktyQzs7QUFBQSxrQ0ErVkssS0FBS0MsT0EvVlY7O0FBQUEs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QUExQixDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFb0QsRUFBQUEsR0FBRyxHQU0wQjtBQUMzQixXQUFRLEtBQUtVLE9BQWI7QUFDRDs7QUE5R0Q7QUFpSEYsZUFBZTlKLEtBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIE1hbmFnZXMgcXVlcnkgZm9yIHJlY29yZHMgaW4gU2FsZXNmb3JjZVxuICogQGF1dGhvciBTaGluaWNoaSBUb21pdGEgPHNoaW5pY2hpLnRvbWl0YUBnbWFpbC5jb20+XG4gKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBMb2dnZXIsIGdldExvZ2dlciB9IGZyb20gJy4vdXRpbC9sb2dnZXInO1xuaW1wb3J0IFJlY29yZFN0cmVhbSwgeyBTZXJpYWxpemFibGUgfSBmcm9tICcuL3JlY29yZC1zdHJlYW0nO1xuaW1wb3J0IENvbm5lY3Rpb24gZnJvbSAnLi9jb25uZWN0aW9uJztcbmltcG9ydCB7IGNyZWF0ZVNPUUwgfSBmcm9tICcuL3NvcWwtYnVpbGRlcic7XG5pbXBvcnQgeyBRdWVyeUNvbmZpZyBhcyBTT1FMUXVlcnlDb25maWcsIFNvcnREaXIgfSBmcm9tICcuL3NvcWwtYnVpbGRlcic7XG5pbXBvcnQge1xuICBSZWNvcmQsXG4gIE9wdGlvbmFsLFxuICBTY2hlbWEsXG4gIFNPYmplY3ROYW1lcyxcbiAgQ2hpbGRSZWxhdGlvbnNoaXBOYW1lcyxcbiAgQ2hpbGRSZWxhdGlvbnNoaXBTT2JqZWN0TmFtZSxcbiAgRmllbGRQcm9qZWN0aW9uQ29uZmlnLFxuICBGaWVsZFBhdGhTcGVjaWZpZXIsXG4gIEZpZWxkUGF0aFNjb3BlZFByb2plY3Rpb24sXG4gIFNPYmplY3RSZWNvcmQsXG4gIFNPYmplY3RJbnB1dFJlY29yZCxcbiAgU09iamVjdFVwZGF0ZVJlY29yZCxcbiAgU2F2ZVJlc3VsdCxcbiAgRGF0ZVN0cmluZyxcbiAgU09iamVjdENoaWxkUmVsYXRpb25zaGlwUHJvcCxcbiAgU09iamVjdEZpZWxkTmFtZXMsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IFNmRGF0ZSBmcm9tICcuL2RhdGUnO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIFF1ZXJ5RmllbGQ8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gIEZQIGV4dGVuZHMgRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+XG4+ID0gRlAgfCBGUFtdIHwgc3RyaW5nIHwgc3RyaW5nW10gfCB7IFtmaWVsZDogc3RyaW5nXTogbnVtYmVyIHwgYm9vbGVhbiB9O1xuXG4vKipcbiAqXG4gKi9cbnR5cGUgQ1ZhbHVlPFQ+ID0gVCBleHRlbmRzIERhdGVTdHJpbmdcbiAgPyBTZkRhdGVcbiAgOiBUIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhblxuICA/IFRcbiAgOiBuZXZlcjtcblxudHlwZSBDb25kT3A8VD4gPVxuICB8IFsnJGVxJywgQ1ZhbHVlPFQ+IHwgbnVsbF1cbiAgfCBbJyRuZScsIENWYWx1ZTxUPiB8IG51bGxdXG4gIHwgWyckZ3QnLCBDVmFsdWU8VD5dXG4gIHwgWyckZ3RlJywgQ1ZhbHVlPFQ+XVxuICB8IFsnJGx0JywgQ1ZhbHVlPFQ+XVxuICB8IFsnJGx0ZScsIENWYWx1ZTxUPl1cbiAgfCBbJyRsaWtlJywgVCBleHRlbmRzIHN0cmluZyA/IFQgOiBuZXZlcl1cbiAgfCBbJyRubGlrZScsIFQgZXh0ZW5kcyBzdHJpbmcgPyBUIDogbmV2ZXJdXG4gIHwgWyckaW4nLCBBcnJheTxDVmFsdWU8VD4+XVxuICB8IFsnJG5pbicsIEFycmF5PENWYWx1ZTxUPj5dXG4gIHwgWyckaW5jbHVkZXMnLCBUIGV4dGVuZHMgc3RyaW5nID8gVFtdIDogbmV2ZXJdXG4gIHwgWyckZXhjbHVkZXMnLCBUIGV4dGVuZHMgc3RyaW5nID8gVFtdIDogbmV2ZXJdXG4gIHwgWyckZXhpc3RzJywgYm9vbGVhbl07XG5cbnR5cGUgQ29uZFZhbHVlT2JqPFQsIE9wID0gQ29uZE9wPFQ+WzBdPiA9IE9wIGV4dGVuZHMgQ29uZE9wPFQ+WzBdXG4gID8gT3AgZXh0ZW5kcyBzdHJpbmdcbiAgICA/IHsgW0sgaW4gT3BdOiBFeHRyYWN0PENvbmRPcDxUPiwgW09wLCBhbnldPlsxXSB9XG4gICAgOiBuZXZlclxuICA6IG5ldmVyO1xuXG50eXBlIENvbmRWYWx1ZTxUPiA9IENWYWx1ZTxUPiB8IEFycmF5PENWYWx1ZTxUPj4gfCBudWxsIHwgQ29uZFZhbHVlT2JqPFQ+O1xuXG50eXBlIENvbmRpdGlvblNldDxSIGV4dGVuZHMgUmVjb3JkPiA9IHtcbiAgW0sgaW4ga2V5b2YgUl0/OiBDb25kVmFsdWU8UltLXT47XG59O1xuXG5leHBvcnQgdHlwZSBRdWVyeUNvbmRpdGlvbjxTIGV4dGVuZHMgU2NoZW1hLCBOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+PiA9XG4gIHwge1xuICAgICAgJG9yOiBRdWVyeUNvbmRpdGlvbjxTLCBOPltdO1xuICAgIH1cbiAgfCB7XG4gICAgICAkYW5kOiBRdWVyeUNvbmRpdGlvbjxTLCBOPltdO1xuICAgIH1cbiAgfCBDb25kaXRpb25TZXQ8U09iamVjdFJlY29yZDxTLCBOPj47XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5U29ydDxcbiAgUyBleHRlbmRzIFNjaGVtYSxcbiAgTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgUiBleHRlbmRzIFNPYmplY3RSZWNvcmQ8UywgTj4gPSBTT2JqZWN0UmVjb3JkPFMsIE4+XG4+ID1cbiAgfCB7XG4gICAgICBbSyBpbiBrZXlvZiBSXT86IFNvcnREaXI7XG4gICAgfVxuICB8IEFycmF5PFtrZXlvZiBSLCBTb3J0RGlyXT47XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IHR5cGUgUXVlcnlDb25maWc8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gIEZQIGV4dGVuZHMgRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+XG4+ID0ge1xuICBmaWVsZHM/OiBRdWVyeUZpZWxkPFMsIE4sIEZQPjtcbiAgaW5jbHVkZXM/OiB7XG4gICAgW0NSTiBpbiBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIE4+XT86IFF1ZXJ5Q29uZmlnPFxuICAgICAgUyxcbiAgICAgIENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgTiwgQ1JOPlxuICAgID47XG4gIH07XG4gIHRhYmxlPzogc3RyaW5nO1xuICBjb25kaXRpb25zPzogUXVlcnlDb25kaXRpb248UywgTj47XG4gIHNvcnQ/OiBRdWVyeVNvcnQ8UywgTj47XG4gIGxpbWl0PzogbnVtYmVyO1xuICBvZmZzZXQ/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBRdWVyeU9wdGlvbnMgPSB7XG4gIGhlYWRlcnM6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9O1xuICBtYXhGZXRjaDogbnVtYmVyO1xuICBhdXRvRmV0Y2g6IGJvb2xlYW47XG4gIHNjYW5BbGw6IGJvb2xlYW47XG4gIHJlc3BvbnNlVGFyZ2V0OiBRdWVyeVJlc3BvbnNlVGFyZ2V0O1xufTtcblxuZXhwb3J0IHR5cGUgUXVlcnlSZXN1bHQ8UiBleHRlbmRzIFJlY29yZD4gPSB7XG4gIGRvbmU6IGJvb2xlYW47XG4gIHRvdGFsU2l6ZTogbnVtYmVyO1xuICByZWNvcmRzOiBSW107XG4gIG5leHRSZWNvcmRzVXJsPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgUXVlcnlFeHBsYWluUmVzdWx0ID0ge1xuICBwbGFuczogQXJyYXk8e1xuICAgIGNhcmRpbmFsaXR5OiBudW1iZXI7XG4gICAgZmllbGRzOiBzdHJpbmdbXTtcbiAgICBsZWFkaW5nT3BlcmF0aW9uVHlwZTogJ0luZGV4JyB8ICdPdGhlcicgfCAnU2hhcmluZycgfCAnVGFibGVTY2FuJztcbiAgICBub3RlczogQXJyYXk8e1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgIGZpZWxkczogc3RyaW5nW107XG4gICAgICB0YWJsZUVudW1PcklkOiBzdHJpbmc7XG4gICAgfT47XG4gICAgcmVsYXRpdmVDb3N0OiBudW1iZXI7XG4gICAgc29iamVjdENhcmRpbmFsaXR5OiBudW1iZXI7XG4gICAgc29iamVjdFR5cGU6IHN0cmluZztcbiAgfT47XG59O1xuXG5jb25zdCBSZXNwb25zZVRhcmdldFZhbHVlcyA9IFtcbiAgJ1F1ZXJ5UmVzdWx0JyxcbiAgJ1JlY29yZHMnLFxuICAnU2luZ2xlUmVjb3JkJyxcbiAgJ0NvdW50Jyxcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5UmVzcG9uc2VUYXJnZXQgPSB0eXBlb2YgUmVzcG9uc2VUYXJnZXRWYWx1ZXNbbnVtYmVyXTtcblxuZXhwb3J0IGNvbnN0IFJlc3BvbnNlVGFyZ2V0czoge1xuICBbSyBpbiBRdWVyeVJlc3BvbnNlVGFyZ2V0XTogSztcbn0gPSBSZXNwb25zZVRhcmdldFZhbHVlcy5yZWR1Y2UoXG4gICh2YWx1ZXMsIHRhcmdldCkgPT4gKHsgLi4udmFsdWVzLCBbdGFyZ2V0XTogdGFyZ2V0IH0pLFxuICB7fSBhcyB7XG4gICAgW0sgaW4gUXVlcnlSZXNwb25zZVRhcmdldF06IEs7XG4gIH0sXG4pO1xuXG5leHBvcnQgdHlwZSBRdWVyeVJlc3BvbnNlPFxuICBSIGV4dGVuZHMgUmVjb3JkLFxuICBRUlQgZXh0ZW5kcyBRdWVyeVJlc3BvbnNlVGFyZ2V0ID0gUXVlcnlSZXNwb25zZVRhcmdldFxuPiA9IFFSVCBleHRlbmRzICdRdWVyeVJlc3VsdCdcbiAgPyBRdWVyeVJlc3VsdDxSPlxuICA6IFFSVCBleHRlbmRzICdSZWNvcmRzJ1xuICA/IFJbXVxuICA6IFFSVCBleHRlbmRzICdTaW5nbGVSZWNvcmQnXG4gID8gUiB8IG51bGxcbiAgOiBudW1iZXI7IC8vIFFSVCBleHRlbmRzICdDb3VudCdcblxuZXhwb3J0IHR5cGUgUXVlcnlEZXN0cm95T3B0aW9ucyA9IHtcbiAgYWxsb3dCdWxrPzogYm9vbGVhbjtcbiAgYnVsa1RocmVzaG9sZD86IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5VXBkYXRlT3B0aW9ucyA9IHtcbiAgYWxsb3dCdWxrPzogYm9vbGVhbjtcbiAgYnVsa1RocmVzaG9sZD86IG51bWJlcjtcbn07XG5cbi8qKlxuICpcbiAqL1xuY29uc3QgREVGQVVMVF9CVUxLX1RIUkVTSE9MRCA9IDIwMDtcblxuLyoqXG4gKiBRdWVyeVxuICovXG5leHBvcnQgY2xhc3MgUXVlcnk8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gIFIgZXh0ZW5kcyBSZWNvcmQgPSBSZWNvcmQsXG4gIFFSVCBleHRlbmRzIFF1ZXJ5UmVzcG9uc2VUYXJnZXQgPSBRdWVyeVJlc3BvbnNlVGFyZ2V0XG4+IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgc3RhdGljIF9sb2dnZXIgPSBnZXRMb2dnZXIoJ3F1ZXJ5Jyk7XG5cbiAgX2Nvbm46IENvbm5lY3Rpb248Uz47XG4gIF9sb2dnZXI6IExvZ2dlcjtcbiAgX3NvcWw6IE9wdGlvbmFsPHN0cmluZz47XG4gIF9sb2NhdG9yOiBPcHRpb25hbDxzdHJpbmc+O1xuICBfY29uZmlnOiBTT1FMUXVlcnlDb25maWcgPSB7fTtcbiAgX2NoaWxkcmVuOiBTdWJRdWVyeTxTLCBOLCBSLCBRUlQsIGFueSwgYW55LCBhbnk+W10gPSBbXTtcbiAgX29wdGlvbnM6IFF1ZXJ5T3B0aW9ucztcbiAgX2V4ZWN1dGVkOiBib29sZWFuID0gZmFsc2U7XG4gIF9maW5pc2hlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBfY2hhaW5pbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgX3Byb21pc2U6IFByb21pc2U8UXVlcnlSZXNwb25zZTxSLCBRUlQ+PjtcbiAgX3N0cmVhbTogU2VyaWFsaXphYmxlPFI+O1xuXG4gIHRvdGFsU2l6ZTogT3B0aW9uYWw8bnVtYmVyPjtcbiAgdG90YWxGZXRjaGVkOiBPcHRpb25hbDxudW1iZXI+O1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY29ubjogQ29ubmVjdGlvbjxTPixcbiAgICBjb25maWc6IHN0cmluZyB8IFF1ZXJ5Q29uZmlnPFMsIE4+IHwgeyBsb2NhdG9yOiBzdHJpbmcgfSxcbiAgICBvcHRpb25zPzogUGFydGlhbDxRdWVyeU9wdGlvbnM+LFxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2Nvbm4gPSBjb25uO1xuICAgIHRoaXMuX2xvZ2dlciA9IGNvbm4uX2xvZ0xldmVsXG4gICAgICA/IFF1ZXJ5Ll9sb2dnZXIuY3JlYXRlSW5zdGFuY2UoY29ubi5fbG9nTGV2ZWwpXG4gICAgICA6IFF1ZXJ5Ll9sb2dnZXI7XG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9zb3FsID0gY29uZmlnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIChjb25maWcgYXMgYW55KS5sb2NhdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgbG9jYXRvcjogc3RyaW5nID0gKGNvbmZpZyBhcyBhbnkpLmxvY2F0b3I7XG4gICAgICBpZiAobG9jYXRvci5pbmRleE9mKCcvJykgPj0gMCkge1xuICAgICAgICB0aGlzLl9sb2NhdG9yID0gbG9jYXRvci5zcGxpdCgnLycpLnBvcCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IGZpZWxkcywgaW5jbHVkZXMsIHNvcnQsIC4uLl9jb25maWcgfSA9IGNvbmZpZyBhcyBRdWVyeUNvbmZpZzxcbiAgICAgICAgUyxcbiAgICAgICAgTlxuICAgICAgPjtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IF9jb25maWc7XG4gICAgICB0aGlzLnNlbGVjdChmaWVsZHMpO1xuICAgICAgaWYgKGluY2x1ZGVzKSB7XG4gICAgICAgIHRoaXMuaW5jbHVkZUNoaWxkcmVuKGluY2x1ZGVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0KSB7XG4gICAgICAgIHRoaXMuc29ydChzb3J0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgbWF4RmV0Y2g6IDEwMDAwLFxuICAgICAgYXV0b0ZldGNoOiBmYWxzZSxcbiAgICAgIHNjYW5BbGw6IGZhbHNlLFxuICAgICAgcmVzcG9uc2VUYXJnZXQ6ICdRdWVyeVJlc3VsdCcsXG4gICAgICAuLi4ob3B0aW9ucyB8fCB7fSksXG4gICAgfSBhcyBRdWVyeU9wdGlvbnM7XG4gICAgLy8gcHJvbWlzZSBpbnN0YW5jZVxuICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLm9uKCdyZXNwb25zZScsIHJlc29sdmUpO1xuICAgICAgdGhpcy5vbignZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xuICAgIHRoaXMuX3N0cmVhbSA9IG5ldyBTZXJpYWxpemFibGUoKTtcbiAgICB0aGlzLm9uKCdyZWNvcmQnLCAocmVjb3JkKSA9PiB0aGlzLl9zdHJlYW0ucHVzaChyZWNvcmQpKTtcbiAgICB0aGlzLm9uKCdlbmQnLCAoKSA9PiB0aGlzLl9zdHJlYW0ucHVzaChudWxsKSk7XG4gICAgdGhpcy5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9zdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IGZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSByZXR1cm5pbmcgcmVzdWx0XG4gICAqL1xuICBzZWxlY3Q8XG4gICAgUiBleHRlbmRzIFJlY29yZCA9IFJlY29yZCxcbiAgICBGUCBleHRlbmRzIEZpZWxkUGF0aFNwZWNpZmllcjxTLCBOPiA9IEZpZWxkUGF0aFNwZWNpZmllcjxTLCBOPixcbiAgICBGUEMgZXh0ZW5kcyBGaWVsZFByb2plY3Rpb25Db25maWcgPSBGaWVsZFBhdGhTY29wZWRQcm9qZWN0aW9uPFMsIE4sIEZQPixcbiAgICBSMiBleHRlbmRzIFNPYmplY3RSZWNvcmQ8UywgTiwgRlBDLCBSPiA9IFNPYmplY3RSZWNvcmQ8UywgTiwgRlBDLCBSPlxuICA+KGZpZWxkczogUXVlcnlGaWVsZDxTLCBOLCBGUD4gPSAnKicpOiBRdWVyeTxTLCBOLCBSMiwgUVJUPiB7XG4gICAgaWYgKHRoaXMuX3NvcWwpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHNldCBzZWxlY3QgZmllbGRzIGZvciB0aGUgcXVlcnkgd2hpY2ggaGFzIGFscmVhZHkgYnVpbHQgU09RTC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9GaWVsZEFycmF5KGZpZWxkczogUXVlcnlGaWVsZDxTLCBOLCBGUD4pOiBzdHJpbmdbXSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGZpZWxkcyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBmaWVsZHMuc3BsaXQoL1xccyosXFxzKi8pXG4gICAgICAgIDogQXJyYXkuaXNBcnJheShmaWVsZHMpXG4gICAgICAgID8gKGZpZWxkcyBhcyBBcnJheTxzdHJpbmcgfCBGUD4pXG4gICAgICAgICAgICAubWFwKHRvRmllbGRBcnJheSlcbiAgICAgICAgICAgIC5yZWR1Y2UoKGZzLCBmKSA9PiBbLi4uZnMsIC4uLmZdLCBbXSBhcyBzdHJpbmdbXSlcbiAgICAgICAgOiBPYmplY3QuZW50cmllcyhmaWVsZHMgYXMgeyBbbmFtZTogc3RyaW5nXTogUXVlcnlGaWVsZDxTLCBOLCBGUD4gfSlcbiAgICAgICAgICAgIC5tYXAoKFtmLCB2XSkgPT4ge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiA/IFtmXSA6IFtdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b0ZpZWxkQXJyYXkodikubWFwKChwKSA9PiBgJHtmfS4ke3B9YCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAucmVkdWNlKChmcywgZikgPT4gWy4uLmZzLCAuLi5mXSwgW10gYXMgc3RyaW5nW10pO1xuICAgIH1cbiAgICBpZiAoZmllbGRzKSB7XG4gICAgICB0aGlzLl9jb25maWcuZmllbGRzID0gdG9GaWVsZEFycmF5KGZpZWxkcyk7XG4gICAgfVxuICAgIC8vIGZvcmNlIGNvbnZlcnQgcXVlcnkgcmVjb3JkIHR5cGUgd2l0aG91dCBjaGFuZ2luZyBpbnN0YW5jZTtcbiAgICByZXR1cm4gKHRoaXMgYXMgYW55KSBhcyBRdWVyeTxTLCBOLCBSMiwgUVJUPjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcXVlcnkgY29uZGl0aW9ucyB0byBmaWx0ZXIgdGhlIHJlc3VsdCByZWNvcmRzXG4gICAqL1xuICB3aGVyZShjb25kaXRpb25zOiBRdWVyeUNvbmRpdGlvbjxTLCBOPiB8IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBzZXQgd2hlcmUgY29uZGl0aW9ucyBmb3IgdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX2NvbmZpZy5jb25kaXRpb25zID0gY29uZGl0aW9ucztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW1pdCB0aGUgcmV0dXJuaW5nIHJlc3VsdFxuICAgKi9cbiAgbGltaXQobGltaXQ6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBzZXQgbGltaXQgZm9yIHRoZSBxdWVyeSB3aGljaCBoYXMgYWxyZWFkeSBidWlsdCBTT1FMLicsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLl9jb25maWcubGltaXQgPSBsaW1pdDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTa2lwIHJlY29yZHNcbiAgICovXG4gIHNraXAob2Zmc2V0OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fc29xbCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdDYW5ub3Qgc2V0IHNraXAvb2Zmc2V0IGZvciB0aGUgcXVlcnkgd2hpY2ggaGFzIGFscmVhZHkgYnVpbHQgU09RTC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5fY29uZmlnLm9mZnNldCA9IG9mZnNldDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFF1ZXJ5I3NraXAoKVxuICAgKi9cbiAgb2Zmc2V0ID0gdGhpcy5za2lwO1xuXG4gIC8qKlxuICAgKiBTZXQgcXVlcnkgc29ydCB3aXRoIGRpcmVjdGlvblxuICAgKi9cbiAgc29ydChzb3J0OiBRdWVyeVNvcnQ8UywgTj4pOiB0aGlzO1xuICBzb3J0KHNvcnQ6IHN0cmluZyk6IHRoaXM7XG4gIHNvcnQoc29ydDogU09iamVjdEZpZWxkTmFtZXM8UywgTj4sIGRpcjogU29ydERpcik6IHRoaXM7XG4gIHNvcnQoc29ydDogc3RyaW5nLCBkaXI6IFNvcnREaXIpOiB0aGlzO1xuICBzb3J0KFxuICAgIHNvcnQ6IFF1ZXJ5U29ydDxTLCBOPiB8IFNPYmplY3RGaWVsZE5hbWVzPFMsIE4+IHwgc3RyaW5nLFxuICAgIGRpcj86IFNvcnREaXIsXG4gICkge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBzZXQgc29ydCBmb3IgdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc29ydCA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGRpciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5zb3J0ID0gW1tzb3J0LCBkaXJdXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY29uZmlnLnNvcnQgPSBzb3J0IGFzIHN0cmluZyB8IHsgW2ZpZWxkOiBzdHJpbmddOiBTb3J0RGlyIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgUXVlcnkjc29ydCgpXG4gICAqL1xuICBvcmRlcmJ5OiB0eXBlb2YgUXVlcnkucHJvdG90eXBlLnNvcnQgPSB0aGlzLnNvcnQ7XG5cbiAgLyoqXG4gICAqIEluY2x1ZGUgY2hpbGQgcmVsYXRpb25zaGlwIHF1ZXJ5IGFuZCBtb3ZlIGRvd24gdG8gdGhlIGNoaWxkIHF1ZXJ5IGNvbnRleHRcbiAgICovXG4gIGluY2x1ZGU8XG4gICAgQ1JOIGV4dGVuZHMgQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBOPixcbiAgICBDTiBleHRlbmRzIENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgTiwgQ1JOPixcbiAgICBDRlAgZXh0ZW5kcyBGaWVsZFBhdGhTcGVjaWZpZXI8UywgQ04+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIENOPixcbiAgICBDRlBDIGV4dGVuZHMgRmllbGRQcm9qZWN0aW9uQ29uZmlnID0gRmllbGRQYXRoU2NvcGVkUHJvamVjdGlvbjxTLCBDTiwgQ0ZQPixcbiAgICBDUiBleHRlbmRzIFJlY29yZCA9IFNPYmplY3RSZWNvcmQ8UywgQ04sIENGUEM+XG4gID4oXG4gICAgY2hpbGRSZWxOYW1lOiBDUk4sXG4gICAgY29uZGl0aW9ucz86IE9wdGlvbmFsPFF1ZXJ5Q29uZGl0aW9uPFMsIENOPj4sXG4gICAgZmllbGRzPzogT3B0aW9uYWw8UXVlcnlGaWVsZDxTLCBDTiwgQ0ZQPj4sXG4gICAgb3B0aW9ucz86IHsgbGltaXQ/OiBudW1iZXI7IG9mZnNldD86IG51bWJlcjsgc29ydD86IFF1ZXJ5U29ydDxTLCBDTj4gfSxcbiAgKTogU3ViUXVlcnk8UywgTiwgUiwgUVJULCBDUk4sIENOLCBDUj47XG4gIGluY2x1ZGU8XG4gICAgQ1JOIGV4dGVuZHMgQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBOPixcbiAgICBDTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgICBDUiBleHRlbmRzIFJlY29yZCA9IFNPYmplY3RSZWNvcmQ8UywgQ04+XG4gID4oXG4gICAgY2hpbGRSZWxOYW1lOiBzdHJpbmcsXG4gICAgY29uZGl0aW9ucz86IE9wdGlvbmFsPFF1ZXJ5Q29uZGl0aW9uPFMsIENOPj4sXG4gICAgZmllbGRzPzogT3B0aW9uYWw8UXVlcnlGaWVsZDxTLCBDTj4+LFxuICAgIG9wdGlvbnM/OiB7IGxpbWl0PzogbnVtYmVyOyBvZmZzZXQ/OiBudW1iZXI7IHNvcnQ/OiBRdWVyeVNvcnQ8UywgQ04+IH0sXG4gICk6IFN1YlF1ZXJ5PFMsIE4sIFIsIFFSVCwgQ1JOLCBDTiwgQ1I+O1xuXG4gIGluY2x1ZGU8XG4gICAgQ1JOIGV4dGVuZHMgQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBOPixcbiAgICBDTiBleHRlbmRzIENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgTiwgQ1JOPixcbiAgICBDRlAgZXh0ZW5kcyBGaWVsZFBhdGhTcGVjaWZpZXI8UywgQ04+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIENOPixcbiAgICBDRlBDIGV4dGVuZHMgRmllbGRQcm9qZWN0aW9uQ29uZmlnID0gRmllbGRQYXRoU2NvcGVkUHJvamVjdGlvbjxTLCBDTiwgQ0ZQPixcbiAgICBDUiBleHRlbmRzIFJlY29yZCA9IFNPYmplY3RSZWNvcmQ8UywgQ04sIENGUEM+XG4gID4oXG4gICAgY2hpbGRSZWxOYW1lOiBDUk4gfCBzdHJpbmcsXG4gICAgY29uZGl0aW9ucz86IE9wdGlvbmFsPFF1ZXJ5Q29uZGl0aW9uPFMsIENOPj4sXG4gICAgZmllbGRzPzogT3B0aW9uYWw8UXVlcnlGaWVsZDxTLCBDTiwgQ0ZQPj4sXG4gICAgb3B0aW9uczogeyBsaW1pdD86IG51bWJlcjsgb2Zmc2V0PzogbnVtYmVyOyBzb3J0PzogUXVlcnlTb3J0PFMsIENOPiB9ID0ge30sXG4gICk6IFN1YlF1ZXJ5PFMsIE4sIFIsIFFSVCwgQ1JOLCBDTiwgQ1I+IHtcbiAgICBpZiAodGhpcy5fc29xbCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgaW5jbHVkZSBjaGlsZCByZWxhdGlvbnNoaXAgaW50byB0aGUgcXVlcnkgd2hpY2ggaGFzIGFscmVhZHkgYnVpbHQgU09RTC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgY2hpbGRDb25maWc6IFF1ZXJ5Q29uZmlnPFMsIENOLCBDRlA+ID0ge1xuICAgICAgZmllbGRzOiBmaWVsZHMgPT09IG51bGwgPyB1bmRlZmluZWQgOiBmaWVsZHMsXG4gICAgICB0YWJsZTogY2hpbGRSZWxOYW1lLFxuICAgICAgY29uZGl0aW9uczogY29uZGl0aW9ucyA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGNvbmRpdGlvbnMsXG4gICAgICBsaW1pdDogb3B0aW9ucy5saW1pdCxcbiAgICAgIG9mZnNldDogb3B0aW9ucy5vZmZzZXQsXG4gICAgICBzb3J0OiBvcHRpb25zLnNvcnQsXG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICBjb25zdCBjaGlsZFF1ZXJ5ID0gbmV3IFN1YlF1ZXJ5PFMsIE4sIFIsIFFSVCwgQ1JOLCBDTiwgQ1I+KFxuICAgICAgdGhpcy5fY29ubixcbiAgICAgIGNoaWxkUmVsTmFtZSBhcyBDUk4sXG4gICAgICBjaGlsZENvbmZpZyxcbiAgICAgIHRoaXMsXG4gICAgKTtcbiAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkUXVlcnkpO1xuICAgIHJldHVybiBjaGlsZFF1ZXJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIEluY2x1ZGUgY2hpbGQgcmVsYXRpb25zaGlwIHF1ZXJ5aWVzLCBidXQgbm90IG1vdmluZyBkb3duIHRvIHRoZSBjaGlsZHJlbiBjb250ZXh0XG4gICAqL1xuICBpbmNsdWRlQ2hpbGRyZW4oXG4gICAgaW5jbHVkZXM6IHtcbiAgICAgIFtDUk4gaW4gQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBOPl0/OiBRdWVyeUNvbmZpZzxcbiAgICAgICAgUyxcbiAgICAgICAgQ2hpbGRSZWxhdGlvbnNoaXBTT2JqZWN0TmFtZTxTLCBOLCBDUk4+XG4gICAgICA+O1xuICAgIH0sXG4gICkge1xuICAgIHR5cGUgQ1JOID0gQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBOPjtcbiAgICBpZiAodGhpcy5fc29xbCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgaW5jbHVkZSBjaGlsZCByZWxhdGlvbnNoaXAgaW50byB0aGUgcXVlcnkgd2hpY2ggaGFzIGFscmVhZHkgYnVpbHQgU09RTC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBjcm5hbWUgb2YgT2JqZWN0LmtleXMoaW5jbHVkZXMpIGFzIENSTltdKSB7XG4gICAgICBjb25zdCB7IGNvbmRpdGlvbnMsIGZpZWxkcywgLi4ub3B0aW9ucyB9ID0gaW5jbHVkZXNbXG4gICAgICAgIGNybmFtZVxuICAgICAgXSBhcyBRdWVyeUNvbmZpZzxTLCBDaGlsZFJlbGF0aW9uc2hpcFNPYmplY3ROYW1lPFMsIE4sIENSTj4+O1xuICAgICAgdGhpcy5pbmNsdWRlKGNybmFtZSwgY29uZGl0aW9ucywgZmllbGRzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0dGluZyBtYXhGZXRjaCBxdWVyeSBvcHRpb25cbiAgICovXG4gIG1heEZldGNoKG1heEZldGNoOiBudW1iZXIpIHtcbiAgICB0aGlzLl9vcHRpb25zLm1heEZldGNoID0gbWF4RmV0Y2g7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoaW5nIGF1dG8gZmV0Y2ggbW9kZVxuICAgKi9cbiAgYXV0b0ZldGNoKGF1dG9GZXRjaDogYm9vbGVhbikge1xuICAgIHRoaXMuX29wdGlvbnMuYXV0b0ZldGNoID0gYXV0b0ZldGNoO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBmbGFnIHRvIHNjYW4gYWxsIHJlY29yZHMgaW5jbHVkaW5nIGRlbGV0ZWQgYW5kIGFyY2hpdmVkLlxuICAgKi9cbiAgc2NhbkFsbChzY2FuQWxsOiBib29sZWFuKSB7XG4gICAgdGhpcy5fb3B0aW9ucy5zY2FuQWxsID0gc2NhbkFsbDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgc2V0UmVzcG9uc2VUYXJnZXQ8UVJUMSBleHRlbmRzIFF1ZXJ5UmVzcG9uc2VUYXJnZXQ+KFxuICAgIHJlc3BvbnNlVGFyZ2V0OiBRUlQxLFxuICApOiBRdWVyeTxTLCBOLCBSLCBRUlQxPiB7XG4gICAgaWYgKHJlc3BvbnNlVGFyZ2V0IGluIFJlc3BvbnNlVGFyZ2V0cykge1xuICAgICAgdGhpcy5fb3B0aW9ucy5yZXNwb25zZVRhcmdldCA9IHJlc3BvbnNlVGFyZ2V0O1xuICAgIH1cbiAgICAvLyBmb3JjZSBjaGFuZ2UgcXVlcnkgcmVzcG9uc2UgdGFyZ2V0IHdpdGhvdXQgY2hhbmdpbmcgaW5zdGFuY2VcbiAgICByZXR1cm4gKHRoaXMgYXMgUXVlcnk8UywgTiwgUj4pIGFzIFF1ZXJ5PFMsIE4sIFIsIFFSVDE+O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcXVlcnkgYW5kIGZldGNoIHJlY29yZHMgZnJvbSBzZXJ2ZXIuXG4gICAqL1xuICBleGVjdXRlPFFSVDEgZXh0ZW5kcyBRdWVyeVJlc3BvbnNlVGFyZ2V0ID0gUVJUPihcbiAgICBvcHRpb25zXzogUGFydGlhbDxRdWVyeU9wdGlvbnM+ICYgeyByZXNwb25zZVRhcmdldD86IFFSVDEgfSA9IHt9LFxuICApOiBRdWVyeTxTLCBOLCBSLCBRUlQxPiB7XG4gICAgaWYgKHRoaXMuX2V4ZWN1dGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlLWV4ZWN1dGluZyBhbHJlYWR5IGV4ZWN1dGVkIHF1ZXJ5Jyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4ZWN1dGluZyBhbHJlYWR5IGNsb3NlZCBxdWVyeScpO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBoZWFkZXJzOiBvcHRpb25zXy5oZWFkZXJzIHx8IHRoaXMuX29wdGlvbnMuaGVhZGVycyxcbiAgICAgIHJlc3BvbnNlVGFyZ2V0OiBvcHRpb25zXy5yZXNwb25zZVRhcmdldCB8fCB0aGlzLl9vcHRpb25zLnJlc3BvbnNlVGFyZ2V0LFxuICAgICAgYXV0b0ZldGNoOiBvcHRpb25zXy5hdXRvRmV0Y2ggfHwgdGhpcy5fb3B0aW9ucy5hdXRvRmV0Y2gsXG4gICAgICBtYXhGZXRjaDogb3B0aW9uc18ubWF4RmV0Y2ggfHwgdGhpcy5fb3B0aW9ucy5tYXhGZXRjaCxcbiAgICAgIHNjYW5BbGw6IG9wdGlvbnNfLnNjYW5BbGwgfHwgdGhpcy5fb3B0aW9ucy5zY2FuQWxsLFxuICAgIH07XG5cbiAgICAvLyBjb2xsZWN0IGZldGNoZWQgcmVjb3JkcyBpbiBhcnJheVxuICAgIC8vIG9ubHkgd2hlbiByZXNwb25zZSB0YXJnZXQgaXMgUmVjb3JkcyBhbmRcbiAgICAvLyBlaXRoZXIgY2FsbGJhY2sgb3IgY2hhaW5pbmcgcHJvbWlzZXMgYXJlIGF2YWlsYWJsZSB0byB0aGlzIHF1ZXJ5LlxuICAgIHRoaXMub25jZSgnZmV0Y2gnLCAoKSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIG9wdGlvbnMucmVzcG9uc2VUYXJnZXQgPT09IFJlc3BvbnNlVGFyZ2V0cy5SZWNvcmRzICYmXG4gICAgICAgIHRoaXMuX2NoYWluaW5nXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCctLS0gY29sbGVjdGluZyBhbGwgZmV0Y2hlZCByZWNvcmRzIC0tLScpO1xuICAgICAgICBjb25zdCByZWNvcmRzOiBSZWNvcmRbXSA9IFtdO1xuICAgICAgICBjb25zdCBvblJlY29yZCA9IChyZWNvcmQ6IFJlY29yZCkgPT4gcmVjb3Jkcy5wdXNoKHJlY29yZCk7XG4gICAgICAgIHRoaXMub24oJ3JlY29yZCcsIG9uUmVjb3JkKTtcbiAgICAgICAgdGhpcy5vbmNlKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcigncmVjb3JkJywgb25SZWNvcmQpO1xuICAgICAgICAgIHRoaXMuZW1pdCgncmVzcG9uc2UnLCByZWNvcmRzLCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmbGFnIHRvIHByZXZlbnQgcmUtZXhlY3V0aW9uXG4gICAgdGhpcy5fZXhlY3V0ZWQgPSB0cnVlO1xuXG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgIC8vIHN0YXJ0IGFjdHVhbCBxdWVyeVxuICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCc+Pj4gUXVlcnkgc3RhcnQgPj4+Jyk7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLl9leGVjdXRlKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoJyoqKiBRdWVyeSBmaW5pc2hlZCAqKionKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnLS0tIFF1ZXJ5IGVycm9yIC0tLScsIGVycm9yKTtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgLy8gcmV0dXJuIFF1ZXJ5IGluc3RhbmNlIGZvciBjaGFpbmluZ1xuICAgIHJldHVybiAodGhpcyBhcyBRdWVyeTxTLCBOLCBSPikgYXMgUXVlcnk8UywgTiwgUiwgUVJUMT47XG4gIH1cblxuICAvKipcbiAgICogU3lub255bSBvZiBRdWVyeSNleGVjdXRlKClcbiAgICovXG4gIGV4ZWMgPSB0aGlzLmV4ZWN1dGU7XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgUXVlcnkjZXhlY3V0ZSgpXG4gICAqL1xuICBydW4gPSB0aGlzLmV4ZWN1dGU7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhc3luYyBfZXhlY3V0ZShvcHRpb25zOiBRdWVyeU9wdGlvbnMpOiBQcm9taXNlPFF1ZXJ5UmVzcG9uc2U8Uj4+IHtcbiAgICBjb25zdCB7IGhlYWRlcnMsIHJlc3BvbnNlVGFyZ2V0LCBhdXRvRmV0Y2gsIG1heEZldGNoLCBzY2FuQWxsIH0gPSBvcHRpb25zO1xuICAgIGxldCB1cmwgPSAnJztcbiAgICBpZiAodGhpcy5fbG9jYXRvcikge1xuICAgICAgdXJsID0gW3RoaXMuX2Nvbm4uX2Jhc2VVcmwoKSwgJy9xdWVyeS8nLCB0aGlzLl9sb2NhdG9yXS5qb2luKCcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc29xbCA9IGF3YWl0IHRoaXMudG9TT1FMKCk7XG4gICAgICB0aGlzLnRvdGFsRmV0Y2hlZCA9IDA7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoYFNPUUwgPSAke3NvcWx9YCk7XG4gICAgICB1cmwgPSBbXG4gICAgICAgIHRoaXMuX2Nvbm4uX2Jhc2VVcmwoKSxcbiAgICAgICAgJy8nLFxuICAgICAgICBzY2FuQWxsID8gJ3F1ZXJ5QWxsJyA6ICdxdWVyeScsXG4gICAgICAgICc/cT0nLFxuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc29xbCksXG4gICAgICBdLmpvaW4oJycpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5fY29ubi5yZXF1ZXN0PFI+KHsgbWV0aG9kOiAnR0VUJywgdXJsLCBoZWFkZXJzIH0pO1xuICAgIHRoaXMuZW1pdCgnZmV0Y2gnKTtcbiAgICB0aGlzLnRvdGFsU2l6ZSA9IGRhdGEudG90YWxTaXplO1xuICAgIGxldCByZXM7XG4gICAgc3dpdGNoIChyZXNwb25zZVRhcmdldCkge1xuICAgICAgY2FzZSBSZXNwb25zZVRhcmdldHMuU2luZ2xlUmVjb3JkOlxuICAgICAgICByZXMgPSBkYXRhLnJlY29yZHMgJiYgZGF0YS5yZWNvcmRzLmxlbmd0aCA+IDAgPyBkYXRhLnJlY29yZHNbMF0gOiBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUmVzcG9uc2VUYXJnZXRzLlJlY29yZHM6XG4gICAgICAgIHJlcyA9IGRhdGEucmVjb3JkcztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJlc3BvbnNlVGFyZ2V0cy5Db3VudDpcbiAgICAgICAgcmVzID0gZGF0YS50b3RhbFNpemU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVzID0gZGF0YTtcbiAgICB9XG4gICAgLy8gb25seSBmaXJlIHJlc3BvbnNlIGV2ZW50IHdoZW4gaXQgc2hvdWxkIGJlIG5vdGlmaWVkIHBlciBmZXRjaFxuICAgIGlmIChyZXNwb25zZVRhcmdldCAhPT0gUmVzcG9uc2VUYXJnZXRzLlJlY29yZHMpIHtcbiAgICAgIHRoaXMuZW1pdCgncmVzcG9uc2UnLCByZXMsIHRoaXMpO1xuICAgIH1cblxuICAgIC8vIHN0cmVhbWluZyByZWNvcmQgaW5zdGFuY2VzXG4gICAgY29uc3QgbnVtUmVjb3JkcyA9IChkYXRhLnJlY29yZHMgJiYgZGF0YS5yZWNvcmRzLmxlbmd0aCkgfHwgMDtcbiAgICBsZXQgdG90YWxGZXRjaGVkID0gdGhpcy50b3RhbEZldGNoZWQgfHwgMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVJlY29yZHM7IGkrKykge1xuICAgICAgaWYgKHRvdGFsRmV0Y2hlZCA+PSBtYXhGZXRjaCkge1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVjb3JkID0gZGF0YS5yZWNvcmRzW2ldO1xuICAgICAgdGhpcy5lbWl0KCdyZWNvcmQnLCByZWNvcmQsIHRvdGFsRmV0Y2hlZCwgdGhpcyk7XG4gICAgICB0b3RhbEZldGNoZWQgKz0gMTtcbiAgICB9XG4gICAgdGhpcy50b3RhbEZldGNoZWQgPSB0b3RhbEZldGNoZWQ7XG4gICAgaWYgKGRhdGEubmV4dFJlY29yZHNVcmwpIHtcbiAgICAgIHRoaXMuX2xvY2F0b3IgPSBkYXRhLm5leHRSZWNvcmRzVXJsLnNwbGl0KCcvJykucG9wKCk7XG4gICAgfVxuICAgIHRoaXMuX2ZpbmlzaGVkID0gdGhpcy5fZmluaXNoZWQgfHwgZGF0YS5kb25lIHx8ICFhdXRvRmV0Y2g7XG4gICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICB0aGlzLmVtaXQoJ2VuZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9leGVjdXRlKG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGFpbiByZWFkYWJsZSBzdHJlYW0gaW5zdGFuY2VcbiAgICovXG4gIHN0cmVhbSh0eXBlOiAncmVjb3JkJyk6IFNlcmlhbGl6YWJsZTxSPjtcbiAgc3RyZWFtKHR5cGU6ICdjc3YnKTogUmVhZGFibGU7XG4gIHN0cmVhbSh0eXBlOiAncmVjb3JkJyB8ICdjc3YnID0gJ2NzdicpIHtcbiAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkICYmICF0aGlzLl9leGVjdXRlZCkge1xuICAgICAgdGhpcy5leGVjdXRlKHsgYXV0b0ZldGNoOiB0cnVlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZSA9PT0gJ3JlY29yZCcgPyB0aGlzLl9zdHJlYW0gOiB0aGlzLl9zdHJlYW0uc3RyZWFtKHR5cGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBpcGUgdGhlIHF1ZXJpZWQgcmVjb3JkcyB0byBhbm90aGVyIHN0cmVhbVxuICAgKiBUaGlzIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBRdWVyeSBpcyBub3QgYSByZWNvcmQgc3RyZWFtIGluc3RhbmNlIGFueW1vcmUgaW4gMi4wLlxuICAgKiBJZiB5b3Ugd2FudCBhIHJlY29yZCBzdHJlYW0gaW5zdGFuY2UsIHVzZSBgUXVlcnkjc3RyZWFtKCdyZWNvcmQnKWAuXG4gICAqL1xuICBwaXBlKHN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyZWFtKCdyZWNvcmQnKS5waXBlKHN0cmVhbSk7XG4gIH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgYXN5bmMgX2V4cGFuZEZpZWxkcyhzb2JqZWN0Xz86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgZXhwYW5kIGZpZWxkcyBmb3IgdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHsgZmllbGRzID0gW10sIHRhYmxlID0gJycgfSA9IHRoaXMuX2NvbmZpZztcbiAgICBjb25zdCBzb2JqZWN0ID0gc29iamVjdF8gfHwgdGFibGU7XG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFxuICAgICAgYF9leHBhbmRGaWVsZHM6IHNvYmplY3QgPSAke3NvYmplY3R9LCBmaWVsZHMgPSAke2ZpZWxkcy5qb2luKCcsICcpfWAsXG4gICAgKTtcbiAgICBjb25zdCBbZWZpZWxkc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLl9leHBhbmRBc3Rlcmlza0ZpZWxkcyhzb2JqZWN0LCBmaWVsZHMpLFxuICAgICAgLi4udGhpcy5fY2hpbGRyZW4ubWFwKGFzeW5jIChjaGlsZFF1ZXJ5KSA9PiB7XG4gICAgICAgIGF3YWl0IGNoaWxkUXVlcnkuX2V4cGFuZEZpZWxkcygpO1xuICAgICAgICByZXR1cm4gW10gYXMgc3RyaW5nW107XG4gICAgICB9KSxcbiAgICBdKTtcbiAgICB0aGlzLl9jb25maWcuZmllbGRzID0gZWZpZWxkcztcbiAgICB0aGlzLl9jb25maWcuaW5jbHVkZXMgPSB0aGlzLl9jaGlsZHJlblxuICAgICAgLm1hcCgoY3F1ZXJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IGNjb25maWcgPSBjcXVlcnkuX3F1ZXJ5Ll9jb25maWc7XG4gICAgICAgIHJldHVybiBbY2NvbmZpZy50YWJsZSwgY2NvbmZpZ10gYXMgW3N0cmluZywgU09RTFF1ZXJ5Q29uZmlnXTtcbiAgICAgIH0pXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoaW5jbHVkZXMsIFtjdGFibGUsIGNjb25maWddKSA9PiAoe1xuICAgICAgICAgIC4uLmluY2x1ZGVzLFxuICAgICAgICAgIFtjdGFibGVdOiBjY29uZmlnLFxuICAgICAgICB9KSxcbiAgICAgICAge30gYXMgeyBbbmFtZTogc3RyaW5nXTogU09RTFF1ZXJ5Q29uZmlnIH0sXG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBhc3luYyBfZmluZFJlbGF0aW9uT2JqZWN0KHJlbE5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgdGFibGUgPSB0aGlzLl9jb25maWcudGFibGU7XG4gICAgaWYgKCF0YWJsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0YWJsZSBpbmZvcm1hdGlvbiBwcm92aWRlZCBpbiB0aGUgcXVlcnknKTtcbiAgICB9XG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFxuICAgICAgYGZpbmRpbmcgdGFibGUgZm9yIHJlbGF0aW9uIFwiJHtyZWxOYW1lfVwiIGluIFwiJHt0YWJsZX1cIi4uLmAsXG4gICAgKTtcbiAgICBjb25zdCBzb2JqZWN0ID0gYXdhaXQgdGhpcy5fY29ubi5kZXNjcmliZSQodGFibGUpO1xuICAgIGNvbnN0IHVwcGVyUm5hbWUgPSByZWxOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgZm9yIChjb25zdCBjciBvZiBzb2JqZWN0LmNoaWxkUmVsYXRpb25zaGlwcykge1xuICAgICAgaWYgKFxuICAgICAgICAoY3IucmVsYXRpb25zaGlwTmFtZSB8fCAnJykudG9VcHBlckNhc2UoKSA9PT0gdXBwZXJSbmFtZSAmJlxuICAgICAgICBjci5jaGlsZFNPYmplY3RcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gY3IuY2hpbGRTT2JqZWN0O1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGNoaWxkIHJlbGF0aW9uc2hpcCBmb3VuZDogJHtyZWxOYW1lfWApO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBhc3luYyBfZXhwYW5kQXN0ZXJpc2tGaWVsZHMoXG4gICAgc29iamVjdDogc3RyaW5nLFxuICAgIGZpZWxkczogc3RyaW5nW10sXG4gICk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBleHBhbmRlZEZpZWxkcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgZmllbGRzLm1hcChhc3luYyAoZmllbGQpID0+IHRoaXMuX2V4cGFuZEFzdGVyaXNrRmllbGQoc29iamVjdCwgZmllbGQpKSxcbiAgICApO1xuICAgIHJldHVybiBleHBhbmRlZEZpZWxkcy5yZWR1Y2UoXG4gICAgICAoZWZsZHM6IHN0cmluZ1tdLCBmbGRzOiBzdHJpbmdbXSk6IHN0cmluZ1tdID0+IFsuLi5lZmxkcywgLi4uZmxkc10sXG4gICAgICBbXSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBhc3luYyBfZXhwYW5kQXN0ZXJpc2tGaWVsZChcbiAgICBzb2JqZWN0OiBzdHJpbmcsXG4gICAgZmllbGQ6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgZXhwYW5kaW5nIGZpZWxkIFwiJHtmaWVsZH1cIiBpbiBcIiR7c29iamVjdH1cIi4uLmApO1xuICAgIGNvbnN0IGZwYXRoID0gZmllbGQuc3BsaXQoJy4nKTtcbiAgICBpZiAoZnBhdGhbZnBhdGgubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgICAgY29uc3Qgc28gPSBhd2FpdCB0aGlzLl9jb25uLmRlc2NyaWJlJChzb2JqZWN0KTtcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgdGFibGUgJHtzb2JqZWN0fSBoYXMgYmVlbiBkZXNjcmliZWRgKTtcbiAgICAgIGlmIChmcGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IHJuYW1lID0gZnBhdGguc2hpZnQoKTtcbiAgICAgICAgZm9yIChjb25zdCBmIG9mIHNvLmZpZWxkcykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGYucmVsYXRpb25zaGlwTmFtZSAmJlxuICAgICAgICAgICAgcm5hbWUgJiZcbiAgICAgICAgICAgIGYucmVsYXRpb25zaGlwTmFtZS50b1VwcGVyQ2FzZSgpID09PSBybmFtZS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCByZmllbGQgPSBmO1xuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlVG8gPSByZmllbGQucmVmZXJlbmNlVG8gfHwgW107XG4gICAgICAgICAgICBjb25zdCBydGFibGUgPSByZWZlcmVuY2VUby5sZW5ndGggPT09IDEgPyByZWZlcmVuY2VUb1swXSA6ICdOYW1lJztcbiAgICAgICAgICAgIGNvbnN0IGZwYXRocyA9IGF3YWl0IHRoaXMuX2V4cGFuZEFzdGVyaXNrRmllbGQoXG4gICAgICAgICAgICAgIHJ0YWJsZSxcbiAgICAgICAgICAgICAgZnBhdGguam9pbignLicpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBmcGF0aHMubWFwKChmcCkgPT4gYCR7cm5hbWV9LiR7ZnB9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzby5maWVsZHMubWFwKChmKSA9PiBmLm5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gW2ZpZWxkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBsYWluIHBsYW4gZm9yIGV4ZWN1dGluZyBxdWVyeVxuICAgKi9cbiAgYXN5bmMgZXhwbGFpbigpIHtcbiAgICBjb25zdCBzb3FsID0gYXdhaXQgdGhpcy50b1NPUUwoKTtcbiAgICB0aGlzLl9sb2dnZXIuZGVidWcoYFNPUUwgPSAke3NvcWx9YCk7XG4gICAgY29uc3QgdXJsID0gYC9xdWVyeS8/ZXhwbGFpbj0ke2VuY29kZVVSSUNvbXBvbmVudChzb3FsKX1gO1xuICAgIHJldHVybiB0aGlzLl9jb25uLnJlcXVlc3Q8UXVlcnlFeHBsYWluUmVzdWx0Pih1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBTT1FMIGV4cHJlc3Npb24gZm9yIHRoZSBxdWVyeVxuICAgKi9cbiAgYXN5bmMgdG9TT1FMKCkge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc29xbDtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5fZXhwYW5kRmllbGRzKCk7XG4gICAgcmV0dXJuIGNyZWF0ZVNPUUwodGhpcy5fY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9taXNlL0ErIGludGVyZmFjZVxuICAgKiBodHRwOi8vcHJvbWlzZXMtYXBsdXMuZ2l0aHViLmlvL3Byb21pc2VzLXNwZWMvXG4gICAqXG4gICAqIERlbGVnYXRlIHRvIGRlZmVycmVkIHByb21pc2UsIHJldHVybiBwcm9taXNlIGluc3RhbmNlIGZvciBxdWVyeSByZXN1bHRcbiAgICovXG4gIHRoZW48VSwgVj4oXG4gICAgb25SZXNvbHZlPzpcbiAgICAgIHwgKChxcjogUXVlcnlSZXNwb25zZTxSLCBRUlQ+KSA9PiBVIHwgUHJvbWlzZTxVPilcbiAgICAgIHwgbnVsbFxuICAgICAgfCB1bmRlZmluZWQsXG4gICAgb25SZWplY3Q/OiAoKGVycjogRXJyb3IpID0+IFYgfCBQcm9taXNlPFY+KSB8IG51bGwgfCB1bmRlZmluZWQsXG4gICk6IFByb21pc2U8VSB8IFY+IHtcbiAgICB0aGlzLl9jaGFpbmluZyA9IHRydWU7XG4gICAgaWYgKCF0aGlzLl9maW5pc2hlZCAmJiAhdGhpcy5fZXhlY3V0ZWQpIHtcbiAgICAgIHRoaXMuZXhlY3V0ZSgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX3Byb21pc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2ludmFsaWQgc3RhdGU6IHByb21pc2UgaXMgbm90IHNldCBhZnRlciBxdWVyeSBleGVjdXRpb24nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Byb21pc2UudGhlbihvblJlc29sdmUsIG9uUmVqZWN0KTtcbiAgfVxuXG4gIGNhdGNoKFxuICAgIG9uUmVqZWN0OiAoXG4gICAgICBlcnI6IEVycm9yLFxuICAgICkgPT4gUXVlcnlSZXNwb25zZTxSLCBRUlQ+IHwgUHJvbWlzZTxRdWVyeVJlc3BvbnNlPFIsIFFSVD4+LFxuICApOiBQcm9taXNlPFF1ZXJ5UmVzcG9uc2U8UiwgUVJUPj4ge1xuICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3QpO1xuICB9XG5cbiAgcHJvbWlzZSgpOiBQcm9taXNlPFF1ZXJ5UmVzcG9uc2U8UiwgUVJUPj4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQnVsayBkZWxldGUgcXVlcmllZCByZWNvcmRzXG4gICAqL1xuICBkZXN0cm95KG9wdGlvbnM/OiBRdWVyeURlc3Ryb3lPcHRpb25zKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+O1xuICBkZXN0cm95KHR5cGU6IE4sIG9wdGlvbnM/OiBRdWVyeURlc3Ryb3lPcHRpb25zKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+O1xuICBkZXN0cm95KHR5cGU/OiBOIHwgUXVlcnlEZXN0cm95T3B0aW9ucywgb3B0aW9ucz86IFF1ZXJ5RGVzdHJveU9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMgPSB0eXBlO1xuICAgICAgdHlwZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgdHlwZV86IE9wdGlvbmFsPE4+ID0gdHlwZSB8fCAodGhpcy5fY29uZmlnLnRhYmxlIGFzIE9wdGlvbmFsPE4+KTtcbiAgICBpZiAoIXR5cGVfKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdTT1FMIGJhc2VkIHF1ZXJ5IG5lZWRzIFNPYmplY3QgdHlwZSBpbmZvcm1hdGlvbiB0byBidWxrIGRlbGV0ZS4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gU2V0IHRoZSB0aHJlc2hvbGQgbnVtYmVyIHRvIHBhc3MgdG8gYnVsayBBUElcbiAgICBjb25zdCB0aHJlc2hvbGROdW0gPVxuICAgICAgb3B0aW9ucy5hbGxvd0J1bGsgPT09IGZhbHNlXG4gICAgICAgID8gLTFcbiAgICAgICAgOiB0eXBlb2Ygb3B0aW9ucy5idWxrVGhyZXNob2xkID09PSAnbnVtYmVyJ1xuICAgICAgICA/IG9wdGlvbnMuYnVsa1RocmVzaG9sZFxuICAgICAgICA6IC8vIGRldGVybWluZSB0aHJlc2hvbGQgaWYgdGhlIGNvbm5lY3Rpb24gdmVyc2lvbiBzdXBwb3J0cyBTT2JqZWN0IGNvbGxlY3Rpb24gQVBJIG9yIG5vdFxuICAgICAgICB0aGlzLl9jb25uLl9lbnN1cmVWZXJzaW9uKDQyKVxuICAgICAgICA/IERFRkFVTFRfQlVMS19USFJFU0hPTERcbiAgICAgICAgOiB0aGlzLl9jb25uLl9tYXhSZXF1ZXN0IC8gMjtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgY3JlYXRlQmF0Y2ggPSAoKSA9PlxuICAgICAgICB0aGlzLl9jb25uXG4gICAgICAgICAgLnNvYmplY3QodHlwZV8pXG4gICAgICAgICAgLmRlbGV0ZUJ1bGsoKVxuICAgICAgICAgIC5vbigncmVzcG9uc2UnLCByZXNvbHZlKVxuICAgICAgICAgIC5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgbGV0IHJlY29yZHM6IFJlY29yZFtdID0gW107XG4gICAgICBsZXQgYmF0Y2g6IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUJhdGNoPiB8IG51bGwgPSBudWxsO1xuICAgICAgY29uc3QgaGFuZGxlUmVjb3JkID0gKHJlYzogUmVjb3JkKSA9PiB7XG4gICAgICAgIGlmICghcmVjLklkKSB7XG4gICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1F1ZXJpZWQgcmVjb3JkIGRvZXMgbm90IGluY2x1ZGUgU2FsZXNmb3JjZSByZWNvcmQgSUQuJyxcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWNvcmQ6IFJlY29yZCA9IHsgSWQ6IHJlYy5JZCB9O1xuICAgICAgICBpZiAoYmF0Y2gpIHtcbiAgICAgICAgICBiYXRjaC53cml0ZShyZWNvcmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQpO1xuICAgICAgICAgIGlmICh0aHJlc2hvbGROdW0gPj0gMCAmJiByZWNvcmRzLmxlbmd0aCA+IHRocmVzaG9sZE51bSkge1xuICAgICAgICAgICAgLy8gVXNlIGJ1bGsgZGVsZXRlIGluc3RlYWQgb2YgU09iamVjdCBSRVNUIEFQSVxuICAgICAgICAgICAgYmF0Y2ggPSBjcmVhdGVCYXRjaCgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgcmVjb3Jkcykge1xuICAgICAgICAgICAgICBiYXRjaC53cml0ZShyZWNvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjb3JkcyA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGhhbmRsZUVuZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGJhdGNoKSB7XG4gICAgICAgICAgYmF0Y2guZW5kKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgaWRzID0gcmVjb3Jkcy5tYXAoKHJlY29yZCkgPT4gcmVjb3JkLklkIGFzIHN0cmluZyk7XG4gICAgICAgICAgdGhpcy5fY29ublxuICAgICAgICAgICAgLnNvYmplY3QodHlwZV8pXG4gICAgICAgICAgICAuZGVzdHJveShpZHMsIHsgYWxsb3dSZWN1cnNpdmU6IHRydWUgfSlcbiAgICAgICAgICAgIC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLnN0cmVhbSgncmVjb3JkJylcbiAgICAgICAgLm9uKCdkYXRhJywgaGFuZGxlUmVjb3JkKVxuICAgICAgICAub24oJ2VuZCcsIGhhbmRsZUVuZClcbiAgICAgICAgLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3lub255bSBvZiBRdWVyeSNkZXN0cm95KClcbiAgICovXG4gIGRlbGV0ZSA9IHRoaXMuZGVzdHJveTtcblxuICAvKipcbiAgICogU3lub255bSBvZiBRdWVyeSNkZXN0cm95KClcbiAgICovXG4gIGRlbCA9IHRoaXMuZGVzdHJveTtcblxuICAvKipcbiAgICogQnVsayB1cGRhdGUgcXVlcmllZCByZWNvcmRzLCB1c2luZyBnaXZlbiBtYXBwaW5nIGZ1bmN0aW9uL29iamVjdFxuICAgKi9cbiAgdXBkYXRlPFVSIGV4dGVuZHMgU09iamVjdElucHV0UmVjb3JkPFMsIE4+PihcbiAgICBtYXBwaW5nOiAoKHJlYzogUikgPT4gVVIpIHwgVVIsXG4gICAgdHlwZTogTixcbiAgICBvcHRpb25zPzogUXVlcnlVcGRhdGVPcHRpb25zLFxuICApOiBQcm9taXNlPFNhdmVSZXN1bHRbXT47XG4gIHVwZGF0ZTxVUiBleHRlbmRzIFNPYmplY3RJbnB1dFJlY29yZDxTLCBOPj4oXG4gICAgbWFwcGluZzogKChyZWM6IFIpID0+IFVSKSB8IFVSLFxuICAgIG9wdGlvbnM/OiBRdWVyeVVwZGF0ZU9wdGlvbnMsXG4gICk6IFByb21pc2U8U2F2ZVJlc3VsdFtdPjtcbiAgdXBkYXRlPFVSIGV4dGVuZHMgU09iamVjdElucHV0UmVjb3JkPFMsIE4+PihcbiAgICBtYXBwaW5nOiAoKHJlYzogUikgPT4gVVIpIHwgVVIsXG4gICAgdHlwZT86IE4gfCBRdWVyeVVwZGF0ZU9wdGlvbnMsXG4gICAgb3B0aW9ucz86IFF1ZXJ5VXBkYXRlT3B0aW9ucyxcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsKSB7XG4gICAgICBvcHRpb25zID0gdHlwZTtcbiAgICAgIHR5cGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHR5cGVfOiBPcHRpb25hbDxOPiA9XG4gICAgICB0eXBlIHx8ICh0aGlzLl9jb25maWcgJiYgKHRoaXMuX2NvbmZpZy50YWJsZSBhcyBPcHRpb25hbDxOPikpO1xuICAgIGlmICghdHlwZV8pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1NPUUwgYmFzZWQgcXVlcnkgbmVlZHMgU09iamVjdCB0eXBlIGluZm9ybWF0aW9uIHRvIGJ1bGsgdXBkYXRlLicsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCB1cGRhdGVTdHJlYW0gPVxuICAgICAgdHlwZW9mIG1hcHBpbmcgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBSZWNvcmRTdHJlYW0ubWFwKG1hcHBpbmcpXG4gICAgICAgIDogUmVjb3JkU3RyZWFtLnJlY29yZE1hcFN0cmVhbShtYXBwaW5nKTtcbiAgICAvLyBTZXQgdGhlIHRocmVzaG9sZCBudW1iZXIgdG8gcGFzcyB0byBidWxrIEFQSVxuICAgIGNvbnN0IHRocmVzaG9sZE51bSA9XG4gICAgICBvcHRpb25zLmFsbG93QnVsayA9PT0gZmFsc2VcbiAgICAgICAgPyAtMVxuICAgICAgICA6IHR5cGVvZiBvcHRpb25zLmJ1bGtUaHJlc2hvbGQgPT09ICdudW1iZXInXG4gICAgICAgID8gb3B0aW9ucy5idWxrVGhyZXNob2xkXG4gICAgICAgIDogLy8gZGV0ZXJtaW5lIHRocmVzaG9sZCBpZiB0aGUgY29ubmVjdGlvbiB2ZXJzaW9uIHN1cHBvcnRzIFNPYmplY3QgY29sbGVjdGlvbiBBUEkgb3Igbm90XG4gICAgICAgIHRoaXMuX2Nvbm4uX2Vuc3VyZVZlcnNpb24oNDIpXG4gICAgICAgID8gREVGQVVMVF9CVUxLX1RIUkVTSE9MRFxuICAgICAgICA6IHRoaXMuX2Nvbm4uX21heFJlcXVlc3QgLyAyO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjcmVhdGVCYXRjaCA9ICgpID0+XG4gICAgICAgIHRoaXMuX2Nvbm5cbiAgICAgICAgICAuc29iamVjdCh0eXBlXylcbiAgICAgICAgICAudXBkYXRlQnVsaygpXG4gICAgICAgICAgLm9uKCdyZXNwb25zZScsIHJlc29sdmUpXG4gICAgICAgICAgLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICBsZXQgcmVjb3JkczogU09iamVjdFVwZGF0ZVJlY29yZDxTLCBOPltdID0gW107XG4gICAgICBsZXQgYmF0Y2g6IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUJhdGNoPiB8IG51bGwgPSBudWxsO1xuICAgICAgY29uc3QgaGFuZGxlUmVjb3JkID0gKHJlY29yZDogUmVjb3JkKSA9PiB7XG4gICAgICAgIGlmIChiYXRjaCkge1xuICAgICAgICAgIGJhdGNoLndyaXRlKHJlY29yZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVjb3Jkcy5wdXNoKHJlY29yZCBhcyBTT2JqZWN0VXBkYXRlUmVjb3JkPFMsIE4+KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhyZXNob2xkTnVtID49IDAgJiYgcmVjb3Jkcy5sZW5ndGggPiB0aHJlc2hvbGROdW0pIHtcbiAgICAgICAgICAvLyBVc2UgYnVsayB1cGRhdGUgaW5zdGVhZCBvZiBTT2JqZWN0IFJFU1QgQVBJXG4gICAgICAgICAgYmF0Y2ggPSBjcmVhdGVCYXRjaCgpO1xuICAgICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIHJlY29yZHMpIHtcbiAgICAgICAgICAgIGJhdGNoLndyaXRlKHJlY29yZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlY29yZHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGhhbmRsZUVuZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGJhdGNoKSB7XG4gICAgICAgICAgYmF0Y2guZW5kKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fY29ublxuICAgICAgICAgICAgLnNvYmplY3QodHlwZV8pXG4gICAgICAgICAgICAudXBkYXRlKHJlY29yZHMsIHsgYWxsb3dSZWN1cnNpdmU6IHRydWUgfSlcbiAgICAgICAgICAgIC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLnN0cmVhbSgncmVjb3JkJylcbiAgICAgICAgLm9uKCdlcnJvcicsIHJlamVjdClcbiAgICAgICAgLnBpcGUodXBkYXRlU3RyZWFtKVxuICAgICAgICAub24oJ2RhdGEnLCBoYW5kbGVSZWNvcmQpXG4gICAgICAgIC5vbignZW5kJywgaGFuZGxlRW5kKVxuICAgICAgICAub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLyoqXG4gKiBTdWJRdWVyeSBvYmplY3QgZm9yIHJlcHJlc2VudGluZyBjaGlsZCByZWxhdGlvbnNoaXAgcXVlcnlcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YlF1ZXJ5PFxuICBTIGV4dGVuZHMgU2NoZW1hLFxuICBQTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgUFIgZXh0ZW5kcyBSZWNvcmQsXG4gIFBRUlQgZXh0ZW5kcyBRdWVyeVJlc3BvbnNlVGFyZ2V0LFxuICBDUk4gZXh0ZW5kcyBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIFBOPiA9IENoaWxkUmVsYXRpb25zaGlwTmFtZXM8UywgUE4+LFxuICBDTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPiA9IENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgUE4sIENSTj4sXG4gIENSIGV4dGVuZHMgUmVjb3JkID0gUmVjb3JkXG4+IHtcbiAgX3JlbE5hbWU6IENSTjtcbiAgX3F1ZXJ5OiBRdWVyeTxTLCBDTiwgQ1I+O1xuICBfcGFyZW50OiBRdWVyeTxTLCBQTiwgUFIsIFBRUlQ+O1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY29ubjogQ29ubmVjdGlvbjxTPixcbiAgICByZWxOYW1lOiBDUk4sXG4gICAgY29uZmlnOiBRdWVyeUNvbmZpZzxTLCBDTj4sXG4gICAgcGFyZW50OiBRdWVyeTxTLCBQTiwgUFIsIFBRUlQ+LFxuICApIHtcbiAgICB0aGlzLl9yZWxOYW1lID0gcmVsTmFtZTtcbiAgICB0aGlzLl9xdWVyeSA9IG5ldyBRdWVyeShjb25uLCBjb25maWcpO1xuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgc2VsZWN0PFxuICAgIFIgZXh0ZW5kcyBSZWNvcmQgPSBSZWNvcmQsXG4gICAgRlAgZXh0ZW5kcyBGaWVsZFBhdGhTcGVjaWZpZXI8UywgQ04+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIENOPixcbiAgICBGUEMgZXh0ZW5kcyBGaWVsZFByb2plY3Rpb25Db25maWcgPSBGaWVsZFBhdGhTY29wZWRQcm9qZWN0aW9uPFMsIENOLCBGUD5cbiAgPihcbiAgICBmaWVsZHM6IFF1ZXJ5RmllbGQ8UywgQ04sIEZQPixcbiAgKTogU3ViUXVlcnk8UywgUE4sIFBSLCBQUVJULCBDUk4sIENOLCBTT2JqZWN0UmVjb3JkPFMsIENOLCBGUEMsIFI+PiB7XG4gICAgLy8gZm9yY2UgY29udmVydCBxdWVyeSByZWNvcmQgdHlwZSB3aXRob3V0IGNoYW5naW5nIGluc3RhbmNlXG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS5zZWxlY3QoZmllbGRzKSBhcyBhbnk7XG4gICAgcmV0dXJuICh0aGlzIGFzIGFueSkgYXMgU3ViUXVlcnk8XG4gICAgICBTLFxuICAgICAgUE4sXG4gICAgICBQUixcbiAgICAgIFBRUlQsXG4gICAgICBDUk4sXG4gICAgICBDTixcbiAgICAgIFNPYmplY3RSZWNvcmQ8UywgQ04sIEZQQywgUj5cbiAgICA+O1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICB3aGVyZShjb25kaXRpb25zOiBRdWVyeUNvbmRpdGlvbjxTLCBDTj4gfCBzdHJpbmcpOiB0aGlzIHtcbiAgICB0aGlzLl9xdWVyeSA9IHRoaXMuX3F1ZXJ5LndoZXJlKGNvbmRpdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIExpbWl0IHRoZSByZXR1cm5pbmcgcmVzdWx0XG4gICAqL1xuICBsaW1pdChsaW1pdDogbnVtYmVyKSB7XG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS5saW1pdChsaW1pdCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2tpcCByZWNvcmRzXG4gICAqL1xuICBza2lwKG9mZnNldDogbnVtYmVyKSB7XG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS5za2lwKG9mZnNldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU3lub255bSBvZiBTdWJRdWVyeSNza2lwKClcbiAgICovXG4gIG9mZnNldCA9IHRoaXMuc2tpcDtcblxuICAvKipcbiAgICogU2V0IHF1ZXJ5IHNvcnQgd2l0aCBkaXJlY3Rpb25cbiAgICovXG4gIHNvcnQoc29ydDogUXVlcnlTb3J0PFMsIENOPik6IHRoaXM7XG4gIHNvcnQoc29ydDogc3RyaW5nKTogdGhpcztcbiAgc29ydChzb3J0OiBTT2JqZWN0RmllbGROYW1lczxTLCBDTj4sIGRpcjogU29ydERpcik6IHRoaXM7XG4gIHNvcnQoc29ydDogc3RyaW5nLCBkaXI6IFNvcnREaXIpOiB0aGlzO1xuICBzb3J0KFxuICAgIHNvcnQ6IFF1ZXJ5U29ydDxTLCBDTj4gfCBTT2JqZWN0RmllbGROYW1lczxTLCBDTj4gfCBzdHJpbmcsXG4gICAgZGlyPzogU29ydERpcixcbiAgKSB7XG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS5zb3J0KHNvcnQgYXMgYW55LCBkaXIgYXMgU29ydERpcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU3lub255bSBvZiBTdWJRdWVyeSNzb3J0KClcbiAgICovXG4gIG9yZGVyYnk6IHR5cGVvZiBTdWJRdWVyeS5wcm90b3R5cGUuc29ydCA9IHRoaXMuc29ydDtcblxuICAvKipcbiAgICpcbiAgICovXG4gIGFzeW5jIF9leHBhbmRGaWVsZHMoKSB7XG4gICAgY29uc3Qgc29iamVjdCA9IGF3YWl0IHRoaXMuX3BhcmVudC5fZmluZFJlbGF0aW9uT2JqZWN0KHRoaXMuX3JlbE5hbWUpO1xuICAgIHJldHVybiB0aGlzLl9xdWVyeS5fZXhwYW5kRmllbGRzKHNvYmplY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhY2sgdGhlIGNvbnRleHQgdG8gcGFyZW50IHF1ZXJ5IG9iamVjdFxuICAgKi9cbiAgZW5kPFxuICAgIENSUCBleHRlbmRzIFNPYmplY3RDaGlsZFJlbGF0aW9uc2hpcFByb3A8XG4gICAgICBDUk4sXG4gICAgICBDUlxuICAgID4gPSBTT2JqZWN0Q2hpbGRSZWxhdGlvbnNoaXBQcm9wPENSTiwgQ1I+LFxuICAgIFBSMSBleHRlbmRzIFJlY29yZCA9IFBSICYgQ1JQXG4gID4oKTogUXVlcnk8UywgUE4sIFBSMSwgUFFSVD4ge1xuICAgIHJldHVybiAodGhpcy5fcGFyZW50IGFzIGFueSkgYXMgUXVlcnk8UywgUE4sIFBSMSwgUFFSVD47XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVlcnk7XG4iXX0=