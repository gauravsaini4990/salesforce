import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.promise";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source), true)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @file Manages Salesforce Metadata API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { Readable } from 'stream';
import { registerModule } from '../jsforce';
import SOAP from '../soap';
import { isObject } from '../util/function';
import { ApiSchemas } from './metadata/schema';
export * from './metadata/schema';
/**
 *
 */

/**
 *
 */
function deallocateTypeWithMetadata(metadata) {
  const _ref = metadata,
        {
    $
  } = _ref,
        md = _objectWithoutProperties(_ref, ["$"]);

  return md;
}

function assignTypeWithMetadata(metadata, type) {
  const convert = md => _objectSpread({
    ['@xsi:type']: type
  }, md);

  return _Array$isArray(metadata) ? _mapInstanceProperty(metadata).call(metadata, convert) : convert(metadata);
}
/**
 * Class for Salesforce Metadata API
 */


export class MetadataApi {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   */

  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);

    _defineProperty(this, "pollInterval", 1000);

    _defineProperty(this, "pollTimeout", 10000);

    this._conn = conn;
  }
  /**
   * Call Metadata API SOAP endpoint
   *
   * @private
   */


  async _invoke(method, message, schema) {
    const soapEndpoint = new SOAP(this._conn, {
      xmlns: 'http://soap.sforce.com/2006/04/metadata',
      endpointUrl: `${this._conn.instanceUrl}/services/Soap/m/${this._conn.version}`
    });
    const res = await soapEndpoint.invoke(method, message, schema ? {
      result: schema
    } : undefined, ApiSchemas);
    return res.result;
  }
  /**
   * Add one or more new metadata components to the organization.
   */


  create(type, metadata) {
    const isArray = _Array$isArray(metadata);

    metadata = assignTypeWithMetadata(metadata, type);
    const schema = isArray ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
    return this._invoke('createMetadata', {
      metadata
    }, schema);
  }
  /**
   * Read specified metadata components in the organization.
   */


  async read(type, fullNames) {
    var _context;

    const ReadResultSchema = type in ApiSchemas ? {
      type: ApiSchemas.ReadResult.type,
      props: {
        records: [type]
      }
    } : ApiSchemas.ReadResult;
    const res = await this._invoke('readMetadata', {
      type,
      fullNames
    }, ReadResultSchema);
    return _Array$isArray(fullNames) ? _mapInstanceProperty(_context = res.records).call(_context, deallocateTypeWithMetadata) : deallocateTypeWithMetadata(res.records[0]);
  }
  /**
   * Update one or more metadata components in the organization.
   */


  update(type, metadata) {
    const isArray = _Array$isArray(metadata);

    metadata = assignTypeWithMetadata(metadata, type);
    const schema = isArray ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
    return this._invoke('updateMetadata', {
      metadata
    }, schema);
  }
  /**
   * Upsert one or more components in your organization's data.
   */


  upsert(type, metadata) {
    const isArray = _Array$isArray(metadata);

    metadata = assignTypeWithMetadata(metadata, type);
    const schema = isArray ? [ApiSchemas.UpsertResult] : ApiSchemas.UpsertResult;
    return this._invoke('upsertMetadata', {
      metadata
    }, schema);
  }
  /**
   * Deletes specified metadata components in the organization.
   */


  delete(type, fullNames) {
    const schema = _Array$isArray(fullNames) ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
    return this._invoke('deleteMetadata', {
      type,
      fullNames
    }, schema);
  }
  /**
   * Rename fullname of a metadata component in the organization
   */


  rename(type, oldFullName, newFullName) {
    return this._invoke('renameMetadata', {
      type,
      oldFullName,
      newFullName
    }, ApiSchemas.SaveResult);
  }
  /**
   * Retrieves the metadata which describes your organization, including Apex classes and triggers,
   * custom objects, custom fields on standard objects, tab sets that define an app,
   * and many other components.
   */


  describe(asOfVersion) {
    if (!asOfVersion) {
      asOfVersion = this._conn.version;
    }

    return this._invoke('describeMetadata', {
      asOfVersion
    }, ApiSchemas.DescribeMetadataResult);
  }
  /**
   * Retrieves property information about metadata components in your organization
   */


  list(queries, asOfVersion) {
    if (!asOfVersion) {
      asOfVersion = this._conn.version;
    }

    return this._invoke('listMetadata', {
      queries,
      asOfVersion
    }, [ApiSchemas.FileProperties]);
  }
  /**
   * Checks the status of asynchronous metadata calls
   */


  checkStatus(asyncProcessId) {
    const res = this._invoke('checkStatus', {
      asyncProcessId
    }, ApiSchemas.AsyncResult);

    return new AsyncResultLocator(this, res);
  }
  /**
   * Retrieves XML file representations of components in an organization
   */


  retrieve(request) {
    const res = this._invoke('retrieve', {
      request
    }, ApiSchemas.RetrieveResult);

    return new RetrieveResultLocator(this, res);
  }
  /**
   * Checks the status of declarative metadata call retrieve() and returns the zip file contents
   */


  checkRetrieveStatus(asyncProcessId) {
    return this._invoke('checkRetrieveStatus', {
      asyncProcessId
    }, ApiSchemas.RetrieveResult);
  }
  /**
   * Deploy components into an organization using zipped file representations
   */


  deploy(zipInput, options = {}) {
    const res = (async () => {
      const zipContentB64 = await new _Promise((resolve, reject) => {
        if (isObject(zipInput) && 'pipe' in zipInput && typeof zipInput.pipe === 'function') {
          const bufs = [];
          zipInput.on('data', d => bufs.push(d));
          zipInput.on('error', reject);
          zipInput.on('end', () => {
            resolve(_concatInstanceProperty(Buffer).call(Buffer, bufs).toString('base64'));
          }); // zipInput.resume();
        } else if (zipInput instanceof Buffer) {
          resolve(zipInput.toString('base64'));
        } else if (zipInput instanceof String || typeof zipInput === 'string') {
          resolve(zipInput);
        } else {
          throw 'Unexpected zipInput type';
        }
      });
      return this._invoke('deploy', {
        ZipFile: zipContentB64,
        DeployOptions: options
      }, ApiSchemas.DeployResult);
    })();

    return new DeployResultLocator(this, res);
  }
  /**
   * Checks the status of declarative metadata call deploy()
   */


  checkDeployStatus(asyncProcessId, includeDetails = false) {
    return this._invoke('checkDeployStatus', {
      asyncProcessId,
      includeDetails
    }, ApiSchemas.DeployResult);
  }

}
/*--------------------------------------------*/

/**
 * The locator class for Metadata API asynchronous call result
 */

export class AsyncResultLocator extends EventEmitter {
  /**
   *
   */
  constructor(meta, promise) {
    super();

    _defineProperty(this, "_meta", void 0);

    _defineProperty(this, "_promise", void 0);

    _defineProperty(this, "_id", void 0);

    this._meta = meta;
    this._promise = promise;
  }
  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * @method Metadata~AsyncResultLocator#then
   */


  then(onResolve, onReject) {
    return this._promise.then(onResolve, onReject);
  }
  /**
   * Check the status of async request
   */


  async check() {
    const result = await this._promise;
    this._id = result.id;
    return await this._meta.checkStatus(result.id);
  }
  /**
   * Polling until async call status becomes complete or error
   */


  poll(interval, timeout) {
    const startTime = new Date().getTime();

    const poll = async () => {
      try {
        const now = new Date().getTime();

        if (startTime + timeout < now) {
          let errMsg = 'Polling time out.';

          if (this._id) {
            errMsg += ' Process Id = ' + this._id;
          }

          this.emit('error', new Error(errMsg));
          return;
        }

        const result = await this.check();

        if (result.done) {
          this.emit('complete', result);
        } else {
          this.emit('progress', result);

          _setTimeout(poll, interval);
        }
      } catch (err) {
        this.emit('error', err);
      }
    };

    _setTimeout(poll, interval);
  }
  /**
   * Check and wait until the async requests become in completed status
   */


  complete() {
    return new _Promise((resolve, reject) => {
      this.on('complete', resolve);
      this.on('error', reject);
      this.poll(this._meta.pollInterval, this._meta.pollTimeout);
    });
  }

}
/*--------------------------------------------*/

/**
 * The locator class to track retreive() Metadata API call result
 */

export class RetrieveResultLocator extends AsyncResultLocator {
  /**
   * Check and wait until the async request becomes in completed status,
   * and retrieve the result data.
   */
  async complete() {
    const result = await super.complete();
    return this._meta.checkRetrieveStatus(result.id);
  }
  /**
   * Change the retrieved result to Node.js readable stream
   */


  stream() {
    const resultStream = new Readable();
    let reading = false;

    resultStream._read = async () => {
      if (reading) {
        return;
      }

      reading = true;

      try {
        const result = await this.complete();
        resultStream.push(Buffer.from(result.zipFile, 'base64'));
        resultStream.push(null);
      } catch (e) {
        resultStream.emit('error', e);
      }
    };

    return resultStream;
  }

}
/*--------------------------------------------*/

/**
 * The locator class to track deploy() Metadata API call result
 *
 * @protected
 * @class Metadata~DeployResultLocator
 * @extends Metadata~AsyncResultLocator
 * @param {Metadata} meta - Metadata API object
 * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call
 */

export class DeployResultLocator extends AsyncResultLocator {
  /**
   * Check and wait until the async request becomes in completed status,
   * and retrieve the result data.
   */
  async complete(includeDetails) {
    const result = await super.complete();
    return this._meta.checkDeployStatus(result.id, includeDetails);
  }

}
/*--------------------------------------------*/

/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */

registerModule('metadata', conn => new MetadataApi(conn));
export default MetadataApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvbWV0YWRhdGEudHMiXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwiUmVhZGFibGUiLCJyZWdpc3Rlck1vZHVsZSIsIlNPQVAiLCJpc09iamVjdCIsIkFwaVNjaGVtYXMiLCJkZWFsbG9jYXRlVHlwZVdpdGhNZXRhZGF0YSIsIm1ldGFkYXRhIiwiJCIsIm1kIiwiYXNzaWduVHlwZVdpdGhNZXRhZGF0YSIsInR5cGUiLCJjb252ZXJ0IiwiTWV0YWRhdGFBcGkiLCJjb25zdHJ1Y3RvciIsImNvbm4iLCJfY29ubiIsIl9pbnZva2UiLCJtZXRob2QiLCJtZXNzYWdlIiwic2NoZW1hIiwic29hcEVuZHBvaW50IiwieG1sbnMiLCJlbmRwb2ludFVybCIsImluc3RhbmNlVXJsIiwidmVyc2lvbiIsInJlcyIsImludm9rZSIsInJlc3VsdCIsInVuZGVmaW5lZCIsImNyZWF0ZSIsImlzQXJyYXkiLCJTYXZlUmVzdWx0IiwicmVhZCIsImZ1bGxOYW1lcyIsIlJlYWRSZXN1bHRTY2hlbWEiLCJSZWFkUmVzdWx0IiwicHJvcHMiLCJyZWNvcmRzIiwidXBkYXRlIiwidXBzZXJ0IiwiVXBzZXJ0UmVzdWx0IiwiZGVsZXRlIiwicmVuYW1lIiwib2xkRnVsbE5hbWUiLCJuZXdGdWxsTmFtZSIsImRlc2NyaWJlIiwiYXNPZlZlcnNpb24iLCJEZXNjcmliZU1ldGFkYXRhUmVzdWx0IiwibGlzdCIsInF1ZXJpZXMiLCJGaWxlUHJvcGVydGllcyIsImNoZWNrU3RhdHVzIiwiYXN5bmNQcm9jZXNzSWQiLCJBc3luY1Jlc3VsdCIsIkFzeW5jUmVzdWx0TG9jYXRvciIsInJldHJpZXZlIiwicmVxdWVzdCIsIlJldHJpZXZlUmVzdWx0IiwiUmV0cmlldmVSZXN1bHRMb2NhdG9yIiwiY2hlY2tSZXRyaWV2ZVN0YXR1cyIsImRlcGxveSIsInppcElucHV0Iiwib3B0aW9ucyIsInppcENvbnRlbnRCNjQiLCJyZXNvbHZlIiwicmVqZWN0IiwicGlwZSIsImJ1ZnMiLCJvbiIsImQiLCJwdXNoIiwiQnVmZmVyIiwidG9TdHJpbmciLCJTdHJpbmciLCJaaXBGaWxlIiwiRGVwbG95T3B0aW9ucyIsIkRlcGxveVJlc3VsdCIsIkRlcGxveVJlc3VsdExvY2F0b3IiLCJjaGVja0RlcGxveVN0YXR1cyIsImluY2x1ZGVEZXRhaWxzIiwibWV0YSIsInByb21pc2UiLCJfbWV0YSIsIl9wcm9taXNlIiwidGhlbiIsIm9uUmVzb2x2ZSIsIm9uUmVqZWN0IiwiY2hlY2siLCJfaWQiLCJpZCIsInBvbGwiLCJpbnRlcnZhbCIsInRpbWVvdXQiLCJzdGFydFRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsIm5vdyIsImVyck1zZyIsImVtaXQiLCJFcnJvciIsImRvbmUiLCJlcnIiLCJjb21wbGV0ZSIsInBvbGxJbnRlcnZhbCIsInBvbGxUaW1lb3V0Iiwic3RyZWFtIiwicmVzdWx0U3RyZWFtIiwicmVhZGluZyIsIl9yZWFkIiwiZnJvbSIsInppcEZpbGUiLCJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLFlBQVQsUUFBNkIsUUFBN0I7QUFDQSxTQUFTQyxRQUFULFFBQXlCLFFBQXpCO0FBQ0EsU0FBU0MsY0FBVCxRQUErQixZQUEvQjtBQUVBLE9BQU9DLElBQVAsTUFBaUIsU0FBakI7QUFDQSxTQUFTQyxRQUFULFFBQXlCLGtCQUF6QjtBQUVBLFNBQ0VDLFVBREYsUUFlTyxtQkFmUDtBQWdCQSxjQUFjLG1CQUFkO0FBRUE7QUFDQTtBQUNBOztBQWlDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQywwQkFBVCxDQUF3REMsUUFBeEQsRUFBd0U7QUFDdEUsZUFBcUJBLFFBQXJCO0FBQUEsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLEdBQU47QUFBQSxRQUFjQyxFQUFkOztBQUNBLFNBQU9BLEVBQVA7QUFDRDs7QUFFRCxTQUFTQyxzQkFBVCxDQUFnQ0gsUUFBaEMsRUFBaUVJLElBQWpFLEVBQStFO0FBQzdFLFFBQU1DLE9BQU8sR0FBSUgs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LEtBQUsyRSxRQUFMLEVBQXJCO0FBQ0FJLFFBQUFBLFlBQVksQ0FBQ3BDLElBQWIsQ0FBa0JDLE1BQU0sQ0FBQ3NDLElBQVAsQ0FBWWxGLE1BQU0sQ0FBQ21GLE9BQW5CLEVBQTRCLFFBQTVCLENBQWxCO0FBQ0FKLFFBQUFBLFlBQVksQ0FBQ3BDLElBQWIsQ0FBa0IsSUFBbEI7QUFDRCxPQUpELENBSUUsT0FBT3lDLENBQVAsRUFBVTtBQUNWTCxRQUFBQSxZQUFZLENBQUNSLElBQWIsQ0FBa0IsT0FBbEIsRUFBMkJhLENBQTNCO0FBQ0Q7QUFDRixLQVpEOztBQWFBLFdBQU9MLFlBQVA7QUFDRDs7QUE5QkQ7QUFpQ0Y7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE9BQU8sTUFBTTdCLG1CQUFOLFNBQW9EdkIsa0JBQXBELENBR0w7QUFDQTtBQUNGO0FBQ0E7QUFDQTtBQUNFLFFBQU1nRCxRQUFOLENBQWV2QixjQUFmLEVBQXlDO0FBQ3ZDLFVBQU1wRCxNQUFNLEdBQUcsTUFBTSxNQUFNMkUsUUFBTixFQUFyQjtBQUNBLFdBQU8sS0FBS3BCLEtBQUwsQ0FBV0osaUJBQVgsQ0FBNkJuRCxNQUFNLENBQUM4RCxFQUFwQyxFQUF3Q1YsY0FBeEMsQ0FBUDtBQUNEOztBQVJEO0FBV0Y7O0FBQ0E7QUFDQTtBQUNBOztBQUNBOUUsY0FBYyxDQUFDLFVBQUQsRUFBY2EsSUFBRCxJQUFVLElBQUlGLFdBQUosQ0FBZ0JFLElBQWhCLENBQXZCLENBQWQ7QUFFQSxlQUFlRixXQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBNYW5hZ2VzIFNhbGVzZm9yY2UgTWV0YWRhdGEgQVBJXG4gKiBAYXV0aG9yIFNoaW5pY2hpIFRvbWl0YSA8c2hpbmljaGkudG9taXRhQGdtYWlsLmNvbT5cbiAqL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IHJlZ2lzdGVyTW9kdWxlIH0gZnJvbSAnLi4vanNmb3JjZSc7XG5pbXBvcnQgQ29ubmVjdGlvbiBmcm9tICcuLi9jb25uZWN0aW9uJztcbmltcG9ydCBTT0FQIGZyb20gJy4uL3NvYXAnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi91dGlsL2Z1bmN0aW9uJztcbmltcG9ydCB7IFNjaGVtYSwgU29hcFNjaGVtYURlZiwgU29hcFNjaGVtYSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIEFwaVNjaGVtYXMsXG4gIE1ldGFkYXRhLFxuICBSZWFkUmVzdWx0LFxuICBTYXZlUmVzdWx0LFxuICBVcHNlcnRSZXN1bHQsXG4gIExpc3RNZXRhZGF0YVF1ZXJ5LFxuICBGaWxlUHJvcGVydGllcyxcbiAgRGVzY3JpYmVNZXRhZGF0YVJlc3VsdCxcbiAgUmV0cmlldmVSZXF1ZXN0LFxuICBEZXBsb3lPcHRpb25zLFxuICBSZXRyaWV2ZVJlc3VsdCxcbiAgRGVwbG95UmVzdWx0LFxuICBBc3luY1Jlc3VsdCxcbiAgQXBpU2NoZW1hVHlwZXMsXG59IGZyb20gJy4vbWV0YWRhdGEvc2NoZW1hJztcbmV4cG9ydCAqIGZyb20gJy4vbWV0YWRhdGEvc2NoZW1hJztcblxuLyoqXG4gKlxuICovXG50eXBlIE1ldGFkYXRhVHlwZV88XG4gIEsgZXh0ZW5kcyBrZXlvZiBBcGlTY2hlbWFUeXBlcyA9IGtleW9mIEFwaVNjaGVtYVR5cGVzXG4+ID0gSyBleHRlbmRzIGtleW9mIEFwaVNjaGVtYVR5cGVzXG4gID8gQXBpU2NoZW1hVHlwZXNbS10gZXh0ZW5kcyBNZXRhZGF0YVxuICAgID8gS1xuICAgIDogbmV2ZXJcbiAgOiBuZXZlcjtcblxuZXhwb3J0IHR5cGUgTWV0YWRhdGFUeXBlID0gTWV0YWRhdGFUeXBlXztcblxuZXhwb3J0IHR5cGUgTWV0YWRhdGFEZWZpbml0aW9uPFxuICBUIGV4dGVuZHMgc3RyaW5nLFxuICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YVxuPiA9IE1ldGFkYXRhIGV4dGVuZHMgTVxuICA/IFQgZXh0ZW5kcyBrZXlvZiBBcGlTY2hlbWFUeXBlcyAmIE1ldGFkYXRhVHlwZVxuICAgID8gQXBpU2NoZW1hVHlwZXNbVF0gZXh0ZW5kcyBNZXRhZGF0YVxuICAgICAgPyBBcGlTY2hlbWFUeXBlc1tUXVxuICAgICAgOiBNZXRhZGF0YVxuICAgIDogTWV0YWRhdGFcbiAgOiBNO1xuXG50eXBlIERlZXBQYXJ0aWFsPFQ+ID0gVCBleHRlbmRzIGFueVtdXG4gID8gRGVlcFBhcnRpYWw8VFtudW1iZXJdPltdXG4gIDogVCBleHRlbmRzIG9iamVjdFxuICA/IHsgW0sgaW4ga2V5b2YgVF0/OiBEZWVwUGFydGlhbDxUW0tdPiB9XG4gIDogVDtcblxuZXhwb3J0IHR5cGUgSW5wdXRNZXRhZGF0YURlZmluaXRpb248XG4gIFQgZXh0ZW5kcyBzdHJpbmcsXG4gIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhXG4+ID0gRGVlcFBhcnRpYWw8TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+PjtcblxuLyoqXG4gKlxuICovXG5mdW5jdGlvbiBkZWFsbG9jYXRlVHlwZVdpdGhNZXRhZGF0YTxNIGV4dGVuZHMgTWV0YWRhdGE+KG1ldGFkYXRhOiBNKTogTSB7XG4gIGNvbnN0IHsgJCwgLi4ubWQgfSA9IG1ldGFkYXRhIGFzIGFueTtcbiAgcmV0dXJuIG1kO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25UeXBlV2l0aE1ldGFkYXRhKG1ldGFkYXRhOiBNZXRhZGF0YSB8IE1ldGFkYXRhW10sIHR5cGU6IHN0cmluZykge1xuICBjb25zdCBjb252ZXJ0ID0gKG1kOiBNZXRhZGF0YSkgPT4gKHsgWydAeHNpOnR5cGUnXTogdHlwZSwgLi4ubWQgfSk7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1ldGFkYXRhKSA/IG1ldGFkYXRhLm1hcChjb252ZXJ0KSA6IGNvbnZlcnQobWV0YWRhdGEpO1xufVxuXG4vKipcbiAqIENsYXNzIGZvciBTYWxlc2ZvcmNlIE1ldGFkYXRhIEFQSVxuICovXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFBcGk8UyBleHRlbmRzIFNjaGVtYT4ge1xuICBfY29ubjogQ29ubmVjdGlvbjxTPjtcblxuICAvKipcbiAgICogUG9sbGluZyBpbnRlcnZhbCBpbiBtaWxsaXNlY29uZHNcbiAgICovXG4gIHBvbGxJbnRlcnZhbDogbnVtYmVyID0gMTAwMDtcblxuICAvKipcbiAgICogUG9sbGluZyB0aW1lb3V0IGluIG1pbGxpc2Vjb25kc1xuICAgKi9cbiAgcG9sbFRpbWVvdXQ6IG51bWJlciA9IDEwMDAwO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29ubjogQ29ubmVjdGlvbjxTPikge1xuICAgIHRoaXMuX2Nvbm4gPSBjb25uO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgTWV0YWRhdGEgQVBJIFNPQVAgZW5kcG9pbnRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFzeW5jIF9pbnZva2UoXG4gICAgbWV0aG9kOiBzdHJpbmcsXG4gICAgbWVzc2FnZTogb2JqZWN0LFxuICAgIHNjaGVtYT86IFNvYXBTY2hlbWEgfCBTb2FwU2NoZW1hRGVmLFxuICApIHtcbiAgICBjb25zdCBzb2FwRW5kcG9pbnQgPSBuZXcgU09BUCh0aGlzLl9jb25uLCB7XG4gICAgICB4bWxuczogJ2h0dHA6Ly9zb2FwLnNmb3JjZS5jb20vMjAwNi8wNC9tZXRhZGF0YScsXG4gICAgICBlbmRwb2ludFVybDogYCR7dGhpcy5fY29ubi5pbnN0YW5jZVVybH0vc2VydmljZXMvU29hcC9tLyR7dGhpcy5fY29ubi52ZXJzaW9ufWAsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgc29hcEVuZHBvaW50Lmludm9rZShcbiAgICAgIG1ldGhvZCxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBzY2hlbWEgPyAoeyByZXN1bHQ6IHNjaGVtYSB9IGFzIFNvYXBTY2hlbWEpIDogdW5kZWZpbmVkLFxuICAgICAgQXBpU2NoZW1hcyxcbiAgICApO1xuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBvbmUgb3IgbW9yZSBuZXcgbWV0YWRhdGEgY29tcG9uZW50cyB0byB0aGUgb3JnYW5pemF0aW9uLlxuICAgKi9cbiAgY3JlYXRlPFxuICAgIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhLFxuICAgIFQgZXh0ZW5kcyBNZXRhZGF0YVR5cGUgPSBNZXRhZGF0YVR5cGUsXG4gICAgTUQgZXh0ZW5kcyBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPiA9IElucHV0TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+XG4gID4odHlwZTogVCwgbWV0YWRhdGE6IE1EW10pOiBQcm9taXNlPFNhdmVSZXN1bHRbXT47XG4gIGNyZWF0ZTxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgTWV0YWRhdGFUeXBlID0gTWV0YWRhdGFUeXBlLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIG1ldGFkYXRhOiBNRCk6IFByb21pc2U8U2F2ZVJlc3VsdD47XG4gIGNyZWF0ZTxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgTWV0YWRhdGFUeXBlID0gTWV0YWRhdGFUeXBlLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIG1ldGFkYXRhOiBNRCB8IE1EW10pOiBQcm9taXNlPFNhdmVSZXN1bHQgfCBTYXZlUmVzdWx0W10+O1xuICBjcmVhdGUodHlwZTogc3RyaW5nLCBtZXRhZGF0YTogTWV0YWRhdGEgfCBNZXRhZGF0YVtdKSB7XG4gICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkobWV0YWRhdGEpO1xuICAgIG1ldGFkYXRhID0gYXNzaWduVHlwZVdpdGhNZXRhZGF0YShtZXRhZGF0YSwgdHlwZSk7XG4gICAgY29uc3Qgc2NoZW1hID0gaXNBcnJheSA/IFtBcGlTY2hlbWFzLlNhdmVSZXN1bHRdIDogQXBpU2NoZW1hcy5TYXZlUmVzdWx0O1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoJ2NyZWF0ZU1ldGFkYXRhJywgeyBtZXRhZGF0YSB9LCBzY2hlbWEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgc3BlY2lmaWVkIG1ldGFkYXRhIGNvbXBvbmVudHMgaW4gdGhlIG9yZ2FuaXphdGlvbi5cbiAgICovXG4gIHJlYWQ8XG4gICAgTSBleHRlbmRzIE1ldGFkYXRhID0gTWV0YWRhdGEsXG4gICAgVCBleHRlbmRzIE1ldGFkYXRhVHlwZSA9IE1ldGFkYXRhVHlwZSxcbiAgICBNRCBleHRlbmRzIE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPiA9IE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIGZ1bGxOYW1lczogc3RyaW5nW10pOiBQcm9taXNlPE1EW10+O1xuICByZWFkPFxuICAgIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhLFxuICAgIFQgZXh0ZW5kcyBNZXRhZGF0YVR5cGUgPSBNZXRhZGF0YVR5cGUsXG4gICAgTUQgZXh0ZW5kcyBNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBNZXRhZGF0YURlZmluaXRpb248VCwgTT5cbiAgPih0eXBlOiBULCBmdWxsTmFtZXM6IHN0cmluZyk6IFByb21pc2U8TUQ+O1xuICByZWFkPFxuICAgIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhLFxuICAgIFQgZXh0ZW5kcyBNZXRhZGF0YVR5cGUgPSBNZXRhZGF0YVR5cGUsXG4gICAgTUQgZXh0ZW5kcyBNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBNZXRhZGF0YURlZmluaXRpb248VCwgTT5cbiAgPih0eXBlOiBULCBmdWxsTmFtZXM6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxNRCB8IE1EW10+O1xuICBhc3luYyByZWFkKHR5cGU6IHN0cmluZywgZnVsbE5hbWVzOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIGNvbnN0IFJlYWRSZXN1bHRTY2hlbWEgPVxuICAgICAgdHlwZSBpbiBBcGlTY2hlbWFzXG4gICAgICAgID8gKHtcbiAgICAgICAgICAgIHR5cGU6IEFwaVNjaGVtYXMuUmVhZFJlc3VsdC50eXBlLFxuICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgcmVjb3JkczogW3R5cGVdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9IGFzIGNvbnN0KVxuICAgICAgICA6IEFwaVNjaGVtYXMuUmVhZFJlc3VsdDtcbiAgICBjb25zdCByZXM6IFJlYWRSZXN1bHQgPSBhd2FpdCB0aGlzLl9pbnZva2UoXG4gICAgICAncmVhZE1ldGFkYXRhJyxcbiAgICAgIHsgdHlwZSwgZnVsbE5hbWVzIH0sXG4gICAgICBSZWFkUmVzdWx0U2NoZW1hLFxuICAgICk7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZnVsbE5hbWVzKVxuICAgICAgPyByZXMucmVjb3Jkcy5tYXAoZGVhbGxvY2F0ZVR5cGVXaXRoTWV0YWRhdGEpXG4gICAgICA6IGRlYWxsb2NhdGVUeXBlV2l0aE1ldGFkYXRhKHJlcy5yZWNvcmRzWzBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgb25lIG9yIG1vcmUgbWV0YWRhdGEgY29tcG9uZW50cyBpbiB0aGUgb3JnYW5pemF0aW9uLlxuICAgKi9cbiAgdXBkYXRlPFxuICAgIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhLFxuICAgIFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmcsXG4gICAgTUQgZXh0ZW5kcyBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPiA9IElucHV0TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+XG4gID4odHlwZTogVCwgbWV0YWRhdGE6IFBhcnRpYWw8TUQ+W10pOiBQcm9taXNlPFNhdmVSZXN1bHRbXT47XG4gIHVwZGF0ZTxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIG1ldGFkYXRhOiBQYXJ0aWFsPE1EPik6IFByb21pc2U8U2F2ZVJlc3VsdD47XG4gIHVwZGF0ZTxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KFxuICAgIHR5cGU6IFQsXG4gICAgbWV0YWRhdGE6IFBhcnRpYWw8TUQ+IHwgUGFydGlhbDxNRD5bXSxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0IHwgU2F2ZVJlc3VsdFtdPjtcbiAgdXBkYXRlKHR5cGU6IHN0cmluZywgbWV0YWRhdGE6IE1ldGFkYXRhIHwgTWV0YWRhdGFbXSkge1xuICAgIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KG1ldGFkYXRhKTtcbiAgICBtZXRhZGF0YSA9IGFzc2lnblR5cGVXaXRoTWV0YWRhdGEobWV0YWRhdGEsIHR5cGUpO1xuICAgIGNvbnN0IHNjaGVtYSA9IGlzQXJyYXkgPyBbQXBpU2NoZW1hcy5TYXZlUmVzdWx0XSA6IEFwaVNjaGVtYXMuU2F2ZVJlc3VsdDtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKCd1cGRhdGVNZXRhZGF0YScsIHsgbWV0YWRhdGEgfSwgc2NoZW1hKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcHNlcnQgb25lIG9yIG1vcmUgY29tcG9uZW50cyBpbiB5b3VyIG9yZ2FuaXphdGlvbidzIGRhdGEuXG4gICAqL1xuICB1cHNlcnQ8XG4gICAgTSBleHRlbmRzIE1ldGFkYXRhID0gTWV0YWRhdGEsXG4gICAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgICBNRCBleHRlbmRzIElucHV0TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+ID0gSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT5cbiAgPih0eXBlOiBULCBtZXRhZGF0YTogTURbXSk6IFByb21pc2U8VXBzZXJ0UmVzdWx0W10+O1xuICB1cHNlcnQ8XG4gICAgTSBleHRlbmRzIE1ldGFkYXRhID0gTWV0YWRhdGEsXG4gICAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgICBNRCBleHRlbmRzIElucHV0TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+ID0gSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT5cbiAgPih0eXBlOiBULCBtZXRhZGF0YTogTUQpOiBQcm9taXNlPFVwc2VydFJlc3VsdD47XG4gIHVwc2VydDxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIG1ldGFkYXRhOiBNRCB8IE1EW10pOiBQcm9taXNlPFVwc2VydFJlc3VsdCB8IFVwc2VydFJlc3VsdFtdPjtcbiAgdXBzZXJ0KHR5cGU6IHN0cmluZywgbWV0YWRhdGE6IE1ldGFkYXRhIHwgTWV0YWRhdGFbXSkge1xuICAgIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KG1ldGFkYXRhKTtcbiAgICBtZXRhZGF0YSA9IGFzc2lnblR5cGVXaXRoTWV0YWRhdGEobWV0YWRhdGEsIHR5cGUpO1xuICAgIGNvbnN0IHNjaGVtYSA9IGlzQXJyYXlcbiAgICAgID8gW0FwaVNjaGVtYXMuVXBzZXJ0UmVzdWx0XVxuICAgICAgOiBBcGlTY2hlbWFzLlVwc2VydFJlc3VsdDtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKCd1cHNlcnRNZXRhZGF0YScsIHsgbWV0YWRhdGEgfSwgc2NoZW1hKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHNwZWNpZmllZCBtZXRhZGF0YSBjb21wb25lbnRzIGluIHRoZSBvcmdhbml6YXRpb24uXG4gICAqL1xuICBkZWxldGUodHlwZTogc3RyaW5nLCBmdWxsTmFtZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+O1xuICBkZWxldGUodHlwZTogc3RyaW5nLCBmdWxsTmFtZXM6IHN0cmluZyk6IFByb21pc2U8U2F2ZVJlc3VsdD47XG4gIGRlbGV0ZShcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgZnVsbE5hbWVzOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0IHwgU2F2ZVJlc3VsdFtdPjtcbiAgZGVsZXRlKHR5cGU6IHN0cmluZywgZnVsbE5hbWVzOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIGNvbnN0IHNjaGVtYSA9IEFycmF5LmlzQXJyYXkoZnVsbE5hbWVzKVxuICAgICAgPyBbQXBpU2NoZW1hcy5TYXZlUmVzdWx0XVxuICAgICAgOiBBcGlTY2hlbWFzLlNhdmVSZXN1bHQ7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZSgnZGVsZXRlTWV0YWRhdGEnLCB7IHR5cGUsIGZ1bGxOYW1lcyB9LCBzY2hlbWEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmFtZSBmdWxsbmFtZSBvZiBhIG1ldGFkYXRhIGNvbXBvbmVudCBpbiB0aGUgb3JnYW5pemF0aW9uXG4gICAqL1xuICByZW5hbWUoXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIG9sZEZ1bGxOYW1lOiBzdHJpbmcsXG4gICAgbmV3RnVsbE5hbWU6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcbiAgICAgICdyZW5hbWVNZXRhZGF0YScsXG4gICAgICB7IHR5cGUsIG9sZEZ1bGxOYW1lLCBuZXdGdWxsTmFtZSB9LFxuICAgICAgQXBpU2NoZW1hcy5TYXZlUmVzdWx0LFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBtZXRhZGF0YSB3aGljaCBkZXNjcmliZXMgeW91ciBvcmdhbml6YXRpb24sIGluY2x1ZGluZyBBcGV4IGNsYXNzZXMgYW5kIHRyaWdnZXJzLFxuICAgKiBjdXN0b20gb2JqZWN0cywgY3VzdG9tIGZpZWxkcyBvbiBzdGFuZGFyZCBvYmplY3RzLCB0YWIgc2V0cyB0aGF0IGRlZmluZSBhbiBhcHAsXG4gICAqIGFuZCBtYW55IG90aGVyIGNvbXBvbmVudHMuXG4gICAqL1xuICBkZXNjcmliZShhc09mVmVyc2lvbj86IHN0cmluZyk6IFByb21pc2U8RGVzY3JpYmVNZXRhZGF0YVJlc3VsdD4ge1xuICAgIGlmICghYXNPZlZlcnNpb24pIHtcbiAgICAgIGFzT2ZWZXJzaW9uID0gdGhpcy5fY29ubi52ZXJzaW9uO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faW52b2tlKFxuICAgICAgJ2Rlc2NyaWJlTWV0YWRhdGEnLFxuICAgICAgeyBhc09mVmVyc2lvbiB9LFxuICAgICAgQXBpU2NoZW1hcy5EZXNjcmliZU1ldGFkYXRhUmVzdWx0LFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIHByb3BlcnR5IGluZm9ybWF0aW9uIGFib3V0IG1ldGFkYXRhIGNvbXBvbmVudHMgaW4geW91ciBvcmdhbml6YXRpb25cbiAgICovXG4gIGxpc3QoXG4gICAgcXVlcmllczogTGlzdE1ldGFkYXRhUXVlcnkgfCBMaXN0TWV0YWRhdGFRdWVyeVtdLFxuICAgIGFzT2ZWZXJzaW9uPzogc3RyaW5nLFxuICApOiBQcm9taXNlPEZpbGVQcm9wZXJ0aWVzW10+IHtcbiAgICBpZiAoIWFzT2ZWZXJzaW9uKSB7XG4gICAgICBhc09mVmVyc2lvbiA9IHRoaXMuX2Nvbm4udmVyc2lvbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZSgnbGlzdE1ldGFkYXRhJywgeyBxdWVyaWVzLCBhc09mVmVyc2lvbiB9LCBbXG4gICAgICBBcGlTY2hlbWFzLkZpbGVQcm9wZXJ0aWVzLFxuICAgIF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgc3RhdHVzIG9mIGFzeW5jaHJvbm91cyBtZXRhZGF0YSBjYWxsc1xuICAgKi9cbiAgY2hlY2tTdGF0dXMoYXN5bmNQcm9jZXNzSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlcyA9IHRoaXMuX2ludm9rZShcbiAgICAgICdjaGVja1N0YXR1cycsXG4gICAgICB7IGFzeW5jUHJvY2Vzc0lkIH0sXG4gICAgICBBcGlTY2hlbWFzLkFzeW5jUmVzdWx0LFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBBc3luY1Jlc3VsdExvY2F0b3IodGhpcywgcmVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgWE1MIGZpbGUgcmVwcmVzZW50YXRpb25zIG9mIGNvbXBvbmVudHMgaW4gYW4gb3JnYW5pemF0aW9uXG4gICAqL1xuICByZXRyaWV2ZShyZXF1ZXN0OiBQYXJ0aWFsPFJldHJpZXZlUmVxdWVzdD4pIHtcbiAgICBjb25zdCByZXMgPSB0aGlzLl9pbnZva2UoXG4gICAgICAncmV0cmlldmUnLFxuICAgICAgeyByZXF1ZXN0IH0sXG4gICAgICBBcGlTY2hlbWFzLlJldHJpZXZlUmVzdWx0LFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBSZXRyaWV2ZVJlc3VsdExvY2F0b3IodGhpcywgcmVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIHN0YXR1cyBvZiBkZWNsYXJhdGl2ZSBtZXRhZGF0YSBjYWxsIHJldHJpZXZlKCkgYW5kIHJldHVybnMgdGhlIHppcCBmaWxlIGNvbnRlbnRzXG4gICAqL1xuICBjaGVja1JldHJpZXZlU3RhdHVzKGFzeW5jUHJvY2Vzc0lkOiBzdHJpbmcpOiBQcm9taXNlPFJldHJpZXZlUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcbiAgICAgICdjaGVja1JldHJpZXZlU3RhdHVzJyxcbiAgICAgIHsgYXN5bmNQcm9jZXNzSWQgfSxcbiAgICAgIEFwaVNjaGVtYXMuUmV0cmlldmVSZXN1bHQsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXBsb3kgY29tcG9uZW50cyBpbnRvIGFuIG9yZ2FuaXphdGlvbiB1c2luZyB6aXBwZWQgZmlsZSByZXByZXNlbnRhdGlvbnNcbiAgICovXG4gIGRlcGxveShcbiAgICB6aXBJbnB1dDogUmVhZGFibGUgfCBCdWZmZXIgfCBzdHJpbmcsXG4gICAgb3B0aW9uczogUGFydGlhbDxEZXBsb3lPcHRpb25zPiA9IHt9LFxuICApIHtcbiAgICBjb25zdCByZXMgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgemlwQ29udGVudEI2NCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzT2JqZWN0KHppcElucHV0KSAmJlxuICAgICAgICAgICdwaXBlJyBpbiB6aXBJbnB1dCAmJlxuICAgICAgICAgIHR5cGVvZiB6aXBJbnB1dC5waXBlID09PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGJ1ZnM6IEJ1ZmZlcltdID0gW107XG4gICAgICAgICAgemlwSW5wdXQub24oJ2RhdGEnLCAoZCkgPT4gYnVmcy5wdXNoKGQpKTtcbiAgICAgICAgICB6aXBJbnB1dC5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgICAgIHppcElucHV0Lm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKEJ1ZmZlci5jb25jYXQoYnVmcykudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyB6aXBJbnB1dC5yZXN1bWUoKTtcbiAgICAgICAgfSBlbHNlIGlmICh6aXBJbnB1dCBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgIHJlc29sdmUoemlwSW5wdXQudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgfSBlbHNlIGlmICh6aXBJbnB1dCBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2YgemlwSW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmVzb2x2ZSh6aXBJbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgJ1VuZXhwZWN0ZWQgemlwSW5wdXQgdHlwZSc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGhpcy5faW52b2tlKFxuICAgICAgICAnZGVwbG95JyxcbiAgICAgICAge1xuICAgICAgICAgIFppcEZpbGU6IHppcENvbnRlbnRCNjQsXG4gICAgICAgICAgRGVwbG95T3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgfSxcbiAgICAgICAgQXBpU2NoZW1hcy5EZXBsb3lSZXN1bHQsXG4gICAgICApO1xuICAgIH0pKCk7XG5cbiAgICByZXR1cm4gbmV3IERlcGxveVJlc3VsdExvY2F0b3IodGhpcywgcmVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIHN0YXR1cyBvZiBkZWNsYXJhdGl2ZSBtZXRhZGF0YSBjYWxsIGRlcGxveSgpXG4gICAqL1xuICBjaGVja0RlcGxveVN0YXR1cyhcbiAgICBhc3luY1Byb2Nlc3NJZDogc3RyaW5nLFxuICAgIGluY2x1ZGVEZXRhaWxzOiBib29sZWFuID0gZmFsc2UsXG4gICk6IFByb21pc2U8RGVwbG95UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcbiAgICAgICdjaGVja0RlcGxveVN0YXR1cycsXG4gICAgICB7XG4gICAgICAgIGFzeW5jUHJvY2Vzc0lkLFxuICAgICAgICBpbmNsdWRlRGV0YWlscyxcbiAgICAgIH0sXG4gICAgICBBcGlTY2hlbWFzLkRlcGxveVJlc3VsdCxcbiAgICApO1xuICB9XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4vKipcbiAqIFRoZSBsb2NhdG9yIGNsYXNzIGZvciBNZXRhZGF0YSBBUEkgYXN5bmNocm9ub3VzIGNhbGwgcmVzdWx0XG4gKi9cbmV4cG9ydCBjbGFzcyBBc3luY1Jlc3VsdExvY2F0b3I8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIFIgZXh0ZW5kcyB7fSA9IEFzeW5jUmVzdWx0XG4+IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgX21ldGE6IE1ldGFkYXRhQXBpPFM+O1xuICBfcHJvbWlzZTogUHJvbWlzZTxBc3luY1Jlc3VsdD47XG4gIF9pZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IobWV0YTogTWV0YWRhdGFBcGk8Uz4sIHByb21pc2U6IFByb21pc2U8QXN5bmNSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9tZXRhID0gbWV0YTtcbiAgICB0aGlzLl9wcm9taXNlID0gcHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9taXNlL0ErIGludGVyZmFjZVxuICAgKiBodHRwOi8vcHJvbWlzZXMtYXBsdXMuZ2l0aHViLmlvL3Byb21pc2VzLXNwZWMvXG4gICAqXG4gICAqIEBtZXRob2QgTWV0YWRhdGF+QXN5bmNSZXN1bHRMb2NhdG9yI3RoZW5cbiAgICovXG4gIHRoZW48VSwgVj4oXG4gICAgb25SZXNvbHZlPzogKChyZXN1bHQ6IEFzeW5jUmVzdWx0KSA9PiBVIHwgUHJvbWlzZTxVPikgfCBudWxsIHwgdW5kZWZpbmVkLFxuICAgIG9uUmVqZWN0PzogKChlcnI6IEVycm9yKSA9PiBWIHwgUHJvbWlzZTxWPikgfCBudWxsIHwgdW5kZWZpbmVkLFxuICApOiBQcm9taXNlPFUgfCBWPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb21pc2UudGhlbihvblJlc29sdmUsIG9uUmVqZWN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgc3RhdHVzIG9mIGFzeW5jIHJlcXVlc3RcbiAgICovXG4gIGFzeW5jIGNoZWNrKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3Byb21pc2U7XG4gICAgdGhpcy5faWQgPSByZXN1bHQuaWQ7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX21ldGEuY2hlY2tTdGF0dXMocmVzdWx0LmlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb2xsaW5nIHVudGlsIGFzeW5jIGNhbGwgc3RhdHVzIGJlY29tZXMgY29tcGxldGUgb3IgZXJyb3JcbiAgICovXG4gIHBvbGwoaW50ZXJ2YWw6IG51bWJlciwgdGltZW91dDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgY29uc3QgcG9sbCA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBpZiAoc3RhcnRUaW1lICsgdGltZW91dCA8IG5vdykge1xuICAgICAgICAgIGxldCBlcnJNc2cgPSAnUG9sbGluZyB0aW1lIG91dC4nO1xuICAgICAgICAgIGlmICh0aGlzLl9pZCkge1xuICAgICAgICAgICAgZXJyTXNnICs9ICcgUHJvY2VzcyBJZCA9ICcgKyB0aGlzLl9pZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcihlcnJNc2cpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jaGVjaygpO1xuICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ2NvbXBsZXRlJywgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ3Byb2dyZXNzJywgcmVzdWx0KTtcbiAgICAgICAgICBzZXRUaW1lb3V0KHBvbGwsIGludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgfVxuICAgIH07XG4gICAgc2V0VGltZW91dChwb2xsLCBpbnRlcnZhbCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgYW5kIHdhaXQgdW50aWwgdGhlIGFzeW5jIHJlcXVlc3RzIGJlY29tZSBpbiBjb21wbGV0ZWQgc3RhdHVzXG4gICAqL1xuICBjb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8Uj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5vbignY29tcGxldGUnLCByZXNvbHZlKTtcbiAgICAgIHRoaXMub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgIHRoaXMucG9sbCh0aGlzLl9tZXRhLnBvbGxJbnRlcnZhbCwgdGhpcy5fbWV0YS5wb2xsVGltZW91dCk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFRoZSBsb2NhdG9yIGNsYXNzIHRvIHRyYWNrIHJldHJlaXZlKCkgTWV0YWRhdGEgQVBJIGNhbGwgcmVzdWx0XG4gKi9cbmV4cG9ydCBjbGFzcyBSZXRyaWV2ZVJlc3VsdExvY2F0b3I8UyBleHRlbmRzIFNjaGVtYT4gZXh0ZW5kcyBBc3luY1Jlc3VsdExvY2F0b3I8XG4gIFMsXG4gIFJldHJpZXZlUmVzdWx0XG4+IHtcbiAgLyoqXG4gICAqIENoZWNrIGFuZCB3YWl0IHVudGlsIHRoZSBhc3luYyByZXF1ZXN0IGJlY29tZXMgaW4gY29tcGxldGVkIHN0YXR1cyxcbiAgICogYW5kIHJldHJpZXZlIHRoZSByZXN1bHQgZGF0YS5cbiAgICovXG4gIGFzeW5jIGNvbXBsZXRlKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuX21ldGEuY2hlY2tSZXRyaWV2ZVN0YXR1cyhyZXN1bHQuaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgcmV0cmlldmVkIHJlc3VsdCB0byBOb2RlLmpzIHJlYWRhYmxlIHN0cmVhbVxuICAgKi9cbiAgc3RyZWFtKCkge1xuICAgIGNvbnN0IHJlc3VsdFN0cmVhbSA9IG5ldyBSZWFkYWJsZSgpO1xuICAgIGxldCByZWFkaW5nID0gZmFsc2U7XG4gICAgcmVzdWx0U3RyZWFtLl9yZWFkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHJlYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVhZGluZyA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNvbXBsZXRlKCk7XG4gICAgICAgIHJlc3VsdFN0cmVhbS5wdXNoKEJ1ZmZlci5mcm9tKHJlc3VsdC56aXBGaWxlLCAnYmFzZTY0JykpO1xuICAgICAgICByZXN1bHRTdHJlYW0ucHVzaChudWxsKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVzdWx0U3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0U3RyZWFtO1xuICB9XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBUaGUgbG9jYXRvciBjbGFzcyB0byB0cmFjayBkZXBsb3koKSBNZXRhZGF0YSBBUEkgY2FsbCByZXN1bHRcbiAqXG4gKiBAcHJvdGVjdGVkXG4gKiBAY2xhc3MgTWV0YWRhdGF+RGVwbG95UmVzdWx0TG9jYXRvclxuICogQGV4dGVuZHMgTWV0YWRhdGF+QXN5bmNSZXN1bHRMb2NhdG9yXG4gKiBAcGFyYW0ge01ldGFkYXRhfSBtZXRhIC0gTWV0YWRhdGEgQVBJIG9iamVjdFxuICogQHBhcmFtIHtQcm9taXNlLjxNZXRhZGF0YX5Bc3luY1Jlc3VsdD59IHJlc3VsdCAtIFByb21pc2Ugb2JqZWN0IGZvciBhc3luYyByZXN1bHQgb2YgZGVwbG95KCkgY2FsbFxuICovXG5leHBvcnQgY2xhc3MgRGVwbG95UmVzdWx0TG9jYXRvcjxTIGV4dGVuZHMgU2NoZW1hPiBleHRlbmRzIEFzeW5jUmVzdWx0TG9jYXRvcjxcbiAgUyxcbiAgRGVwbG95UmVzdWx0XG4+IHtcbiAgLyoqXG4gICAqIENoZWNrIGFuZCB3YWl0IHVudGlsIHRoZSBhc3luYyByZXF1ZXN0IGJlY29tZXMgaW4gY29tcGxldGVkIHN0YXR1cyxcbiAgICogYW5kIHJldHJpZXZlIHRoZSByZXN1bHQgZGF0YS5cbiAgICovXG4gIGFzeW5jIGNvbXBsZXRlKGluY2x1ZGVEZXRhaWxzPzogYm9vbGVhbikge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuX21ldGEuY2hlY2tEZXBsb3lTdGF0dXMocmVzdWx0LmlkLCBpbmNsdWRlRGV0YWlscyk7XG4gIH1cbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKlxuICogUmVnaXN0ZXIgaG9vayBpbiBjb25uZWN0aW9uIGluc3RhbnRpYXRpb24gZm9yIGR5bmFtaWNhbGx5IGFkZGluZyB0aGlzIEFQSSBtb2R1bGUgZmVhdHVyZXNcbiAqL1xucmVnaXN0ZXJNb2R1bGUoJ21ldGFkYXRhJywgKGNvbm4pID0+IG5ldyBNZXRhZGF0YUFwaShjb25uKSk7XG5cbmV4cG9ydCBkZWZhdWx0IE1ldGFkYXRhQXBpO1xuIl19