import _Symbol$toPrimitive from "@babel/runtime-corejs3/core-js-stable/symbol/to-primitive";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import "core-js/modules/es.string.replace";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[_Symbol$toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source), true)).call(_context6, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context7; _forEachInstanceProperty(_context7 = ownKeys(Object(source))).call(_context7, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 *
 */
import { EventEmitter } from 'events';
import jsforce from './jsforce';
import Transport, { CanvasTransport, XdProxyTransport, HttpProxyTransport } from './transport';
import { getLogger } from './util/logger';
import OAuth2 from './oauth2';
import Cache from './cache';
import HttpApi from './http-api';
import SessionRefreshDelegate from './session-refresh-delegate';
import Query from './query';
import SObject from './sobject';
import QuickAction from './quick-action';
import Process from './process';
import { formatDate } from './util/formatter';

/**
 *
 */
const defaultConnectionConfig = {
  loginUrl: 'https://login.salesforce.com',
  instanceUrl: '',
  version: '50.0',
  logLevel: 'NONE',
  maxRequest: 10
};
/**
 *
 */

function esc(str) {
  return String(str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}
/**
 *
 */


function parseSignedRequest(sr) {
  if (typeof sr === 'string') {
    if (sr[0] === '{') {
      // might be JSON
      return JSON.parse(sr);
    } // might be original base64-encoded signed request


    const msg = sr.split('.').pop(); // retrieve latter part

    if (!msg) {
      throw new Error('Invalid signed request');
    }

    const json = Buffer.from(msg, 'base64').toString('utf-8');
    return JSON.parse(json);
  }

  return sr;
}
/** @private **/


function parseIdUrl(url) {
  var _context;

  const [organizationId, id] = _sliceInstanceProperty(_context = url.split('/')).call(_context, -2);

  return {
    id,
    organizationId,
    url
  };
}
/**
 * Session Refresh delegate function for OAuth2 authz code flow
 * @private
 */


async function oauthRefreshFn(conn, callback) {
  try {
    if (!conn.refreshToken) {
      throw new Error('No refresh token found in the connection');
    }

    const res = await conn.oauth2.refreshToken(conn.refreshToken);
    const userInfo = parseIdUrl(res.id);

    conn._establish({
      instanceUrl: res.instance_url,
      accessToken: res.access_token,
      userInfo
    });

    callback(undefined, res.access_token, res);
  } catch (err) {
    callback(err);
  }
}
/**
 * Session Refresh delegate function for username/password login
 * @private
 */


function createUsernamePasswordRefreshFn(username, password) {
  return async (conn, callback) => {
    try {
      await conn.login(username, password);

      if (!conn.accessToken) {
        throw new Error('Access token not found after login');
      }

      callback(null, conn.accessToken);
    } catch (err) {
      callback(err);
    }
  };
}
/**
 * @private
 */


function toSaveResult(err) {
  return {
    success: false,
    errors: [err]
  };
}
/**
 *
 */


function raiseNoModuleError(name) {
  throw new Error(`API module '${name}' is not loaded, load 'jsforce/api/${name}' explicitly`);
}
/*
 * Constant of maximum records num in DML operation (update/delete)
 */


const MAX_DML_COUNT = 200;
/**
 *
 */

export class Connection extends EventEmitter {
  // describe: (name: string) => Promise<DescribeSObjectResult>;
  // describeGlobal: () => Promise<DescribeGlobalResult>;
  // API libs are not instantiated here so that core module to remain without dependencies to them
  // It is responsible for develpers to import api libs explicitly if they are using 'jsforce/core' instead of 'jsforce'.
  get analytics() {
    return raiseNoModuleError('analytics');
  }

  get apex() {
    return raiseNoModuleError('apex');
  }

  get bulk() {
    return raiseNoModuleError('bulk');
  }

  get chatter() {
    return raiseNoModuleError('chatter');
  }

  get metadata() {
    return raiseNoModuleError('metadata');
  }

  get soap() {
    return raiseNoModuleError('soap');
  }

  get streaming() {
    return raiseNoModuleError('streaming');
  }

  get tooling() {
    return raiseNoModuleError('tooling');
  }
  /**
   *
   */


  constructor(config = {}) {
    super();

    _defineProperty(this, "version", void 0);

    _defineProperty(this, "loginUrl", void 0);

    _defineProperty(this, "instanceUrl", void 0);

    _defineProperty(this, "accessToken", void 0);

    _defineProperty(this, "refreshToken", void 0);

    _defineProperty(this, "userInfo", void 0);

    _defineProperty(this, "limitInfo", {});

    _defineProperty(this, "oauth2", void 0);

    _defineProperty(this, "sobjects", {});

    _defineProperty(this, "cache", void 0);

    _defineProperty(this, "_callOptions", void 0);

    _defineProperty(this, "_maxRequest", void 0);

    _defineProperty(this, "_logger", void 0);

    _defineProperty(this, "_logLevel", void 0);

    _defineProperty(this, "_transport", void 0);

    _defineProperty(this, "_sessionType", void 0);

    _defineProperty(this, "_refreshDelegate", void 0);

    _defineProperty(this, "describe$", void 0);

    _defineProperty(this, "describe$$", void 0);

    _defineProperty(this, "describeSObject", void 0);

    _defineProperty(this, "describeSObject$", void 0);

    _defineProperty(this, "describeSObject$$", void 0);

    _defineProperty(this, "describeGlobal$", void 0);

    _defineProperty(this, "describeGlobal$$", void 0);

    _defineProperty(this, "insert", this.create);

    _defineProperty(this, "delete", this.destroy);

    _defineProperty(this, "del", this.destroy);

    _defineProperty(this, "process", new Process(this));

    const {
      loginUrl,
      instanceUrl,
      version,
      oauth2,
      maxRequest,
      logLevel,
      proxyUrl,
      httpProxy
    } = config;
    this.loginUrl = loginUrl || defaultConnectionConfig.loginUrl;
    this.instanceUrl = instanceUrl || defaultConnectionConfig.instanceUrl;
    this.version = version || defaultConnectionConfig.version;
    this.oauth2 = oauth2 instanceof OAuth2 ? oauth2 : new OAuth2(_objectSpread({
      loginUrl: this.loginUrl,
      proxyUrl,
      httpProxy
    }, oauth2));
    let refreshFn = config.refreshFn;

    if (!refreshFn && this.oauth2.clientId) {
      refreshFn = oauthRefreshFn;
    }

    if (refreshFn) {
      this._refreshDelegate = new SessionRefreshDelegate(this, refreshFn);
    }

    this._maxRequest = maxRequest || defaultConnectionConfig.maxRequest;
    this._logger = logLevel ? Connection._logger.createInstance(logLevel) : Connection._logger;
    this._logLevel = logLevel;
    this._transport = proxyUrl ? new XdProxyTransport(proxyUrl) : httpProxy ? new HttpProxyTransport(httpProxy) : new Transport();
    this._callOptions = config.callOptions;
    this.cache = new Cache();

    const describeCacheKey = type => type ? `describe.${type}` : 'describe';

    const describe = Connection.prototype.describe;
    this.describe = this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'NOCACHE'
    });
    this.describe$ = this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'HIT'
    });
    this.describe$$ = this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'IMMEDIATE'
    });
    this.describeSObject = this.describe;
    this.describeSObject$ = this.describe$;
    this.describeSObject$$ = this.describe$$;
    const describeGlobal = Connection.prototype.describeGlobal;
    this.describeGlobal = this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'NOCACHE'
    });
    this.describeGlobal$ = this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'HIT'
    });
    this.describeGlobal$$ = this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'IMMEDIATE'
    });
    const {
      accessToken,
      refreshToken,
      sessionId,
      serverUrl,
      signedRequest
    } = config;

    this._establish({
      accessToken,
      refreshToken,
      instanceUrl,
      sessionId,
      serverUrl,
      signedRequest
    });

    jsforce.emit('connection:new', this);
  }
  /* @private */


  _establish(options) {
    var _context2;

    const {
      accessToken,
      refreshToken,
      instanceUrl,
      sessionId,
      serverUrl,
      signedRequest,
      userInfo
    } = options;
    this.instanceUrl = serverUrl ? _sliceInstanceProperty(_context2 = serverUrl.split('/')).call(_context2, 0, 3).join('/') : instanceUrl || this.instanceUrl;
    this.accessToken = sessionId || accessToken || this.accessToken;
    this.refreshToken = refreshToken || this.refreshToken;

    if (this.refreshToken && !this._refreshDelegate) {
      throw new Error('Refresh token is specified without oauth2 client information or refresh function');
    }

    const signedRequestObject = signedRequest && parseSignedRequest(signedRequest);

    if (signedRequestObject) {
      this.accessToken = signedRequestObject.client.oauthToken;

      if (CanvasTransport.supported) {
        this._transport = new CanvasTransport(signedRequestObject);
      }
    }

    this.userInfo = userInfo || this.userInfo;
    this._sessionType = sessionId ? 'soap' : 'oauth2';

    this._resetInstance();
  }
  /* @priveate */


  _clearSession() {
    this.accessToken = null;
    this.refreshToken = null;
    this.instanceUrl = defaultConnectionConfig.instanceUrl;
    this.userInfo = null;
    this._sessionType = null;
  }
  /* @priveate */


  _resetInstance() {
    this.limitInfo = {};
    this.sobjects = {}; // TODO impl cache

    this.cache.clear();
    this.cache.get('describeGlobal').removeAllListeners('value');
    this.cache.get('describeGlobal').on('value', ({
      result
    }) => {
      if (result) {
        for (const so of result.sobjects) {
          this.sobject(so.name);
        }
      }
    });
    /*
    if (this.tooling) {
      this.tooling._resetInstance();
    }
    */
  }
  /**
   * Authorize (using oauth2 web server flow)
   */


  async authorize(code, params = {}) {
    const res = await this.oauth2.requestToken(code, params);
    const userInfo = parseIdUrl(res.id);

    this._establish({
      instanceUrl: res.instance_url,
      accessToken: res.access_token,
      refreshToken: res.refresh_token,
      userInfo
    });

    this._logger.debug(`<login> completed. user id = ${userInfo.id}, org id = ${userInfo.organizationId}`);

    return userInfo;
  }
  /**
   *
   */


  async login(username, password) {
    this._refreshDelegate = new SessionRefreshDelegate(this, createUsernamePasswordRefreshFn(username, password));

    if (this.oauth2 && this.oauth2.clientId && this.oauth2.clientSecret) {
      return this.loginByOAuth2(username, password);
    }

    return this.loginBySoap(username, password);
  }
  /**
   * Login by OAuth2 username & password flow
   */


  async loginByOAuth2(username, password) {
    const res = await this.oauth2.authenticate(username, password);
    const userInfo = parseIdUrl(res.id);

    this._establish({
      instanceUrl: res.instance_url,
      accessToken: res.access_token,
      userInfo
    });

    this._logger.info(`<login> completed. user id = ${userInfo.id}, org id = ${userInfo.organizationId}`);

    return userInfo;
  }
  /**
   *
   */


  async loginBySoap(username, password) {
    var _context3;

    if (!username || !password) {
      return _Promise.reject(new Error('no username password given'));
    }

    const body = ['<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">', '<se:Header/>', '<se:Body>', '<login xmlns="urn:partner.soap.sforce.com">', `<username>${esc(username)}</username>`, `<password>${esc(password)}</password>`, '</login>', '</se:Body>', '</se:Envelope>'].join('');
    const soapLoginEndpoint = [this.loginUrl, 'services/Soap/u', this.version].join('/');
    const response = await this._transport.httpRequest({
      method: 'POST',
      url: soapLoginEndpoint,
      body,
      headers: {
        'Content-Type': 'text/xml',
        SOAPAction: '""'
      }
    });
    let m;

    if (response.statusCode >= 400) {
      m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
      const faultstring = m && m[1];
      throw new Error(faultstring || response.body);
    }

    this._logger.debug(`SOAP response = ${response.body}`);

    m = response.body.match(/<serverUrl>([^<]+)<\/serverUrl>/);
    const serverUrl = m && m[1];
    m = response.body.match(/<sessionId>([^<]+)<\/sessionId>/);
    const sessionId = m && m[1];
    m = response.body.match(/<userId>([^<]+)<\/userId>/);
    const userId = m && m[1];
    m = response.body.match(/<organizationId>([^<]+)<\/organizationId>/);
    const organizationId = m && m[1];

    if (!serverUrl || !sessionId || !userId || !organizationId) {
      throw new Error('could not extract session information from login response');
    }

    const idUrl = [this.loginUrl, 'id', organizationId, userId].join('/');
    const userInfo = {
      id: userId,
      organizationId,
      url: idUrl
    };

    this._establish({
      serverUrl: _sliceInstanceProperty(_context3 = serverUrl.split('/')).call(_context3, 0, 3).join('/'),
      sessionId,
      userInfo
    });

    this._logger.info(`<login> completed. user id = ${userId}, org id = ${organizationId}`);

    return userInfo;
  }
  /**
   * Logout the current session
   */


  async logout(revoke) {
    this._refreshDelegate = undefined;

    if (this._sessionType === 'oauth2') {
      return this.logoutByOAuth2(revoke);
    }

    return this.logoutBySoap(revoke);
  }
  /**
   * Logout the current session by revoking access token via OAuth2 session revoke
   */


  async logoutByOAuth2(revoke) {
    const token = revoke ? this.refreshToken : this.accessToken;

    if (token) {
      await this.oauth2.revokeToken(token);
    } // Destroy the session bound to this connection


    this._clearSession();

    this._resetInstance();
  }
  /**
   * Logout the session by using SOAP web service API
   */


  async logoutBySoap(revoke) {
    const body = ['<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">', '<se:Header>', '<SessionHeader xmlns="urn:partner.soap.sforce.com">', `<sessionId>${esc(revoke ? this.refreshToken : this.accessToken)}</sessionId>`, '</SessionHeader>', '</se:Header>', '<se:Body>', '<logout xmlns="urn:partner.soap.sforce.com"/>', '</se:Body>', '</se:Envelope>'].join('');
    const response = await this._transport.httpRequest({
      method: 'POST',
      url: [this.instanceUrl, 'services/Soap/u', this.version].join('/'),
      body,
      headers: {
        'Content-Type': 'text/xml',
        SOAPAction: '""'
      }
    });

    this._logger.debug(`SOAP statusCode = ${response.statusCode}, response = ${response.body}`);

    if (response.statusCode >= 400) {
      const m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
      const faultstring = m && m[1];
      throw new Error(faultstring || response.body);
    } // Destroy the session bound to this connection


    this._clearSession();

    this._resetInstance();
  }
  /**
   * Send REST API request with given HTTP request info, with connected session information.
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  request(request, options = {}) {
    // if request is simple string, regard it as url in GET method
    let request_ = typeof request === 'string' ? {
      method: 'GET',
      url: request
    } : request; // if url is given in relative path, prepend base url or instance url before.

    request_ = _objectSpread(_objectSpread({}, request_), {}, {
      url: this._normalizeUrl(request_.url)
    });
    const httpApi = new HttpApi(this, options); // log api usage and its quota

    httpApi.on('response', response => {
      if (response.headers && response.headers['sforce-limit-info']) {
        const apiUsage = response.headers['sforce-limit-info'].match(/api-usage=(\d+)\/(\d+)/);

        if (apiUsage) {
          this.limitInfo = {
            apiUsage: {
              used: _parseInt(apiUsage[1], 10),
              limit: _parseInt(apiUsage[2], 10)
            }
          };
        }
      }
    });
    return httpApi.request(request_);
  }
  /**
   * Send HTTP GET request
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestGet(url, options) {
    const request = {
      method: 'GET',
      url
    };
    return this.request(request, options);
  }
  /**
   * Send HTTP POST request with JSON body, with connected session information
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestPost(url, body, options) {
    const request = {
      method: 'POST',
      url,
      body: _JSON$stringify(body),
      headers: {
        'content-type': 'application/json'
      }
    };
    return this.request(request, options);
  }
  /**
   * Send HTTP PUT request with JSON body, with connected session information
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestPut(url, body, options) {
    const request = {
      method: 'PUT',
      url,
      body: _JSON$stringify(body),
      headers: {
        'content-type': 'application/json'
      }
    };
    return this.request(request, options);
  }
  /**
   * Send HTTP PATCH request with JSON body
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestPatch(url, body, options) {
    const request = {
      method: 'PATCH',
      url,
      body: _JSON$stringify(body),
      headers: {
        'content-type': 'application/json'
      }
    };
    return this.request(request, options);
  }
  /**
   * Send HTTP DELETE request
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestDelete(url, options) {
    const request = {
      method: 'DELETE',
      url
    };
    return this.request(request, options);
  }
  /** @private **/


  _baseUrl() {
    return [this.instanceUrl, 'services/data', `v${this.version}`].join('/');
  }
  /**
   * Convert path to absolute url
   * @private
   */


  _normalizeUrl(url) {
    if (url[0] === '/') {
      if (_indexOfInstanceProperty(url).call(url, '/services/') === 0) {
        return this.instanceUrl + url;
      }

      return this._baseUrl() + url;
    }

    return url;
  }
  /**
   *
   */


  query(soql, options) {
    return new Query(this, soql, options);
  }
  /**
   * Execute search by SOSL
   *
   * @param {String} sosl - SOSL string
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<RecordResult>>}
   */


  search(sosl) {
    var url = this._baseUrl() + '/search?q=' + encodeURIComponent(sosl);
    return this.request(url);
  }
  /**
   *
   */


  queryMore(locator, options) {
    return new Query(this, {
      locator
    }, options);
  }
  /* */


  _ensureVersion(majorVersion) {
    const versions = this.version.split('.');
    return _parseInt(versions[0], 10) >= majorVersion;
  }
  /* */


  _supports(feature) {
    switch (feature) {
      case 'sobject-collection':
        // sobject collection is available only in API ver 42.0+
        return this._ensureVersion(42);

      default:
        return false;
    }
  }
  /**
   * Retrieve specified records
   */


  async retrieve(type, ids, options = {}) {
    return _Array$isArray(ids) ? // check the version whether SObject collection API is supported (42.0)
    this._ensureVersion(42) ? this._retrieveMany(type, ids, options) : this._retrieveParallel(type, ids, options) : this._retrieveSingle(type, ids, options);
  }
  /** @private */


  async _retrieveSingle(type, id, options) {
    if (!id) {
      throw new Error('Invalid record ID. Specify valid record ID value');
    }

    let url = [this._baseUrl(), 'sobjects', type, id].join('/');
    const {
      fields,
      headers
    } = options;

    if (fields) {
      url += `?fields=${fields.join(',')}`;
    }

    return this.request({
      method: 'GET',
      url,
      headers
    });
  }
  /** @private */


  async _retrieveParallel(type, ids, options) {
    if (ids.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    return _Promise.all(_mapInstanceProperty(ids).call(ids, id => this._retrieveSingle(type, id, options).catch(err => {
      if (options.allOrNone || err.errorCode !== 'NOT_FOUND') {
        throw err;
      }

      return null;
    })));
  }
  /** @private */


  async _retrieveMany(type, ids, options) {
    var _context4;

    if (ids.length === 0) {
      return [];
    }

    const url = [this._baseUrl(), 'composite', 'sobjects', type].join('/');

    const fields = options.fields || _mapInstanceProperty(_context4 = (await this.describe$(type)).fields).call(_context4, field => field.name);

    return this.request({
      method: 'POST',
      url,
      body: _JSON$stringify({
        ids,
        fields
      }),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    });
  }
  /**
   * Create records
   */


  /**
   * @param type
   * @param records
   * @param options
   */
  async create(type, records, options = {}) {
    const ret = _Array$isArray(records) ? // check the version whether SObject collection API is supported (42.0)
    this._ensureVersion(42) ? await this._createMany(type, records, options) : await this._createParallel(type, records, options) : await this._createSingle(type, records, options);
    return ret;
  }
  /** @private */


  async _createSingle(type, record, options) {
    const {
      Id,
      type: rtype,
      attributes
    } = record,
          rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);

    const sobjectType = type || attributes && attributes.type || rtype;

    if (!sobjectType) {
      throw new Error('No SObject Type defined in record');
    }

    const url = [this._baseUrl(), 'sobjects', sobjectType].join('/');
    return this.request({
      method: 'POST',
      url,
      body: _JSON$stringify(rec),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    });
  }
  /** @private */


  async _createParallel(type, records, options) {
    if (records.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    return _Promise.all(_mapInstanceProperty(records).call(records, record => this._createSingle(type, record, options).catch(err => {
      // be aware that allOrNone in parallel mode will not revert the other successful requests
      // it only raises error when met at least one failed request.
      if (options.allOrNone || !err.errorCode) {
        throw err;
      }

      return toSaveResult(err);
    })));
  }
  /** @private */


  async _createMany(type, records, options) {
    if (records.length === 0) {
      return _Promise.resolve([]);
    }

    if (records.length > MAX_DML_COUNT && options.allowRecursive) {
      return [...(await this._createMany(type, _sliceInstanceProperty(records).call(records, 0, MAX_DML_COUNT), options)), ...(await this._createMany(type, _sliceInstanceProperty(records).call(records, MAX_DML_COUNT), options))];
    }

    const _records = _mapInstanceProperty(records).call(records, record => {
      const {
        Id,
        type: rtype,
        attributes
      } = record,
            rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);

      const sobjectType = type || attributes && attributes.type || rtype;

      if (!sobjectType) {
        throw new Error('No SObject Type defined in record');
      }

      return _objectSpread({
        attributes: {
          type: sobjectType
        }
      }, rec);
    });

    const url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
    return this.request({
      method: 'POST',
      url,
      body: _JSON$stringify({
        allOrNone: options.allOrNone || false,
        records: _records
      }),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    });
  }
  /**
   * Synonym of Connection#create()
   */


  /**
   * @param type
   * @param records
   * @param options
   */
  update(type, records, options = {}) {
    return _Array$isArray(records) ? // check the version whether SObject collection API is supported (42.0)
    this._ensureVersion(42) ? this._updateMany(type, records, options) : this._updateParallel(type, records, options) : this._updateSingle(type, records, options);
  }
  /** @private */


  async _updateSingle(type, record, options) {
    const {
      Id: id,
      type: rtype,
      attributes
    } = record,
          rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);

    if (!id) {
      throw new Error('Record id is not found in record.');
    }

    const sobjectType = type || attributes && attributes.type || rtype;

    if (!sobjectType) {
      throw new Error('No SObject Type defined in record');
    }

    const url = [this._baseUrl(), 'sobjects', sobjectType, id].join('/');
    return this.request({
      method: 'PATCH',
      url,
      body: _JSON$stringify(rec),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    }, {
      noContentResponse: {
        id,
        success: true,
        errors: []
      }
    });
  }
  /** @private */


  async _updateParallel(type, records, options) {
    if (records.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    return _Promise.all(_mapInstanceProperty(records).call(records, record => this._updateSingle(type, record, options).catch(err => {
      // be aware that allOrNone in parallel mode will not revert the other successful requests
      // it only raises error when met at least one failed request.
      if (options.allOrNone || !err.errorCode) {
        throw err;
      }

      return toSaveResult(err);
    })));
  }
  /** @private */


  async _updateMany(type, records, options) {
    if (records.length === 0) {
      return [];
    }

    if (records.length > MAX_DML_COUNT && options.allowRecursive) {
      return [...(await this._updateMany(type, _sliceInstanceProperty(records).call(records, 0, MAX_DML_COUNT), options)), ...(await this._updateMany(type, _sliceInstanceProperty(records).call(records, MAX_DML_COUNT), options))];
    }

    const _records = _mapInstanceProperty(records).call(records, record => {
      const {
        Id: id,
        type: rtype,
        attributes
      } = record,
            rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);

      if (!id) {
        throw new Error('Record id is not found in record.');
      }

      const sobjectType = type || attributes && attributes.type || rtype;

      if (!sobjectType) {
        throw new Error('No SObject Type defined in record');
      }

      return _objectSpread({
        id,
        attributes: {
          type: sobjectType
        }
      }, rec);
    });

    const url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
    return this.request({
      method: 'PATCH',
      url,
      body: _JSON$stringify({
        allOrNone: options.allOrNone || false,
        records: _records
      }),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    });
  }
  /**
   * Upsert records
   */


  /**
   *
   * @param type
   * @param records
   * @param extIdField
   * @param options
   */
  async upsert(type, records, extIdField, options = {}) {
    const isArray = _Array$isArray(records);

    const _records = _Array$isArray(records) ? records : [records];

    if (_records.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    const results = await _Promise.all(_mapInstanceProperty(_records).call(_records, record => {
      var _context5;

      const {
        [extIdField]: extId,
        type: rtype,
        attributes
      } = record,
            rec = _objectWithoutProperties(record, _mapInstanceProperty(_context5 = [extIdField, "type", "attributes"]).call(_context5, _toPropertyKey));

      const url = [this._baseUrl(), 'sobjects', type, extIdField, extId].join('/');
      return this.request({
        method: 'PATCH',
        url,
        body: _JSON$stringify(rec),
        headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
          'content-type': 'application/json'
        })
      }, {
        noContentResponse: {
          success: true,
          errors: []
        }
      }).catch(err => {
        // Be aware that `allOrNone` option in upsert method
        // will not revert the other successful requests.
        // It only raises error when met at least one failed request.
        if (!isArray || options.allOrNone || !err.errorCode) {
          throw err;
        }

        return toSaveResult(err);
      });
    }));
    return isArray ? results : results[0];
  }
  /**
   * Delete records
   */


  /**
   * @param type
   * @param ids
   * @param options
   */
  async destroy(type, ids, options = {}) {
    return _Array$isArray(ids) ? // check the version whether SObject collection API is supported (42.0)
    this._ensureVersion(42) ? this._destroyMany(type, ids, options) : this._destroyParallel(type, ids, options) : this._destroySingle(type, ids, options);
  }
  /** @private */


  async _destroySingle(type, id, options) {
    const url = [this._baseUrl(), 'sobjects', type, id].join('/');
    return this.request({
      method: 'DELETE',
      url,
      headers: options.headers || {}
    }, {
      noContentResponse: {
        id,
        success: true,
        errors: []
      }
    });
  }
  /** @private */


  async _destroyParallel(type, ids, options) {
    if (ids.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    return _Promise.all(_mapInstanceProperty(ids).call(ids, id => this._destroySingle(type, id, options).catch(err => {
      // Be aware that `allOrNone` option in parallel mode
      // will not revert the other successful requests.
      // It only raises error when met at least one failed request.
      if (options.allOrNone || !err.errorCode) {
        throw err;
      }

      return toSaveResult(err);
    })));
  }
  /** @private */


  async _destroyMany(type, ids, options) {
    if (ids.length === 0) {
      return [];
    }

    if (ids.length > MAX_DML_COUNT && options.allowRecursive) {
      return [...(await this._destroyMany(type, _sliceInstanceProperty(ids).call(ids, 0, MAX_DML_COUNT), options)), ...(await this._destroyMany(type, _sliceInstanceProperty(ids).call(ids, MAX_DML_COUNT), options))];
    }

    let url = [this._baseUrl(), 'composite', 'sobjects?ids='].join('/') + ids.join(',');

    if (options.allOrNone) {
      url += '&allOrNone=true';
    }

    return this.request({
      method: 'DELETE',
      url,
      headers: options.headers || {}
    });
  }
  /**
   * Synonym of Connection#destroy()
   */


  /**
   * Describe SObject metadata
   */
  async describe(type) {
    const url = [this._baseUrl(), 'sobjects', type, 'describe'].join('/');
    const body = await this.request(url);
    return body;
  }
  /**
   * Describe global SObjects
   */


  async describeGlobal() {
    const url = `${this._baseUrl()}/sobjects`;
    const body = await this.request(url);
    return body;
  }
  /**
   * Get SObject instance
   */


  sobject(type) {
    const so = this.sobjects[type] || new SObject(this, type);
    this.sobjects[type] = so;
    return so;
  }
  /**
   * Get identity information of current user
   */


  async identity(options = {}) {
    let url = this.userInfo && this.userInfo.url;

    if (!url) {
      const res = await this.request({
        method: 'GET',
        url: this._baseUrl(),
        headers: options.headers
      });
      url = res.identity;
    }

    url += '?format=json';

    if (this.accessToken) {
      url += `&oauth_token=${encodeURIComponent(this.accessToken)}`;
    }

    const res = await this.request({
      method: 'GET',
      url
    });
    this.userInfo = {
      id: res.user_id,
      organizationId: res.organization_id,
      url: res.id
    };
    return res;
  }
  /**
   * List recently viewed records
   */


  async recent(type, limit) {
    /* eslint-disable no-param-reassign */
    if (typeof type === 'number') {
      limit = type;
      type = undefined;
    }

    let url;

    if (type) {
      url = [this._baseUrl(), 'sobjects', type].join('/');
      const {
        recentItems
      } = await this.request(url);
      return limit ? _sliceInstanceProperty(recentItems).call(recentItems, 0, limit) : recentItems;
    }

    url = `${this._baseUrl()}/recent`;

    if (limit) {
      url += `?limit=${limit}`;
    }

    return this.request(url);
  }
  /**
   * Retrieve updated records
   */


  async updated(type, start, end) {
    /* eslint-disable no-param-reassign */
    let url = [this._baseUrl(), 'sobjects', type, 'updated'].join('/');

    if (typeof start === 'string') {
      start = new Date(start);
    }

    start = formatDate(start);
    url += `?start=${encodeURIComponent(start)}`;

    if (typeof end === 'string') {
      end = new Date(end);
    }

    end = formatDate(end);
    url += `&end=${encodeURIComponent(end)}`;
    const body = await this.request(url);
    return body;
  }
  /**
   * Retrieve deleted records
   */


  async deleted(type, start, end) {
    /* eslint-disable no-param-reassign */
    let url = [this._baseUrl(), 'sobjects', type, 'deleted'].join('/');

    if (typeof start === 'string') {
      start = new Date(start);
    }

    start = formatDate(start);
    url += `?start=${encodeURIComponent(start)}`;

    if (typeof end === 'string') {
      end = new Date(end);
    }

    end = formatDate(end);
    url += `&end=${encodeURIComponent(end)}`;
    const body = await this.request(url);
    return body;
  }
  /**
   * Returns a list of all tabs
   */


  async tabs() {
    const url = [this._baseUrl(), 'tabs'].join('/');
    const body = await this.request(url);
    return body;
  }
  /**
   * Returns curren system limit in the organization
   */


  async limits() {
    const url = [this._baseUrl(), 'limits'].join('/');
    const body = await this.request(url);
    return body;
  }
  /**
   * Returns a theme info
   */


  async theme() {
    const url = [this._baseUrl(), 'theme'].join('/');
    const body = await this.request(url);
    return body;
  }
  /**
   * Returns all registered global quick actions
   */


  async quickActions() {
    const body = await this.request('/quickActions');
    return body;
  }
  /**
   * Get reference for specified global quick aciton
   */


  quickAction(actionName) {
    return new QuickAction(this, `/quickActions/${actionName}`);
  }
  /**
   * Module which manages process rules and approval processes
   */


}

_defineProperty(Connection, "_logger", getLogger('connection'));

export default Connection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25uZWN0aW9uLnRzIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsImpzZm9yY2UiLCJUcmFuc3BvcnQiLCJDYW52YXNUcmFuc3BvcnQiLCJYZFByb3h5VHJhbnNwb3J0IiwiSHR0cFByb3h5VHJhbnNwb3J0IiwiZ2V0TG9nZ2VyIiwiT0F1dGgyIiwiQ2FjaGUiLCJIdHRwQXBpIiwiU2Vzc2lvblJlZnJlc2hEZWxlZ2F0ZSIsIlF1ZXJ5IiwiU09iamVjdCIsIlF1aWNrQWN0aW9uIiwiUHJvY2VzcyIsImZvcm1hdERhdGUiLCJkZWZhdWx0Q29ubmVjdGlvbkNvbmZpZyIsImxvZ2luVXJsIiwiaW5zdGFuY2VVcmwiLCJ2ZXJzaW9uIiwibG9nTGV2ZWwiLCJtYXhSZXF1ZXN0IiwiZXNjIiwic3RyIiwiU3RyaW5nIiwicmVwbGFjZSIsInBhcnNlU2lnbmVkUmVxdWVzdCIsInNyIiwiSlNPTiIsInBhcnNlIiwibXNnIiwic3BsaXQiLCJwb3AiLCJFcnJvciIsImpzb24iLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJwYXJzZUlkVXJsIiwidXJsIiwib3JnYW5pemF0aW9uSWQiLCJpZCIsIm9hdXRoUmVmcmVzaEZuIiwiY29ubiIsImNhbGxiYWNrIiwicmVmcmVzaFRva2VuIiwicmVzIiwib2F1dGgyIiwidXNlckluZm8iLCJfZXN0YWJsaXNoIiwiaW5zdGFuY2VfdXJsIiwiYWNjZXNzVG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJ1bmRlZmluZWQiLCJlcnIiLCJjcmVhdGVVc2VybmFtZVBhc3N3b3JkUmVmcmVzaEZuIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImxvZ2luIiwidG9TYXZlUmVzdWx0Iiwic3VjY2VzcyIsImVycm9ycyIsInJhaXNlTm9Nb2R1bGVFcnJvciIsIm5hbWUiLCJNQVhfRE1MX0NPVU5UIiwiQ29ubmVjdGlvbiIsImFuYWx5dGljcyIsImFwZXgiLCJidWxrIiwiY2hhdHRlciIsIm1ldGFkYXRhIiwic29hcCIsInN0cmVhbWluZyIsInRvb2xpbmciLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImNyZWF0ZSIsImRlc3Ryb3kiLCJwcm94eVVybCIsImh0dHBQcm94eSIsInJlZnJlc2hGbiIsImNsaWVudElkIiwiX3JlZnJlc2hEZWxlZ2F0ZSIsIl9tYXhSZXF1ZXN0IiwiX2xvZ2dlciIsImNyZWF0ZUluc3RhbmNlIiwiX2xvZ0xldmVsIiwiX3RyYW5zcG9ydCIsIl9jYWxsT3B0aW9ucyIsImNhbGxPcHRpb25zIiwiY2FjaGUiLCJkZXNjcmliZUNhY2hlS2V5IiwidHlwZSIsImRlc2NyaWJlIiwicHJvdG90eXBlIiwiY3JlYXRlQ2FjaGVkRnVuY3Rpb24iLCJrZXkiLCJzdHJhdGVneSIsImRlc2NyaWJlJCIsImRlc2NyaWJlJCQiLCJkZXNjcmliZVNPYmplY3QiLCJkZXNjcmliZVNPYmplY3QkIiwiZGVzY3JpYmVTT2JqZWN0JCQiLCJkZXNjcmliZUdsb2JhbCIsImRlc2NyaWJlR2xvYmFsJCIsImRlc2NyaWJlR2xvYmFsJCQiLCJzZXNzaW9uSWQiLCJzZXJ2ZXJVcmwiLCJzaWduZWRSZXF1ZXN0IiwiZW1pdCIsIm9wdGlvbnMiLCJqb2luIiwic2lnbmVkUmVxdWVzdE9iamVjdCIsImNsaWVudCIsIm9hdXRoVG9rZW4iLCJzdXBwb3J0ZWQiLCJfc2Vzc2lvblR5cGUiLCJfcmVzZXRJbnN0YW5jZSIsIl9jbGVhclNlc3Npb24iLCJsaW1pdEluZm8iLCJzb2JqZWN0cyIsImNsZWFyIiwiZ2V0IiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwib24iLCJyZXN1bHQiLCJzbyIsInNvYmplY3QiLCJhdXRob3JpemUiLCJjb2RlIiwicGFyYW1zIiwicmVxdWVzdFRva2VuIiwicmVmcmVzaF90b2tlbiIsImRlYnVnIiwiY2xpZW50U2VjcmV0IiwibG9naW5CeU9BdXRoMiIsImxvZ2luQnlTb2FwIiwiYXV0aGVudGljYXRlIiwiaW5mbyIsInJlamVjdCIsImJvZHkiLCJzb2FwTG9naW5FbmRwb2ludCIsInJlc3BvbnNlIiwiaHR0cFJlcXVlc3QiLCJtZXRob2QiLCJoZWFkZXJzIiwiU09BUEFjdGlvbiIsIm0iLCJzdGF0dXNDb2RlIiwibWF0Y2giLCJmYXVsdHN0cmluZyIsInVzZXJJZCIsImlkVXJsIiwibG9nb3V0IiwicmV2b2tlIiwibG9nb3V0QnlPQXV0aDIiLCJsb2dvdXRCeVNvYXAiLCJ0b2tlbiIsInJldm9rZVRva2VuIiwicmVxdWVzdCIsInJlcXVlc3RfIiwiX25vcm1hbGl6ZVVybCIsImh0dHBBcGkiLCJhcGlVc2FnZSIsInVzZWQiLCJsaW1pdCIsInJlcXVlc3RHZXQiLCJyZXF1ZXN0UG9zdCIsInJlcXVlc3RQdXQiLCJyZXF1ZXN0UGF0Y2giLCJyZXF1ZXN0RGVsZXRlIiwiX2Jhc2VVcmwiLCJxdWVyeSIsInNvcWwiLCJzZWFyY2giLCJzb3NsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXVlcnlNb3JlIiwibG9jYXRvciIsIl9lbnN1cmVWZXJzaW9uIiwibWFqb3JWZXJzaW9uIiwidmVyc2lvbnMiLCJfc3VwcG9ydHMiLCJmZWF0dXJlIiwicmV0cmlldmUiLCJpZHMiLCJfcmV0cmlldmVNYW55IiwiX3JldHJpZXZlUGFyYWxsZWwiLCJfcmV0cmlldmVTaW5nbGUiLCJmaWVsZHMiLCJsZW5ndGgiLCJhbGwiLCJjYXRjaCIsImFsbE9yTm9uZSIsImVycm9yQ29kZSIsImZpZWxkIiwicmVjb3JkcyIsInJldCIsIl9jcmVhdGVNYW55IiwiX2NyZWF0ZVBhcmFsbGVsIiwiX2NyZWF0ZVNpbmdsZSIsInJlY29yZCIsIklkIiwicnR5cGUiLCJhdHRyaWJ1dGVzIiwicmVjIiwic29iamVjdFR5cGUiLCJyZXNvbHZlIiwiYWxsb3dSZWN1cnNpdmUiLCJfcmVjb3JkcyIsInVwZGF0ZSIsIl91cGRhdGVNYW55IiwiX3VwZGF0ZVBhcmFsbGVsIiwiX3VwZGF0ZVNpbmdsZSIsIm5vQ29udGVudFJlc3BvbnNlIiwidXBzZXJ0IiwiZXh0SWRGaWVsZCIsImlzQXJyYXkiLCJyZXN1bHRzIiwiZXh0SWQiLCJfZGVzdHJveU1hbnkiLCJfZGVzdHJveVBhcmFsbGVsIiwiX2Rlc3Ryb3lTaW5nbGUiLCJpZGVudGl0eSIsInVzZXJfaWQiLCJvcmdhbml6YXRpb25faWQiLCJyZWNlbnQiLCJyZWNlbnRJdGVtcyIsInVwZGF0ZWQiLCJzdGFydCIsImVuZCIsIkRhdGUiLCJkZWxldGVkIiwidGFicyIsImxpbWl0cyIsInRoZW1lIiwicXVpY2tBY3Rpb25zIiwicXVpY2tBY3Rpb24iLCJhY3Rpb25OYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxZQUFULFFBQTZCLFFBQTdCO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixXQUFwQjtBQWdDQSxPQUFPQyxTQUFQLElBQ0VDLGVBREYsRUFFRUMsZ0JBRkYsRUFHRUMsa0JBSEYsUUFJTyxhQUpQO0FBS0EsU0FBaUJDLFNBQWpCLFFBQWtDLGVBQWxDO0FBRUEsT0FBT0MsTUFBUCxNQUFzQyxVQUF0QztBQUVBLE9BQU9DLEtBQVAsTUFBc0MsU0FBdEM7QUFDQSxPQUFPQyxPQUFQLE1BQW9CLFlBQXBCO0FBQ0EsT0FBT0Msc0JBQVAsTUFFTyw0QkFGUDtBQUdBLE9BQU9DLEtBQVAsTUFBa0IsU0FBbEI7QUFFQSxPQUFPQyxPQUFQLE1BQW9CLFdBQXBCO0FBQ0EsT0FBT0MsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxPQUFQLE1BQW9CLFdBQXBCO0FBQ0EsU0FBU0MsVUFBVCxRQUEyQixrQkFBM0I7O0FBeUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLHVCQU1MLEdBQUc7QUFDRkMsRUFBQUEsUUFBUSxFQUFFLDhCQURSO0FBRUZDLEVBQUFBLFdBQVcsRUFBRSxFQUZYO0FBR0ZDLEVBQUFBLE9BQU8sRUFBRSxNQUhQO0FBSUZDLEVBQUFBLFFBQVEsRUFBRSxNQUpSO0FBS0ZDLEVBQUFBLFVBQVUsRUFBRTtBQUxWLENBTko7QUFjQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0MsR0FBVCxDQUFhQyxHQUFiLEVBQTRDO0FBQzFDLFNBQU9DLE1BQU0sQ0FB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ZnJvbSAnZXZlbnRzJztcbmltcG9ydCBqc2ZvcmNlIGZyb20gJy4vanNmb3JjZSc7XG5pbXBvcnQge1xuICBIdHRwUmVxdWVzdCxcbiAgSHR0cFJlc3BvbnNlLFxuICBDYWxsYmFjayxcbiAgUmVjb3JkLFxuICBTYXZlUmVzdWx0LFxuICBVcHNlcnRSZXN1bHQsXG4gIERlc2NyaWJlR2xvYmFsUmVzdWx0LFxuICBEZXNjcmliZVNPYmplY3RSZXN1bHQsXG4gIERlc2NyaWJlVGFiLFxuICBEZXNjcmliZVRoZW1lLFxuICBEZXNjcmliZVF1aWNrQWN0aW9uUmVzdWx0LFxuICBVcGRhdGVkUmVzdWx0LFxuICBEZWxldGVkUmVzdWx0LFxuICBTZWFyY2hSZXN1bHQsXG4gIE9yZ2FuaXphdGlvbkxpbWl0c0luZm8sXG4gIE9wdGlvbmFsLFxuICBTaWduZWRSZXF1ZXN0T2JqZWN0LFxuICBTYXZlRXJyb3IsXG4gIERtbE9wdGlvbnMsXG4gIFJldHJpZXZlT3B0aW9ucyxcbiAgU2NoZW1hLFxuICBTT2JqZWN0TmFtZXMsXG4gIFNPYmplY3RJbnB1dFJlY29yZCxcbiAgU09iamVjdFVwZGF0ZVJlY29yZCxcbiAgU09iamVjdEZpZWxkTmFtZXMsXG4gIFVzZXJJbmZvLFxuICBJZGVudGl0eUluZm8sXG4gIExpbWl0SW5mbyxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBTdHJlYW1Qcm9taXNlIH0gZnJvbSAnLi91dGlsL3Byb21pc2UnO1xuaW1wb3J0IFRyYW5zcG9ydCwge1xuICBDYW52YXNUcmFuc3BvcnQsXG4gIFhkUHJveHlUcmFuc3BvcnQsXG4gIEh0dHBQcm94eVRyYW5zcG9ydCxcbn0gZnJvbSAnLi90cmFuc3BvcnQnO1xuaW1wb3J0IHsgTG9nZ2VyLCBnZXRMb2dnZXIgfSBmcm9tICcuL3V0aWwvbG9nZ2VyJztcbmltcG9ydCB7IExvZ0xldmVsQ29uZmlnIH0gZnJvbSAnLi91dGlsL2xvZ2dlcic7XG5pbXBvcnQgT0F1dGgyLCB7IFRva2VuUmVzcG9uc2UgfSBmcm9tICcuL29hdXRoMic7XG5pbXBvcnQgeyBPQXV0aDJDb25maWcgfSBmcm9tICcuL29hdXRoMic7XG5pbXBvcnQgQ2FjaGUsIHsgQ2FjaGVkRnVuY3Rpb24gfSBmcm9tICcuL2NhY2hlJztcbmltcG9ydCBIdHRwQXBpIGZyb20gJy4vaHR0cC1hcGknO1xuaW1wb3J0IFNlc3Npb25SZWZyZXNoRGVsZWdhdGUsIHtcbiAgU2Vzc2lvblJlZnJlc2hGdW5jLFxufSBmcm9tICcuL3Nlc3Npb24tcmVmcmVzaC1kZWxlZ2F0ZSc7XG5pbXBvcnQgUXVlcnkgZnJvbSAnLi9xdWVyeSc7XG5pbXBvcnQgeyBRdWVyeU9wdGlvbnMgfSBmcm9tICcuL3F1ZXJ5JztcbmltcG9ydCBTT2JqZWN0IGZyb20gJy4vc29iamVjdCc7XG5pbXBvcnQgUXVpY2tBY3Rpb24gZnJvbSAnLi9xdWljay1hY3Rpb24nO1xuaW1wb3J0IFByb2Nlc3MgZnJvbSAnLi9wcm9jZXNzJztcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICcuL3V0aWwvZm9ybWF0dGVyJztcbmltcG9ydCBBbmFseXRpY3MgZnJvbSAnLi9hcGkvYW5hbHl0aWNzJztcbmltcG9ydCBBcGV4IGZyb20gJy4vYXBpL2FwZXgnO1xuaW1wb3J0IEJ1bGsgZnJvbSAnLi9hcGkvYnVsayc7XG5pbXBvcnQgQ2hhdHRlciBmcm9tICcuL2FwaS9jaGF0dGVyJztcbmltcG9ydCBNZXRhZGF0YSBmcm9tICcuL2FwaS9tZXRhZGF0YSc7XG5pbXBvcnQgU29hcEFwaSBmcm9tICcuL2FwaS9zb2FwJztcbmltcG9ydCBTdHJlYW1pbmcgZnJvbSAnLi9hcGkvc3RyZWFtaW5nJztcbmltcG9ydCBUb29saW5nIGZyb20gJy4vYXBpL3Rvb2xpbmcnO1xuXG4vKipcbiAqIHR5cGUgZGVmaW5pdGlvbnNcbiAqL1xuZXhwb3J0IHR5cGUgQ29ubmVjdGlvbkNvbmZpZzxTIGV4dGVuZHMgU2NoZW1hID0gU2NoZW1hPiA9IHtcbiAgdmVyc2lvbj86IHN0cmluZztcbiAgbG9naW5Vcmw/OiBzdHJpbmc7XG4gIGFjY2Vzc1Rva2VuPzogc3RyaW5nO1xuICByZWZyZXNoVG9rZW4/OiBzdHJpbmc7XG4gIGluc3RhbmNlVXJsPzogc3RyaW5nO1xuICBzZXNzaW9uSWQ/OiBzdHJpbmc7XG4gIHNlcnZlclVybD86IHN0cmluZztcbiAgc2lnbmVkUmVxdWVzdD86IHN0cmluZztcbiAgb2F1dGgyPzogT0F1dGgyIHwgT0F1dGgyQ29uZmlnO1xuICBtYXhSZXF1ZXN0PzogbnVtYmVyO1xuICBwcm94eVVybD86IHN0cmluZztcbiAgaHR0cFByb3h5Pzogc3RyaW5nO1xuICBsb2dMZXZlbD86IExvZ0xldmVsQ29uZmlnO1xuICBjYWxsT3B0aW9ucz86IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9O1xuICByZWZyZXNoRm4/OiBTZXNzaW9uUmVmcmVzaEZ1bmM8Uz47XG59O1xuXG5leHBvcnQgdHlwZSBDb25uZWN0aW9uRXN0YWJsaXNoT3B0aW9ucyA9IHtcbiAgYWNjZXNzVG9rZW4/OiBPcHRpb25hbDxzdHJpbmc+O1xuICByZWZyZXNoVG9rZW4/OiBPcHRpb25hbDxzdHJpbmc+O1xuICBpbnN0YW5jZVVybD86IE9wdGlvbmFsPHN0cmluZz47XG4gIHNlc3Npb25JZD86IE9wdGlvbmFsPHN0cmluZz47XG4gIHNlcnZlclVybD86IE9wdGlvbmFsPHN0cmluZz47XG4gIHNpZ25lZFJlcXVlc3Q/OiBPcHRpb25hbDxzdHJpbmcgfCBTaWduZWRSZXF1ZXN0T2JqZWN0PjtcbiAgdXNlckluZm8/OiBPcHRpb25hbDxVc2VySW5mbz47XG59O1xuXG4vKipcbiAqXG4gKi9cbmNvbnN0IGRlZmF1bHRDb25uZWN0aW9uQ29uZmlnOiB7XG4gIGxvZ2luVXJsOiBzdHJpbmc7XG4gIGluc3RhbmNlVXJsOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbiAgbG9nTGV2ZWw6IExvZ0xldmVsQ29uZmlnO1xuICBtYXhSZXF1ZXN0OiBudW1iZXI7XG59ID0ge1xuICBsb2dpblVybDogJ2h0dHBzOi8vbG9naW4uc2FsZXNmb3JjZS5jb20nLFxuICBpbnN0YW5jZVVybDogJycsXG4gIHZlcnNpb246ICc1MC4wJyxcbiAgbG9nTGV2ZWw6ICdOT05FJyxcbiAgbWF4UmVxdWVzdDogMTAsXG59O1xuXG4vKipcbiAqXG4gKi9cbmZ1bmN0aW9uIGVzYyhzdHI6IE9wdGlvbmFsPHN0cmluZz4pOiBzdHJpbmcge1xuICByZXR1cm4gU3RyaW5nKHN0ciB8fCAnJylcbiAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn1cblxuLyoqXG4gKlxuICovXG5mdW5jdGlvbiBwYXJzZVNpZ25lZFJlcXVlc3Qoc3I6IHN0cmluZyB8IE9iamVjdCk6IFNpZ25lZFJlcXVlc3RPYmplY3Qge1xuICBpZiAodHlwZW9mIHNyID09PSAnc3RyaW5nJykge1xuICAgIGlmIChzclswXSA9PT0gJ3snKSB7XG4gICAgICAvLyBtaWdodCBiZSBKU09OXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShzcik7XG4gICAgfSAvLyBtaWdodCBiZSBvcmlnaW5hbCBiYXNlNjQtZW5jb2RlZCBzaWduZWQgcmVxdWVzdFxuICAgIGNvbnN0IG1zZyA9IHNyLnNwbGl0KCcuJykucG9wKCk7IC8vIHJldHJpZXZlIGxhdHRlciBwYXJ0XG4gICAgaWYgKCFtc2cpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzaWduZWQgcmVxdWVzdCcpO1xuICAgIH1cbiAgICBjb25zdCBqc29uID0gQnVmZmVyLmZyb20obXNnLCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0Zi04Jyk7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoanNvbik7XG4gIH1cbiAgcmV0dXJuIHNyIGFzIFNpZ25lZFJlcXVlc3RPYmplY3Q7XG59XG5cbi8qKiBAcHJpdmF0ZSAqKi9cbmZ1bmN0aW9uIHBhcnNlSWRVcmwodXJsOiBzdHJpbmcpIHtcbiAgY29uc3QgW29yZ2FuaXphdGlvbklkLCBpZF0gPSB1cmwuc3BsaXQoJy8nKS5zbGljZSgtMik7XG4gIHJldHVybiB7IGlkLCBvcmdhbml6YXRpb25JZCwgdXJsIH07XG59XG5cbi8qKlxuICogU2Vzc2lvbiBSZWZyZXNoIGRlbGVnYXRlIGZ1bmN0aW9uIGZvciBPQXV0aDIgYXV0aHogY29kZSBmbG93XG4gKiBAcHJpdmF0ZVxuICovXG5hc3luYyBmdW5jdGlvbiBvYXV0aFJlZnJlc2hGbjxTIGV4dGVuZHMgU2NoZW1hPihcbiAgY29ubjogQ29ubmVjdGlvbjxTPixcbiAgY2FsbGJhY2s6IENhbGxiYWNrPHN0cmluZywgVG9rZW5SZXNwb25zZT4sXG4pIHtcbiAgdHJ5IHtcbiAgICBpZiAoIWNvbm4ucmVmcmVzaFRva2VuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHJlZnJlc2ggdG9rZW4gZm91bmQgaW4gdGhlIGNvbm5lY3Rpb24nKTtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY29ubi5vYXV0aDIucmVmcmVzaFRva2VuKGNvbm4ucmVmcmVzaFRva2VuKTtcbiAgICBjb25zdCB1c2VySW5mbyA9IHBhcnNlSWRVcmwocmVzLmlkKTtcbiAgICBjb25uLl9lc3RhYmxpc2goe1xuICAgICAgaW5zdGFuY2VVcmw6IHJlcy5pbnN0YW5jZV91cmwsXG4gICAgICBhY2Nlc3NUb2tlbjogcmVzLmFjY2Vzc190b2tlbixcbiAgICAgIHVzZXJJbmZvLFxuICAgIH0pO1xuICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgcmVzLmFjY2Vzc190b2tlbiwgcmVzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY2FsbGJhY2soZXJyKTtcbiAgfVxufVxuXG4vKipcbiAqIFNlc3Npb24gUmVmcmVzaCBkZWxlZ2F0ZSBmdW5jdGlvbiBmb3IgdXNlcm5hbWUvcGFzc3dvcmQgbG9naW5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVVzZXJuYW1lUGFzc3dvcmRSZWZyZXNoRm48UyBleHRlbmRzIFNjaGVtYT4oXG4gIHVzZXJuYW1lOiBzdHJpbmcsXG4gIHBhc3N3b3JkOiBzdHJpbmcsXG4pIHtcbiAgcmV0dXJuIGFzeW5jIChcbiAgICBjb25uOiBDb25uZWN0aW9uPFM+LFxuICAgIGNhbGxiYWNrOiBDYWxsYmFjazxzdHJpbmcsIFRva2VuUmVzcG9uc2U+LFxuICApID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgY29ubi5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpO1xuICAgICAgaWYgKCFjb25uLmFjY2Vzc1Rva2VuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQWNjZXNzIHRva2VuIG5vdCBmb3VuZCBhZnRlciBsb2dpbicpO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2sobnVsbCwgY29ubi5hY2Nlc3NUb2tlbik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0b1NhdmVSZXN1bHQoZXJyOiBTYXZlRXJyb3IpOiBTYXZlUmVzdWx0IHtcbiAgcmV0dXJuIHtcbiAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICBlcnJvcnM6IFtlcnJdLFxuICB9O1xufVxuXG4vKipcbiAqXG4gKi9cbmZ1bmN0aW9uIHJhaXNlTm9Nb2R1bGVFcnJvcihuYW1lOiBzdHJpbmcpOiBuZXZlciB7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICBgQVBJIG1vZHVsZSAnJHtuYW1lfScgaXMgbm90IGxvYWRlZCwgbG9hZCAnanNmb3JjZS9hcGkvJHtuYW1lfScgZXhwbGljaXRseWAsXG4gICk7XG59XG5cbi8qXG4gKiBDb25zdGFudCBvZiBtYXhpbXVtIHJlY29yZHMgbnVtIGluIERNTCBvcGVyYXRpb24gKHVwZGF0ZS9kZWxldGUpXG4gKi9cbmNvbnN0IE1BWF9ETUxfQ09VTlQgPSAyMDA7XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb248UyBleHRlbmRzIFNjaGVtYSA9IFNjaGVtYT4gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBzdGF0aWMgX2xvZ2dlciA9IGdldExvZ2dlcignY29ubmVjdGlvbicpO1xuXG4gIHZlcnNpb246IHN0cmluZztcbiAgbG9naW5Vcmw6IHN0cmluZztcbiAgaW5zdGFuY2VVcmw6IHN0cmluZztcbiAgYWNjZXNzVG9rZW46IE9wdGlvbmFsPHN0cmluZz47XG4gIHJlZnJlc2hUb2tlbjogT3B0aW9uYWw8c3RyaW5nPjtcbiAgdXNlckluZm86IE9wdGlvbmFsPFVzZXJJbmZvPjtcbiAgbGltaXRJbmZvOiBMaW1pdEluZm8gPSB7fTtcbiAgb2F1dGgyOiBPQXV0aDI7XG4gIHNvYmplY3RzOiB7IFtOIGluIFNPYmplY3ROYW1lczxTPl0/OiBTT2JqZWN0PFMsIE4+IH0gPSB7fTtcbiAgY2FjaGU6IENhY2hlO1xuICBfY2FsbE9wdGlvbnM6IE9wdGlvbmFsPHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9PjtcbiAgX21heFJlcXVlc3Q6IG51bWJlcjtcbiAgX2xvZ2dlcjogTG9nZ2VyO1xuICBfbG9nTGV2ZWw6IE9wdGlvbmFsPExvZ0xldmVsQ29uZmlnPjtcbiAgX3RyYW5zcG9ydDogVHJhbnNwb3J0O1xuICBfc2Vzc2lvblR5cGU6IE9wdGlvbmFsPCdzb2FwJyB8ICdvYXV0aDInPjtcbiAgX3JlZnJlc2hEZWxlZ2F0ZTogT3B0aW9uYWw8U2Vzc2lvblJlZnJlc2hEZWxlZ2F0ZTxTPj47XG5cbiAgLy8gZGVzY3JpYmU6IChuYW1lOiBzdHJpbmcpID0+IFByb21pc2U8RGVzY3JpYmVTT2JqZWN0UmVzdWx0PjtcbiAgZGVzY3JpYmUkOiBDYWNoZWRGdW5jdGlvbjwobmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPERlc2NyaWJlU09iamVjdFJlc3VsdD4+O1xuICBkZXNjcmliZSQkOiBDYWNoZWRGdW5jdGlvbjwobmFtZTogc3RyaW5nKSA9PiBEZXNjcmliZVNPYmplY3RSZXN1bHQ+O1xuICBkZXNjcmliZVNPYmplY3Q6IChuYW1lOiBzdHJpbmcpID0+IFByb21pc2U8RGVzY3JpYmVTT2JqZWN0UmVzdWx0PjtcbiAgZGVzY3JpYmVTT2JqZWN0JDogQ2FjaGVkRnVuY3Rpb248XG4gICAgKG5hbWU6IHN0cmluZykgPT4gUHJvbWlzZTxEZXNjcmliZVNPYmplY3RSZXN1bHQ+XG4gID47XG4gIGRlc2NyaWJlU09iamVjdCQkOiBDYWNoZWRGdW5jdGlvbjwobmFtZTogc3RyaW5nKSA9PiBEZXNjcmliZVNPYmplY3RSZXN1bHQ+O1xuICAvLyBkZXNjcmliZUdsb2JhbDogKCkgPT4gUHJvbWlzZTxEZXNjcmliZUdsb2JhbFJlc3VsdD47XG4gIGRlc2NyaWJlR2xvYmFsJDogQ2FjaGVkRnVuY3Rpb248KCkgPT4gUHJvbWlzZTxEZXNjcmliZUdsb2JhbFJlc3VsdD4+O1xuICBkZXNjcmliZUdsb2JhbCQkOiBDYWNoZWRGdW5jdGlvbjwoKSA9PiBEZXNjcmliZUdsb2JhbFJlc3VsdD47XG5cbiAgLy8gQVBJIGxpYnMgYXJlIG5vdCBpbnN0YW50aWF0ZWQgaGVyZSBzbyB0aGF0IGNvcmUgbW9kdWxlIHRvIHJlbWFpbiB3aXRob3V0IGRlcGVuZGVuY2llcyB0byB0aGVtXG4gIC8vIEl0IGlzIHJlc3BvbnNpYmxlIGZvciBkZXZlbHBlcnMgdG8gaW1wb3J0IGFwaSBsaWJzIGV4cGxpY2l0bHkgaWYgdGhleSBhcmUgdXNpbmcgJ2pzZm9yY2UvY29yZScgaW5zdGVhZCBvZiAnanNmb3JjZScuXG4gIGdldCBhbmFseXRpY3MoKTogQW5hbHl0aWNzPFM+IHtcbiAgICByZXR1cm4gcmFpc2VOb01vZHVsZUVycm9yKCdhbmFseXRpY3MnKTtcbiAgfVxuXG4gIGdldCBhcGV4KCk6IEFwZXg8Uz4ge1xuICAgIHJldHVybiByYWlzZU5vTW9kdWxlRXJyb3IoJ2FwZXgnKTtcbiAgfVxuXG4gIGdldCBidWxrKCk6IEJ1bGs8Uz4ge1xuICAgIHJldHVybiByYWlzZU5vTW9kdWxlRXJyb3IoJ2J1bGsnKTtcbiAgfVxuXG4gIGdldCBjaGF0dGVyKCk6IENoYXR0ZXI8Uz4ge1xuICAgIHJldHVybiByYWlzZU5vTW9kdWxlRXJyb3IoJ2NoYXR0ZXInKTtcbiAgfVxuXG4gIGdldCBtZXRhZGF0YSgpOiBNZXRhZGF0YTxTPiB7XG4gICAgcmV0dXJuIHJhaXNlTm9Nb2R1bGVFcnJvcignbWV0YWRhdGEnKTtcbiAgfVxuXG4gIGdldCBzb2FwKCk6IFNvYXBBcGk8Uz4ge1xuICAgIHJldHVybiByYWlzZU5vTW9kdWxlRXJyb3IoJ3NvYXAnKTtcbiAgfVxuXG4gIGdldCBzdHJlYW1pbmcoKTogU3RyZWFtaW5nPFM+IHtcbiAgICByZXR1cm4gcmFpc2VOb01vZHVsZUVycm9yKCdzdHJlYW1pbmcnKTtcbiAgfVxuXG4gIGdldCB0b29saW5nKCk6IFRvb2xpbmc8Uz4ge1xuICAgIHJldHVybiByYWlzZU5vTW9kdWxlRXJyb3IoJ3Rvb2xpbmcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb25uZWN0aW9uQ29uZmlnPFM+ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvZ2luVXJsLFxuICAgICAgaW5zdGFuY2VVcmwsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgb2F1dGgyLFxuICAgICAgbWF4UmVxdWVzdCxcbiAgICAgIGxvZ0xldmVsLFxuICAgICAgcHJveHlVcmwsXG4gICAgICBodHRwUHJveHksXG4gICAgfSA9IGNvbmZpZztcbiAgICB0aGlzLmxvZ2luVXJsID0gbG9naW5VcmwgfHwgZGVmYXVsdENvbm5lY3Rpb25Db25maWcubG9naW5Vcmw7XG4gICAgdGhpcy5pbnN0YW5jZVVybCA9IGluc3RhbmNlVXJsIHx8IGRlZmF1bHRDb25uZWN0aW9uQ29uZmlnLmluc3RhbmNlVXJsO1xuICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb24gfHwgZGVmYXVsdENvbm5lY3Rpb25Db25maWcudmVyc2lvbjtcbiAgICB0aGlzLm9hdXRoMiA9XG4gICAgICBvYXV0aDIgaW5zdGFuY2VvZiBPQXV0aDJcbiAgICAgICAgPyBvYXV0aDJcbiAgICAgICAgOiBuZXcgT0F1dGgyKHtcbiAgICAgICAgICAgIGxvZ2luVXJsOiB0aGlzLmxvZ2luVXJsLFxuICAgICAgICAgICAgcHJveHlVcmwsXG4gICAgICAgICAgICBodHRwUHJveHksXG4gICAgICAgICAgICAuLi5vYXV0aDIsXG4gICAgICAgICAgfSk7XG4gICAgbGV0IHJlZnJlc2hGbiA9IGNvbmZpZy5yZWZyZXNoRm47XG4gICAgaWYgKCFyZWZyZXNoRm4gJiYgdGhpcy5vYXV0aDIuY2xpZW50SWQpIHtcbiAgICAgIHJlZnJlc2hGbiA9IG9hdXRoUmVmcmVzaEZuO1xuICAgIH1cbiAgICBpZiAocmVmcmVzaEZuKSB7XG4gICAgICB0aGlzLl9yZWZyZXNoRGVsZWdhdGUgPSBuZXcgU2Vzc2lvblJlZnJlc2hEZWxlZ2F0ZSh0aGlzLCByZWZyZXNoRm4pO1xuICAgIH1cbiAgICB0aGlzLl9tYXhSZXF1ZXN0ID0gbWF4UmVxdWVzdCB8fCBkZWZhdWx0Q29ubmVjdGlvbkNvbmZpZy5tYXhSZXF1ZXN0O1xuICAgIHRoaXMuX2xvZ2dlciA9IGxvZ0xldmVsXG4gICAgICA/IENvbm5lY3Rpb24uX2xvZ2dlci5jcmVhdGVJbnN0YW5jZShsb2dMZXZlbClcbiAgICAgIDogQ29ubmVjdGlvbi5fbG9nZ2VyO1xuICAgIHRoaXMuX2xvZ0xldmVsID0gbG9nTGV2ZWw7XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gcHJveHlVcmxcbiAgICAgID8gbmV3IFhkUHJveHlUcmFuc3BvcnQocHJveHlVcmwpXG4gICAgICA6IGh0dHBQcm94eVxuICAgICAgPyBuZXcgSHR0cFByb3h5VHJhbnNwb3J0KGh0dHBQcm94eSlcbiAgICAgIDogbmV3IFRyYW5zcG9ydCgpO1xuICAgIHRoaXMuX2NhbGxPcHRpb25zID0gY29uZmlnLmNhbGxPcHRpb25zO1xuICAgIHRoaXMuY2FjaGUgPSBuZXcgQ2FjaGUoKTtcbiAgICBjb25zdCBkZXNjcmliZUNhY2hlS2V5ID0gKHR5cGU/OiBzdHJpbmcpID0+XG4gICAgICB0eXBlID8gYGRlc2NyaWJlLiR7dHlwZX1gIDogJ2Rlc2NyaWJlJztcbiAgICBjb25zdCBkZXNjcmliZSA9IENvbm5lY3Rpb24ucHJvdG90eXBlLmRlc2NyaWJlO1xuICAgIHRoaXMuZGVzY3JpYmUgPSB0aGlzLmNhY2hlLmNyZWF0ZUNhY2hlZEZ1bmN0aW9uKGRlc2NyaWJlLCB0aGlzLCB7XG4gICAgICBrZXk6IGRlc2NyaWJlQ2FjaGVLZXksXG4gICAgICBzdHJhdGVneTogJ05PQ0FDSEUnLFxuICAgIH0pO1xuICAgIHRoaXMuZGVzY3JpYmUkID0gdGhpcy5jYWNoZS5jcmVhdGVDYWNoZWRGdW5jdGlvbihkZXNjcmliZSwgdGhpcywge1xuICAgICAga2V5OiBkZXNjcmliZUNhY2hlS2V5LFxuICAgICAgc3RyYXRlZ3k6ICdISVQnLFxuICAgIH0pO1xuICAgIHRoaXMuZGVzY3JpYmUkJCA9IHRoaXMuY2FjaGUuY3JlYXRlQ2FjaGVkRnVuY3Rpb24oZGVzY3JpYmUsIHRoaXMsIHtcbiAgICAgIGtleTogZGVzY3JpYmVDYWNoZUtleSxcbiAgICAgIHN0cmF0ZWd5OiAnSU1NRURJQVRFJyxcbiAgICB9KSBhcyBhbnk7XG4gICAgdGhpcy5kZXNjcmliZVNPYmplY3QgPSB0aGlzLmRlc2NyaWJlO1xuICAgIHRoaXMuZGVzY3JpYmVTT2JqZWN0JCA9IHRoaXMuZGVzY3JpYmUkO1xuICAgIHRoaXMuZGVzY3JpYmVTT2JqZWN0JCQgPSB0aGlzLmRlc2NyaWJlJCQ7XG4gICAgY29uc3QgZGVzY3JpYmVHbG9iYWwgPSBDb25uZWN0aW9uLnByb3RvdHlwZS5kZXNjcmliZUdsb2JhbDtcbiAgICB0aGlzLmRlc2NyaWJlR2xvYmFsID0gdGhpcy5jYWNoZS5jcmVhdGVDYWNoZWRGdW5jdGlvbihcbiAgICAgIGRlc2NyaWJlR2xvYmFsLFxuICAgICAgdGhpcyxcbiAgICAgIHsga2V5OiAnZGVzY3JpYmVHbG9iYWwnLCBzdHJhdGVneTogJ05PQ0FDSEUnIH0sXG4gICAgKTtcbiAgICB0aGlzLmRlc2NyaWJlR2xvYmFsJCA9IHRoaXMuY2FjaGUuY3JlYXRlQ2FjaGVkRnVuY3Rpb24oXG4gICAgICBkZXNjcmliZUdsb2JhbCxcbiAgICAgIHRoaXMsXG4gICAgICB7IGtleTogJ2Rlc2NyaWJlR2xvYmFsJywgc3RyYXRlZ3k6ICdISVQnIH0sXG4gICAgKTtcbiAgICB0aGlzLmRlc2NyaWJlR2xvYmFsJCQgPSB0aGlzLmNhY2hlLmNyZWF0ZUNhY2hlZEZ1bmN0aW9uKFxuICAgICAgZGVzY3JpYmVHbG9iYWwsXG4gICAgICB0aGlzLFxuICAgICAgeyBrZXk6ICdkZXNjcmliZUdsb2JhbCcsIHN0cmF0ZWd5OiAnSU1NRURJQVRFJyB9LFxuICAgICkgYXMgYW55O1xuICAgIGNvbnN0IHtcbiAgICAgIGFjY2Vzc1Rva2VuLFxuICAgICAgcmVmcmVzaFRva2VuLFxuICAgICAgc2Vzc2lvbklkLFxuICAgICAgc2VydmVyVXJsLFxuICAgICAgc2lnbmVkUmVxdWVzdCxcbiAgICB9ID0gY29uZmlnO1xuICAgIHRoaXMuX2VzdGFibGlzaCh7XG4gICAgICBhY2Nlc3NUb2tlbixcbiAgICAgIHJlZnJlc2hUb2tlbixcbiAgICAgIGluc3RhbmNlVXJsLFxuICAgICAgc2Vzc2lvbklkLFxuICAgICAgc2VydmVyVXJsLFxuICAgICAgc2lnbmVkUmVxdWVzdCxcbiAgICB9KTtcblxuICAgIGpzZm9yY2UuZW1pdCgnY29ubmVjdGlvbjpuZXcnLCB0aGlzKTtcbiAgfVxuXG4gIC8qIEBwcml2YXRlICovXG4gIF9lc3RhYmxpc2gob3B0aW9uczogQ29ubmVjdGlvbkVzdGFibGlzaE9wdGlvbnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBhY2Nlc3NUb2tlbixcbiAgICAgIHJlZnJlc2hUb2tlbixcbiAgICAgIGluc3RhbmNlVXJsLFxuICAgICAgc2Vzc2lvbklkLFxuICAgICAgc2VydmVyVXJsLFxuICAgICAgc2lnbmVkUmVxdWVzdCxcbiAgICAgIHVzZXJJbmZvLFxuICAgIH0gPSBvcHRpb25zO1xuICAgIHRoaXMuaW5zdGFuY2VVcmwgPSBzZXJ2ZXJVcmxcbiAgICAgID8gc2VydmVyVXJsLnNwbGl0KCcvJykuc2xpY2UoMCwgMykuam9pbignLycpXG4gICAgICA6IGluc3RhbmNlVXJsIHx8IHRoaXMuaW5zdGFuY2VVcmw7XG4gICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHNlc3Npb25JZCB8fCBhY2Nlc3NUb2tlbiB8fCB0aGlzLmFjY2Vzc1Rva2VuO1xuICAgIHRoaXMucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuIHx8IHRoaXMucmVmcmVzaFRva2VuO1xuICAgIGlmICh0aGlzLnJlZnJlc2hUb2tlbiAmJiAhdGhpcy5fcmVmcmVzaERlbGVnYXRlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdSZWZyZXNoIHRva2VuIGlzIHNwZWNpZmllZCB3aXRob3V0IG9hdXRoMiBjbGllbnQgaW5mb3JtYXRpb24gb3IgcmVmcmVzaCBmdW5jdGlvbicsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBzaWduZWRSZXF1ZXN0T2JqZWN0ID1cbiAgICAgIHNpZ25lZFJlcXVlc3QgJiYgcGFyc2VTaWduZWRSZXF1ZXN0KHNpZ25lZFJlcXVlc3QpO1xuICAgIGlmIChzaWduZWRSZXF1ZXN0T2JqZWN0KSB7XG4gICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gc2lnbmVkUmVxdWVzdE9iamVjdC5jbGllbnQub2F1dGhUb2tlbjtcbiAgICAgIGlmIChDYW52YXNUcmFuc3BvcnQuc3VwcG9ydGVkKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IG5ldyBDYW52YXNUcmFuc3BvcnQoc2lnbmVkUmVxdWVzdE9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudXNlckluZm8gPSB1c2VySW5mbyB8fCB0aGlzLnVzZXJJbmZvO1xuICAgIHRoaXMuX3Nlc3Npb25UeXBlID0gc2Vzc2lvbklkID8gJ3NvYXAnIDogJ29hdXRoMic7XG4gICAgdGhpcy5fcmVzZXRJbnN0YW5jZSgpO1xuICB9XG5cbiAgLyogQHByaXZlYXRlICovXG4gIF9jbGVhclNlc3Npb24oKSB7XG4gICAgdGhpcy5hY2Nlc3NUb2tlbiA9IG51bGw7XG4gICAgdGhpcy5yZWZyZXNoVG9rZW4gPSBudWxsO1xuICAgIHRoaXMuaW5zdGFuY2VVcmwgPSBkZWZhdWx0Q29ubmVjdGlvbkNvbmZpZy5pbnN0YW5jZVVybDtcbiAgICB0aGlzLnVzZXJJbmZvID0gbnVsbDtcbiAgICB0aGlzLl9zZXNzaW9uVHlwZSA9IG51bGw7XG4gIH1cblxuICAvKiBAcHJpdmVhdGUgKi9cbiAgX3Jlc2V0SW5zdGFuY2UoKSB7XG4gICAgdGhpcy5saW1pdEluZm8gPSB7fTtcbiAgICB0aGlzLnNvYmplY3RzID0ge307XG4gICAgLy8gVE9ETyBpbXBsIGNhY2hlXG4gICAgdGhpcy5jYWNoZS5jbGVhcigpO1xuICAgIHRoaXMuY2FjaGUuZ2V0KCdkZXNjcmliZUdsb2JhbCcpLnJlbW92ZUFsbExpc3RlbmVycygndmFsdWUnKTtcbiAgICB0aGlzLmNhY2hlLmdldCgnZGVzY3JpYmVHbG9iYWwnKS5vbigndmFsdWUnLCAoeyByZXN1bHQgfSkgPT4ge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBmb3IgKGNvbnN0IHNvIG9mIHJlc3VsdC5zb2JqZWN0cykge1xuICAgICAgICAgIHRoaXMuc29iamVjdChzby5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIC8qXG4gICAgaWYgKHRoaXMudG9vbGluZykge1xuICAgICAgdGhpcy50b29saW5nLl9yZXNldEluc3RhbmNlKCk7XG4gICAgfVxuICAgICovXG4gIH1cblxuICAvKipcbiAgICogQXV0aG9yaXplICh1c2luZyBvYXV0aDIgd2ViIHNlcnZlciBmbG93KVxuICAgKi9cbiAgYXN5bmMgYXV0aG9yaXplKFxuICAgIGNvZGU6IHN0cmluZyxcbiAgICBwYXJhbXM6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9ID0ge30sXG4gICk6IFByb21pc2U8VXNlckluZm8+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLm9hdXRoMi5yZXF1ZXN0VG9rZW4oY29kZSwgcGFyYW1zKTtcbiAgICBjb25zdCB1c2VySW5mbyA9IHBhcnNlSWRVcmwocmVzLmlkKTtcbiAgICB0aGlzLl9lc3RhYmxpc2goe1xuICAgICAgaW5zdGFuY2VVcmw6IHJlcy5pbnN0YW5jZV91cmwsXG4gICAgICBhY2Nlc3NUb2tlbjogcmVzLmFjY2Vzc190b2tlbixcbiAgICAgIHJlZnJlc2hUb2tlbjogcmVzLnJlZnJlc2hfdG9rZW4sXG4gICAgICB1c2VySW5mbyxcbiAgICB9KTtcbiAgICB0aGlzLl9sb2dnZXIuZGVidWcoXG4gICAgICBgPGxvZ2luPiBjb21wbGV0ZWQuIHVzZXIgaWQgPSAke3VzZXJJbmZvLmlkfSwgb3JnIGlkID0gJHt1c2VySW5mby5vcmdhbml6YXRpb25JZH1gLFxuICAgICk7XG4gICAgcmV0dXJuIHVzZXJJbmZvO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBhc3luYyBsb2dpbih1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxVc2VySW5mbz4ge1xuICAgIHRoaXMuX3JlZnJlc2hEZWxlZ2F0ZSA9IG5ldyBTZXNzaW9uUmVmcmVzaERlbGVnYXRlKFxuICAgICAgdGhpcyxcbiAgICAgIGNyZWF0ZVVzZXJuYW1lUGFzc3dvcmRSZWZyZXNoRm4odXNlcm5hbWUsIHBhc3N3b3JkKSxcbiAgICApO1xuICAgIGlmICh0aGlzLm9hdXRoMiAmJiB0aGlzLm9hdXRoMi5jbGllbnRJZCAmJiB0aGlzLm9hdXRoMi5jbGllbnRTZWNyZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvZ2luQnlPQXV0aDIodXNlcm5hbWUsIHBhc3N3b3JkKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubG9naW5CeVNvYXAodXNlcm5hbWUsIHBhc3N3b3JkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dpbiBieSBPQXV0aDIgdXNlcm5hbWUgJiBwYXNzd29yZCBmbG93XG4gICAqL1xuICBhc3luYyBsb2dpbkJ5T0F1dGgyKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPFVzZXJJbmZvPiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5vYXV0aDIuYXV0aGVudGljYXRlKHVzZXJuYW1lLCBwYXNzd29yZCk7XG4gICAgY29uc3QgdXNlckluZm8gPSBwYXJzZUlkVXJsKHJlcy5pZCk7XG4gICAgdGhpcy5fZXN0YWJsaXNoKHtcbiAgICAgIGluc3RhbmNlVXJsOiByZXMuaW5zdGFuY2VfdXJsLFxuICAgICAgYWNjZXNzVG9rZW46IHJlcy5hY2Nlc3NfdG9rZW4sXG4gICAgICB1c2VySW5mbyxcbiAgICB9KTtcbiAgICB0aGlzLl9sb2dnZXIuaW5mbyhcbiAgICAgIGA8bG9naW4+IGNvbXBsZXRlZC4gdXNlciBpZCA9ICR7dXNlckluZm8uaWR9LCBvcmcgaWQgPSAke3VzZXJJbmZvLm9yZ2FuaXphdGlvbklkfWAsXG4gICAgKTtcbiAgICByZXR1cm4gdXNlckluZm87XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIGFzeW5jIGxvZ2luQnlTb2FwKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPFVzZXJJbmZvPiB7XG4gICAgaWYgKCF1c2VybmFtZSB8fCAhcGFzc3dvcmQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ25vIHVzZXJuYW1lIHBhc3N3b3JkIGdpdmVuJykpO1xuICAgIH1cbiAgICBjb25zdCBib2R5ID0gW1xuICAgICAgJzxzZTpFbnZlbG9wZSB4bWxuczpzZT1cImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvXCI+JyxcbiAgICAgICc8c2U6SGVhZGVyLz4nLFxuICAgICAgJzxzZTpCb2R5PicsXG4gICAgICAnPGxvZ2luIHhtbG5zPVwidXJuOnBhcnRuZXIuc29hcC5zZm9yY2UuY29tXCI+JyxcbiAgICAgIGA8dXNlcm5hbWU+JHtlc2ModXNlcm5hbWUpfTwvdXNlcm5hbWU+YCxcbiAgICAgIGA8cGFzc3dvcmQ+JHtlc2MocGFzc3dvcmQpfTwvcGFzc3dvcmQ+YCxcbiAgICAgICc8L2xvZ2luPicsXG4gICAgICAnPC9zZTpCb2R5PicsXG4gICAgICAnPC9zZTpFbnZlbG9wZT4nLFxuICAgIF0uam9pbignJyk7XG5cbiAgICBjb25zdCBzb2FwTG9naW5FbmRwb2ludCA9IFtcbiAgICAgIHRoaXMubG9naW5VcmwsXG4gICAgICAnc2VydmljZXMvU29hcC91JyxcbiAgICAgIHRoaXMudmVyc2lvbixcbiAgICBdLmpvaW4oJy8nKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuX3RyYW5zcG9ydC5odHRwUmVxdWVzdCh7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybDogc29hcExvZ2luRW5kcG9pbnQsXG4gICAgICBib2R5LFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQveG1sJyxcbiAgICAgICAgU09BUEFjdGlvbjogJ1wiXCInLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBsZXQgbTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSA0MDApIHtcbiAgICAgIG0gPSByZXNwb25zZS5ib2R5Lm1hdGNoKC88ZmF1bHRzdHJpbmc+KFtePF0rKTxcXC9mYXVsdHN0cmluZz4vKTtcbiAgICAgIGNvbnN0IGZhdWx0c3RyaW5nID0gbSAmJiBtWzFdO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZhdWx0c3RyaW5nIHx8IHJlc3BvbnNlLmJvZHkpO1xuICAgIH1cbiAgICB0aGlzLl9sb2dnZXIuZGVidWcoYFNPQVAgcmVzcG9uc2UgPSAke3Jlc3BvbnNlLmJvZHl9YCk7XG4gICAgbSA9IHJlc3BvbnNlLmJvZHkubWF0Y2goLzxzZXJ2ZXJVcmw+KFtePF0rKTxcXC9zZXJ2ZXJVcmw+Lyk7XG4gICAgY29uc3Qgc2VydmVyVXJsID0gbSAmJiBtWzFdO1xuICAgIG0gPSByZXNwb25zZS5ib2R5Lm1hdGNoKC88c2Vzc2lvbklkPihbXjxdKyk8XFwvc2Vzc2lvbklkPi8pO1xuICAgIGNvbnN0IHNlc3Npb25JZCA9IG0gJiYgbVsxXTtcbiAgICBtID0gcmVzcG9uc2UuYm9keS5tYXRjaCgvPHVzZXJJZD4oW148XSspPFxcL3VzZXJJZD4vKTtcbiAgICBjb25zdCB1c2VySWQgPSBtICYmIG1bMV07XG4gICAgbSA9IHJlc3BvbnNlLmJvZHkubWF0Y2goLzxvcmdhbml6YXRpb25JZD4oW148XSspPFxcL29yZ2FuaXphdGlvbklkPi8pO1xuICAgIGNvbnN0IG9yZ2FuaXphdGlvbklkID0gbSAmJiBtWzFdO1xuICAgIGlmICghc2VydmVyVXJsIHx8ICFzZXNzaW9uSWQgfHwgIXVzZXJJZCB8fCAhb3JnYW5pemF0aW9uSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2NvdWxkIG5vdCBleHRyYWN0IHNlc3Npb24gaW5mb3JtYXRpb24gZnJvbSBsb2dpbiByZXNwb25zZScsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBpZFVybCA9IFt0aGlzLmxvZ2luVXJsLCAnaWQnLCBvcmdhbml6YXRpb25JZCwgdXNlcklkXS5qb2luKCcvJyk7XG4gICAgY29uc3QgdXNlckluZm8gPSB7IGlkOiB1c2VySWQsIG9yZ2FuaXphdGlvbklkLCB1cmw6IGlkVXJsIH07XG4gICAgdGhpcy5fZXN0YWJsaXNoKHtcbiAgICAgIHNlcnZlclVybDogc2VydmVyVXJsLnNwbGl0KCcvJykuc2xpY2UoMCwgMykuam9pbignLycpLFxuICAgICAgc2Vzc2lvbklkLFxuICAgICAgdXNlckluZm8sXG4gICAgfSk7XG4gICAgdGhpcy5fbG9nZ2VyLmluZm8oXG4gICAgICBgPGxvZ2luPiBjb21wbGV0ZWQuIHVzZXIgaWQgPSAke3VzZXJJZH0sIG9yZyBpZCA9ICR7b3JnYW5pemF0aW9uSWR9YCxcbiAgICApO1xuICAgIHJldHVybiB1c2VySW5mbztcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dvdXQgdGhlIGN1cnJlbnQgc2Vzc2lvblxuICAgKi9cbiAgYXN5bmMgbG9nb3V0KHJldm9rZT86IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLl9yZWZyZXNoRGVsZWdhdGUgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHRoaXMuX3Nlc3Npb25UeXBlID09PSAnb2F1dGgyJykge1xuICAgICAgcmV0dXJuIHRoaXMubG9nb3V0QnlPQXV0aDIocmV2b2tlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubG9nb3V0QnlTb2FwKHJldm9rZSk7XG4gIH1cblxuICAvKipcbiAgICogTG9nb3V0IHRoZSBjdXJyZW50IHNlc3Npb24gYnkgcmV2b2tpbmcgYWNjZXNzIHRva2VuIHZpYSBPQXV0aDIgc2Vzc2lvbiByZXZva2VcbiAgICovXG4gIGFzeW5jIGxvZ291dEJ5T0F1dGgyKHJldm9rZT86IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB0b2tlbiA9IHJldm9rZSA/IHRoaXMucmVmcmVzaFRva2VuIDogdGhpcy5hY2Nlc3NUb2tlbjtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGF3YWl0IHRoaXMub2F1dGgyLnJldm9rZVRva2VuKHRva2VuKTtcbiAgICB9XG4gICAgLy8gRGVzdHJveSB0aGUgc2Vzc2lvbiBib3VuZCB0byB0aGlzIGNvbm5lY3Rpb25cbiAgICB0aGlzLl9jbGVhclNlc3Npb24oKTtcbiAgICB0aGlzLl9yZXNldEluc3RhbmNlKCk7XG4gIH1cblxuICAvKipcbiAgICogTG9nb3V0IHRoZSBzZXNzaW9uIGJ5IHVzaW5nIFNPQVAgd2ViIHNlcnZpY2UgQVBJXG4gICAqL1xuICBhc3luYyBsb2dvdXRCeVNvYXAocmV2b2tlPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGJvZHkgPSBbXG4gICAgICAnPHNlOkVudmVsb3BlIHhtbG5zOnNlPVwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS9cIj4nLFxuICAgICAgJzxzZTpIZWFkZXI+JyxcbiAgICAgICc8U2Vzc2lvbkhlYWRlciB4bWxucz1cInVybjpwYXJ0bmVyLnNvYXAuc2ZvcmNlLmNvbVwiPicsXG4gICAgICBgPHNlc3Npb25JZD4ke2VzYyhcbiAgICAgICAgcmV2b2tlID8gdGhpcy5yZWZyZXNoVG9rZW4gOiB0aGlzLmFjY2Vzc1Rva2VuLFxuICAgICAgKX08L3Nlc3Npb25JZD5gLFxuICAgICAgJzwvU2Vzc2lvbkhlYWRlcj4nLFxuICAgICAgJzwvc2U6SGVhZGVyPicsXG4gICAgICAnPHNlOkJvZHk+JyxcbiAgICAgICc8bG9nb3V0IHhtbG5zPVwidXJuOnBhcnRuZXIuc29hcC5zZm9yY2UuY29tXCIvPicsXG4gICAgICAnPC9zZTpCb2R5PicsXG4gICAgICAnPC9zZTpFbnZlbG9wZT4nLFxuICAgIF0uam9pbignJyk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl90cmFuc3BvcnQuaHR0cFJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICB1cmw6IFt0aGlzLmluc3RhbmNlVXJsLCAnc2VydmljZXMvU29hcC91JywgdGhpcy52ZXJzaW9uXS5qb2luKCcvJyksXG4gICAgICBib2R5LFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQveG1sJyxcbiAgICAgICAgU09BUEFjdGlvbjogJ1wiXCInLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLl9sb2dnZXIuZGVidWcoXG4gICAgICBgU09BUCBzdGF0dXNDb2RlID0gJHtyZXNwb25zZS5zdGF0dXNDb2RlfSwgcmVzcG9uc2UgPSAke3Jlc3BvbnNlLmJvZHl9YCxcbiAgICApO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID49IDQwMCkge1xuICAgICAgY29uc3QgbSA9IHJlc3BvbnNlLmJvZHkubWF0Y2goLzxmYXVsdHN0cmluZz4oW148XSspPFxcL2ZhdWx0c3RyaW5nPi8pO1xuICAgICAgY29uc3QgZmF1bHRzdHJpbmcgPSBtICYmIG1bMV07XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZmF1bHRzdHJpbmcgfHwgcmVzcG9uc2UuYm9keSk7XG4gICAgfVxuICAgIC8vIERlc3Ryb3kgdGhlIHNlc3Npb24gYm91bmQgdG8gdGhpcyBjb25uZWN0aW9uXG4gICAgdGhpcy5fY2xlYXJTZXNzaW9uKCk7XG4gICAgdGhpcy5fcmVzZXRJbnN0YW5jZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgUkVTVCBBUEkgcmVxdWVzdCB3aXRoIGdpdmVuIEhUVFAgcmVxdWVzdCBpbmZvLCB3aXRoIGNvbm5lY3RlZCBzZXNzaW9uIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiBFbmRwb2ludCBVUkwgY2FuIGJlIGFic29sdXRlIFVSTCAoJ2h0dHBzOi8vbmExLnNhbGVzZm9yY2UuY29tL3NlcnZpY2VzL2RhdGEvdjMyLjAvc29iamVjdHMvQWNjb3VudC9kZXNjcmliZScpXG4gICAqICwgcmVsYXRpdmUgcGF0aCBmcm9tIHJvb3QgKCcvc2VydmljZXMvZGF0YS92MzIuMC9zb2JqZWN0cy9BY2NvdW50L2Rlc2NyaWJlJylcbiAgICogLCBvciByZWxhdGl2ZSBwYXRoIGZyb20gdmVyc2lvbiByb290ICgnL3NvYmplY3RzL0FjY291bnQvZGVzY3JpYmUnKS5cbiAgICovXG4gIHJlcXVlc3Q8UiA9IHVua25vd24+KFxuICAgIHJlcXVlc3Q6IHN0cmluZyB8IEh0dHBSZXF1ZXN0LFxuICAgIG9wdGlvbnM6IE9iamVjdCA9IHt9LFxuICApOiBTdHJlYW1Qcm9taXNlPFI+IHtcbiAgICAvLyBpZiByZXF1ZXN0IGlzIHNpbXBsZSBzdHJpbmcsIHJlZ2FyZCBpdCBhcyB1cmwgaW4gR0VUIG1ldGhvZFxuICAgIGxldCByZXF1ZXN0XzogSHR0cFJlcXVlc3QgPVxuICAgICAgdHlwZW9mIHJlcXVlc3QgPT09ICdzdHJpbmcnID8geyBtZXRob2Q6ICdHRVQnLCB1cmw6IHJlcXVlc3QgfSA6IHJlcXVlc3Q7XG4gICAgLy8gaWYgdXJsIGlzIGdpdmVuIGluIHJlbGF0aXZlIHBhdGgsIHByZXBlbmQgYmFzZSB1cmwgb3IgaW5zdGFuY2UgdXJsIGJlZm9yZS5cbiAgICByZXF1ZXN0XyA9IHtcbiAgICAgIC4uLnJlcXVlc3RfLFxuICAgICAgdXJsOiB0aGlzLl9ub3JtYWxpemVVcmwocmVxdWVzdF8udXJsKSxcbiAgICB9O1xuICAgIGNvbnN0IGh0dHBBcGkgPSBuZXcgSHR0cEFwaSh0aGlzLCBvcHRpb25zKTtcbiAgICAvLyBsb2cgYXBpIHVzYWdlIGFuZCBpdHMgcXVvdGFcbiAgICBodHRwQXBpLm9uKCdyZXNwb25zZScsIChyZXNwb25zZTogSHR0cFJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UuaGVhZGVycyAmJiByZXNwb25zZS5oZWFkZXJzWydzZm9yY2UtbGltaXQtaW5mbyddKSB7XG4gICAgICAgIGNvbnN0IGFwaVVzYWdlID0gcmVzcG9uc2UuaGVhZGVyc1snc2ZvcmNlLWxpbWl0LWluZm8nXS5tYXRjaChcbiAgICAgICAgICAvYXBpLXVzYWdlPShcXGQrKVxcLyhcXGQrKS8sXG4gICAgICAgICk7XG4gICAgICAgIGlmIChhcGlVc2FnZSkge1xuICAgICAgICAgIHRoaXMubGltaXRJbmZvID0ge1xuICAgICAgICAgICAgYXBpVXNhZ2U6IHtcbiAgICAgICAgICAgICAgdXNlZDogcGFyc2VJbnQoYXBpVXNhZ2VbMV0sIDEwKSxcbiAgICAgICAgICAgICAgbGltaXQ6IHBhcnNlSW50KGFwaVVzYWdlWzJdLCAxMCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaHR0cEFwaS5yZXF1ZXN0PFI+KHJlcXVlc3RfKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIEhUVFAgR0VUIHJlcXVlc3RcbiAgICpcbiAgICogRW5kcG9pbnQgVVJMIGNhbiBiZSBhYnNvbHV0ZSBVUkwgKCdodHRwczovL25hMS5zYWxlc2ZvcmNlLmNvbS9zZXJ2aWNlcy9kYXRhL3YzMi4wL3NvYmplY3RzL0FjY291bnQvZGVzY3JpYmUnKVxuICAgKiAsIHJlbGF0aXZlIHBhdGggZnJvbSByb290ICgnL3NlcnZpY2VzL2RhdGEvdjMyLjAvc29iamVjdHMvQWNjb3VudC9kZXNjcmliZScpXG4gICAqICwgb3IgcmVsYXRpdmUgcGF0aCBmcm9tIHZlcnNpb24gcm9vdCAoJy9zb2JqZWN0cy9BY2NvdW50L2Rlc2NyaWJlJykuXG4gICAqL1xuICByZXF1ZXN0R2V0PFIgPSB1bmtub3duPih1cmw6IHN0cmluZywgb3B0aW9ucz86IE9iamVjdCkge1xuICAgIGNvbnN0IHJlcXVlc3Q6IEh0dHBSZXF1ZXN0ID0geyBtZXRob2Q6ICdHRVQnLCB1cmwgfTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PFI+KHJlcXVlc3QsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgSFRUUCBQT1NUIHJlcXVlc3Qgd2l0aCBKU09OIGJvZHksIHdpdGggY29ubmVjdGVkIHNlc3Npb24gaW5mb3JtYXRpb25cbiAgICpcbiAgICogRW5kcG9pbnQgVVJMIGNhbiBiZSBhYnNvbHV0ZSBVUkwgKCdodHRwczovL25hMS5zYWxlc2ZvcmNlLmNvbS9zZXJ2aWNlcy9kYXRhL3YzMi4wL3NvYmplY3RzL0FjY291bnQvZGVzY3JpYmUnKVxuICAgKiAsIHJlbGF0aXZlIHBhdGggZnJvbSByb290ICgnL3NlcnZpY2VzL2RhdGEvdjMyLjAvc29iamVjdHMvQWNjb3VudC9kZXNjcmliZScpXG4gICAqICwgb3IgcmVsYXRpdmUgcGF0aCBmcm9tIHZlcnNpb24gcm9vdCAoJy9zb2JqZWN0cy9BY2NvdW50L2Rlc2NyaWJlJykuXG4gICAqL1xuICByZXF1ZXN0UG9zdDxSID0gdW5rbm93bj4odXJsOiBzdHJpbmcsIGJvZHk6IE9iamVjdCwgb3B0aW9ucz86IE9iamVjdCkge1xuICAgIGNvbnN0IHJlcXVlc3Q6IEh0dHBSZXF1ZXN0ID0ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICB1cmwsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcbiAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxSPihyZXF1ZXN0LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIEhUVFAgUFVUIHJlcXVlc3Qgd2l0aCBKU09OIGJvZHksIHdpdGggY29ubmVjdGVkIHNlc3Npb24gaW5mb3JtYXRpb25cbiAgICpcbiAgICogRW5kcG9pbnQgVVJMIGNhbiBiZSBhYnNvbHV0ZSBVUkwgKCdodHRwczovL25hMS5zYWxlc2ZvcmNlLmNvbS9zZXJ2aWNlcy9kYXRhL3YzMi4wL3NvYmplY3RzL0FjY291bnQvZGVzY3JpYmUnKVxuICAgKiAsIHJlbGF0aXZlIHBhdGggZnJvbSByb290ICgnL3NlcnZpY2VzL2RhdGEvdjMyLjAvc29iamVjdHMvQWNjb3VudC9kZXNjcmliZScpXG4gICAqICwgb3IgcmVsYXRpdmUgcGF0aCBmcm9tIHZlcnNpb24gcm9vdCAoJy9zb2JqZWN0cy9BY2NvdW50L2Rlc2NyaWJlJykuXG4gICAqL1xuICByZXF1ZXN0UHV0PFI+KHVybDogc3RyaW5nLCBib2R5OiBPYmplY3QsIG9wdGlvbnM/OiBPYmplY3QpIHtcbiAgICBjb25zdCByZXF1ZXN0OiBIdHRwUmVxdWVzdCA9IHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICB1cmwsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcbiAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxSPihyZXF1ZXN0LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIEhUVFAgUEFUQ0ggcmVxdWVzdCB3aXRoIEpTT04gYm9keVxuICAgKlxuICAgKiBFbmRwb2ludCBVUkwgY2FuIGJlIGFic29sdXRlIFVSTCAoJ2h0dHBzOi8vbmExLnNhbGVzZm9yY2UuY29tL3NlcnZpY2VzL2RhdGEvdjMyLjAvc29iamVjdHMvQWNjb3VudC9kZXNjcmliZScpXG4gICAqICwgcmVsYXRpdmUgcGF0aCBmcm9tIHJvb3QgKCcvc2VydmljZXMvZGF0YS92MzIuMC9zb2JqZWN0cy9BY2NvdW50L2Rlc2NyaWJlJylcbiAgICogLCBvciByZWxhdGl2ZSBwYXRoIGZyb20gdmVyc2lvbiByb290ICgnL3NvYmplY3RzL0FjY291bnQvZGVzY3JpYmUnKS5cbiAgICovXG4gIHJlcXVlc3RQYXRjaDxSID0gdW5rbm93bj4odXJsOiBzdHJpbmcsIGJvZHk6IE9iamVjdCwgb3B0aW9ucz86IE9iamVjdCkge1xuICAgIGNvbnN0IHJlcXVlc3Q6IEh0dHBSZXF1ZXN0ID0ge1xuICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgICAgdXJsLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8Uj4ocmVxdWVzdCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBIVFRQIERFTEVURSByZXF1ZXN0XG4gICAqXG4gICAqIEVuZHBvaW50IFVSTCBjYW4gYmUgYWJzb2x1dGUgVVJMICgnaHR0cHM6Ly9uYTEuc2FsZXNmb3JjZS5jb20vc2VydmljZXMvZGF0YS92MzIuMC9zb2JqZWN0cy9BY2NvdW50L2Rlc2NyaWJlJylcbiAgICogLCByZWxhdGl2ZSBwYXRoIGZyb20gcm9vdCAoJy9zZXJ2aWNlcy9kYXRhL3YzMi4wL3NvYmplY3RzL0FjY291bnQvZGVzY3JpYmUnKVxuICAgKiAsIG9yIHJlbGF0aXZlIHBhdGggZnJvbSB2ZXJzaW9uIHJvb3QgKCcvc29iamVjdHMvQWNjb3VudC9kZXNjcmliZScpLlxuICAgKi9cbiAgcmVxdWVzdERlbGV0ZTxSPih1cmw6IHN0cmluZywgb3B0aW9ucz86IE9iamVjdCkge1xuICAgIGNvbnN0IHJlcXVlc3Q6IEh0dHBSZXF1ZXN0ID0geyBtZXRob2Q6ICdERUxFVEUnLCB1cmwgfTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PFI+KHJlcXVlc3QsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICoqL1xuICBfYmFzZVVybCgpIHtcbiAgICByZXR1cm4gW3RoaXMuaW5zdGFuY2VVcmwsICdzZXJ2aWNlcy9kYXRhJywgYHYke3RoaXMudmVyc2lvbn1gXS5qb2luKCcvJyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBwYXRoIHRvIGFic29sdXRlIHVybFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX25vcm1hbGl6ZVVybCh1cmw6IHN0cmluZykge1xuICAgIGlmICh1cmxbMF0gPT09ICcvJykge1xuICAgICAgaWYgKHVybC5pbmRleE9mKCcvc2VydmljZXMvJykgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VVcmwgKyB1cmw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fYmFzZVVybCgpICsgdXJsO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBxdWVyeTxUIGV4dGVuZHMgUmVjb3JkPihcbiAgICBzb3FsOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IFBhcnRpYWw8UXVlcnlPcHRpb25zPixcbiAgKTogUXVlcnk8UywgU09iamVjdE5hbWVzPFM+LCBULCAnUXVlcnlSZXN1bHQnPiB7XG4gICAgcmV0dXJuIG5ldyBRdWVyeTxTLCBTT2JqZWN0TmFtZXM8Uz4sIFQsICdRdWVyeVJlc3VsdCc+KHRoaXMsIHNvcWwsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgc2VhcmNoIGJ5IFNPU0xcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNvc2wgLSBTT1NMIHN0cmluZ1xuICAgKiBAcGFyYW0ge0NhbGxiYWNrLjxBcnJheS48UmVjb3JkUmVzdWx0Pj59IFtjYWxsYmFja10gLSBDYWxsYmFjayBmdW5jdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48QXJyYXkuPFJlY29yZFJlc3VsdD4+fVxuICAgKi9cbiAgc2VhcmNoKHNvc2w6IHN0cmluZykge1xuICAgIHZhciB1cmwgPSB0aGlzLl9iYXNlVXJsKCkgKyAnL3NlYXJjaD9xPScgKyBlbmNvZGVVUklDb21wb25lbnQoc29zbCk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxTZWFyY2hSZXN1bHQ+KHVybCk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHF1ZXJ5TW9yZShsb2NhdG9yOiBzdHJpbmcsIG9wdGlvbnM/OiBRdWVyeU9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFF1ZXJ5PFMsIFNPYmplY3ROYW1lczxTPiwgUmVjb3JkLCAnUXVlcnlSZXN1bHQnPihcbiAgICAgIHRoaXMsXG4gICAgICB7IGxvY2F0b3IgfSxcbiAgICAgIG9wdGlvbnMsXG4gICAgKTtcbiAgfVxuXG4gIC8qICovXG4gIF9lbnN1cmVWZXJzaW9uKG1ham9yVmVyc2lvbjogbnVtYmVyKSB7XG4gICAgY29uc3QgdmVyc2lvbnMgPSB0aGlzLnZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICByZXR1cm4gcGFyc2VJbnQodmVyc2lvbnNbMF0sIDEwKSA+PSBtYWpvclZlcnNpb247XG4gIH1cblxuICAvKiAqL1xuICBfc3VwcG9ydHMoZmVhdHVyZTogc3RyaW5nKSB7XG4gICAgc3dpdGNoIChmZWF0dXJlKSB7XG4gICAgICBjYXNlICdzb2JqZWN0LWNvbGxlY3Rpb24nOiAvLyBzb2JqZWN0IGNvbGxlY3Rpb24gaXMgYXZhaWxhYmxlIG9ubHkgaW4gQVBJIHZlciA0Mi4wK1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5zdXJlVmVyc2lvbig0Mik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHNwZWNpZmllZCByZWNvcmRzXG4gICAqL1xuICByZXRyaWV2ZTxOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+PihcbiAgICB0eXBlOiBOLFxuICAgIGlkczogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBSZXRyaWV2ZU9wdGlvbnMsXG4gICk6IFByb21pc2U8UmVjb3JkPjtcbiAgcmV0cmlldmU8TiBleHRlbmRzIFNPYmplY3ROYW1lczxTPj4oXG4gICAgdHlwZTogTixcbiAgICBpZHM6IHN0cmluZ1tdLFxuICAgIG9wdGlvbnM/OiBSZXRyaWV2ZU9wdGlvbnMsXG4gICk6IFByb21pc2U8UmVjb3JkW10+O1xuICByZXRyaWV2ZTxOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+PihcbiAgICB0eXBlOiBOLFxuICAgIGlkczogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgb3B0aW9ucz86IFJldHJpZXZlT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxSZWNvcmQgfCBSZWNvcmRbXT47XG4gIGFzeW5jIHJldHJpZXZlKFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBpZHM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIG9wdGlvbnM6IFJldHJpZXZlT3B0aW9ucyA9IHt9LFxuICApIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpZHMpXG4gICAgICA/IC8vIGNoZWNrIHRoZSB2ZXJzaW9uIHdoZXRoZXIgU09iamVjdCBjb2xsZWN0aW9uIEFQSSBpcyBzdXBwb3J0ZWQgKDQyLjApXG4gICAgICAgIHRoaXMuX2Vuc3VyZVZlcnNpb24oNDIpXG4gICAgICAgID8gdGhpcy5fcmV0cmlldmVNYW55KHR5cGUsIGlkcywgb3B0aW9ucylcbiAgICAgICAgOiB0aGlzLl9yZXRyaWV2ZVBhcmFsbGVsKHR5cGUsIGlkcywgb3B0aW9ucylcbiAgICAgIDogdGhpcy5fcmV0cmlldmVTaW5nbGUodHlwZSwgaWRzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBhc3luYyBfcmV0cmlldmVTaW5nbGUodHlwZTogc3RyaW5nLCBpZDogc3RyaW5nLCBvcHRpb25zOiBSZXRyaWV2ZU9wdGlvbnMpIHtcbiAgICBpZiAoIWlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVjb3JkIElELiBTcGVjaWZ5IHZhbGlkIHJlY29yZCBJRCB2YWx1ZScpO1xuICAgIH1cbiAgICBsZXQgdXJsID0gW3RoaXMuX2Jhc2VVcmwoKSwgJ3NvYmplY3RzJywgdHlwZSwgaWRdLmpvaW4oJy8nKTtcbiAgICBjb25zdCB7IGZpZWxkcywgaGVhZGVycyB9ID0gb3B0aW9ucztcbiAgICBpZiAoZmllbGRzKSB7XG4gICAgICB1cmwgKz0gYD9maWVsZHM9JHtmaWVsZHMuam9pbignLCcpfWA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdHRVQnLCB1cmwsIGhlYWRlcnMgfSk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgYXN5bmMgX3JldHJpZXZlUGFyYWxsZWwoXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGlkczogc3RyaW5nW10sXG4gICAgb3B0aW9uczogUmV0cmlldmVPcHRpb25zLFxuICApIHtcbiAgICBpZiAoaWRzLmxlbmd0aCA+IHRoaXMuX21heFJlcXVlc3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhjZWVkZWQgbWF4IGxpbWl0IG9mIGNvbmN1cnJlbnQgY2FsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICBpZHMubWFwKChpZCkgPT5cbiAgICAgICAgdGhpcy5fcmV0cmlldmVTaW5nbGUodHlwZSwgaWQsIG9wdGlvbnMpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5hbGxPck5vbmUgfHwgZXJyLmVycm9yQ29kZSAhPT0gJ05PVF9GT1VORCcpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pLFxuICAgICAgKSxcbiAgICApO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGFzeW5jIF9yZXRyaWV2ZU1hbnkodHlwZTogc3RyaW5nLCBpZHM6IHN0cmluZ1tdLCBvcHRpb25zOiBSZXRyaWV2ZU9wdGlvbnMpIHtcbiAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBbdGhpcy5fYmFzZVVybCgpLCAnY29tcG9zaXRlJywgJ3NvYmplY3RzJywgdHlwZV0uam9pbignLycpO1xuICAgIGNvbnN0IGZpZWxkcyA9XG4gICAgICBvcHRpb25zLmZpZWxkcyB8fFxuICAgICAgKGF3YWl0IHRoaXMuZGVzY3JpYmUkKHR5cGUpKS5maWVsZHMubWFwKChmaWVsZCkgPT4gZmllbGQubmFtZSk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgaWRzLCBmaWVsZHMgfSksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIC4uLihvcHRpb25zLmhlYWRlcnMgfHwge30pLFxuICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgcmVjb3Jkc1xuICAgKi9cbiAgY3JlYXRlPFxuICAgIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gICAgSW5wdXRSZWNvcmQgZXh0ZW5kcyBTT2JqZWN0SW5wdXRSZWNvcmQ8UywgTj4gPSBTT2JqZWN0SW5wdXRSZWNvcmQ8UywgTj5cbiAgPihcbiAgICB0eXBlOiBOLFxuICAgIHJlY29yZHM6IElucHV0UmVjb3JkW10sXG4gICAgb3B0aW9ucz86IERtbE9wdGlvbnMsXG4gICk6IFByb21pc2U8U2F2ZVJlc3VsdFtdPjtcbiAgY3JlYXRlPFxuICAgIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gICAgSW5wdXRSZWNvcmQgZXh0ZW5kcyBTT2JqZWN0SW5wdXRSZWNvcmQ8UywgTj4gPSBTT2JqZWN0SW5wdXRSZWNvcmQ8UywgTj5cbiAgPih0eXBlOiBOLCByZWNvcmQ6IElucHV0UmVjb3JkLCBvcHRpb25zPzogRG1sT3B0aW9ucyk6IFByb21pc2U8U2F2ZVJlc3VsdD47XG4gIGNyZWF0ZTxcbiAgICBOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+LFxuICAgIElucHV0UmVjb3JkIGV4dGVuZHMgU09iamVjdElucHV0UmVjb3JkPFMsIE4+ID0gU09iamVjdElucHV0UmVjb3JkPFMsIE4+XG4gID4oXG4gICAgdHlwZTogTixcbiAgICByZWNvcmRzOiBJbnB1dFJlY29yZCB8IElucHV0UmVjb3JkW10sXG4gICAgb3B0aW9ucz86IERtbE9wdGlvbnMsXG4gICk6IFByb21pc2U8U2F2ZVJlc3VsdCB8IFNhdmVSZXN1bHRbXT47XG4gIC8qKlxuICAgKiBAcGFyYW0gdHlwZVxuICAgKiBAcGFyYW0gcmVjb3Jkc1xuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgY3JlYXRlKFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICByZWNvcmRzOiBSZWNvcmQgfCBSZWNvcmRbXSxcbiAgICBvcHRpb25zOiBEbWxPcHRpb25zID0ge30sXG4gICkge1xuICAgIGNvbnN0IHJldCA9IEFycmF5LmlzQXJyYXkocmVjb3JkcylcbiAgICAgID8gLy8gY2hlY2sgdGhlIHZlcnNpb24gd2hldGhlciBTT2JqZWN0IGNvbGxlY3Rpb24gQVBJIGlzIHN1cHBvcnRlZCAoNDIuMClcbiAgICAgICAgdGhpcy5fZW5zdXJlVmVyc2lvbig0MilcbiAgICAgICAgPyBhd2FpdCB0aGlzLl9jcmVhdGVNYW55KHR5cGUsIHJlY29yZHMsIG9wdGlvbnMpXG4gICAgICAgIDogYXdhaXQgdGhpcy5fY3JlYXRlUGFyYWxsZWwodHlwZSwgcmVjb3Jkcywgb3B0aW9ucylcbiAgICAgIDogYXdhaXQgdGhpcy5fY3JlYXRlU2luZ2xlKHR5cGUsIHJlY29yZHMsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgYXN5bmMgX2NyZWF0ZVNpbmdsZSh0eXBlOiBzdHJpbmcsIHJlY29yZDogUmVjb3JkLCBvcHRpb25zOiBEbWxPcHRpb25zKSB7XG4gICAgY29uc3QgeyBJZCwgdHlwZTogcnR5cGUsIGF0dHJpYnV0ZXMsIC4uLnJlYyB9ID0gcmVjb3JkO1xuICAgIGNvbnN0IHNvYmplY3RUeXBlID0gdHlwZSB8fCAoYXR0cmlidXRlcyAmJiBhdHRyaWJ1dGVzLnR5cGUpIHx8IHJ0eXBlO1xuICAgIGlmICghc29iamVjdFR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gU09iamVjdCBUeXBlIGRlZmluZWQgaW4gcmVjb3JkJyk7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IFt0aGlzLl9iYXNlVXJsKCksICdzb2JqZWN0cycsIHNvYmplY3RUeXBlXS5qb2luKCcvJyk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlYyksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIC4uLihvcHRpb25zLmhlYWRlcnMgfHwge30pLFxuICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBhc3luYyBfY3JlYXRlUGFyYWxsZWwodHlwZTogc3RyaW5nLCByZWNvcmRzOiBSZWNvcmRbXSwgb3B0aW9uczogRG1sT3B0aW9ucykge1xuICAgIGlmIChyZWNvcmRzLmxlbmd0aCA+IHRoaXMuX21heFJlcXVlc3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhjZWVkZWQgbWF4IGxpbWl0IG9mIGNvbmN1cnJlbnQgY2FsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICByZWNvcmRzLm1hcCgocmVjb3JkKSA9PlxuICAgICAgICB0aGlzLl9jcmVhdGVTaW5nbGUodHlwZSwgcmVjb3JkLCBvcHRpb25zKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgLy8gYmUgYXdhcmUgdGhhdCBhbGxPck5vbmUgaW4gcGFyYWxsZWwgbW9kZSB3aWxsIG5vdCByZXZlcnQgdGhlIG90aGVyIHN1Y2Nlc3NmdWwgcmVxdWVzdHNcbiAgICAgICAgICAvLyBpdCBvbmx5IHJhaXNlcyBlcnJvciB3aGVuIG1ldCBhdCBsZWFzdCBvbmUgZmFpbGVkIHJlcXVlc3QuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuYWxsT3JOb25lIHx8ICFlcnIuZXJyb3JDb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0b1NhdmVSZXN1bHQoZXJyKTtcbiAgICAgICAgfSksXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgYXN5bmMgX2NyZWF0ZU1hbnkoXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIHJlY29yZHM6IFJlY29yZFtdLFxuICAgIG9wdGlvbnM6IERtbE9wdGlvbnMsXG4gICk6IFByb21pc2U8U2F2ZVJlc3VsdFtdPiB7XG4gICAgaWYgKHJlY29yZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgICB9XG4gICAgaWYgKHJlY29yZHMubGVuZ3RoID4gTUFYX0RNTF9DT1VOVCAmJiBvcHRpb25zLmFsbG93UmVjdXJzaXZlKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAuLi4oYXdhaXQgdGhpcy5fY3JlYXRlTWFueShcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHJlY29yZHMuc2xpY2UoMCwgTUFYX0RNTF9DT1VOVCksXG4gICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgKSksXG4gICAgICAgIC4uLihhd2FpdCB0aGlzLl9jcmVhdGVNYW55KFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgcmVjb3Jkcy5zbGljZShNQVhfRE1MX0NPVU5UKSxcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICApKSxcbiAgICAgIF07XG4gICAgfVxuICAgIGNvbnN0IF9yZWNvcmRzID0gcmVjb3Jkcy5tYXAoKHJlY29yZCkgPT4ge1xuICAgICAgY29uc3QgeyBJZCwgdHlwZTogcnR5cGUsIGF0dHJpYnV0ZXMsIC4uLnJlYyB9ID0gcmVjb3JkO1xuICAgICAgY29uc3Qgc29iamVjdFR5cGUgPSB0eXBlIHx8IChhdHRyaWJ1dGVzICYmIGF0dHJpYnV0ZXMudHlwZSkgfHwgcnR5cGU7XG4gICAgICBpZiAoIXNvYmplY3RUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gU09iamVjdCBUeXBlIGRlZmluZWQgaW4gcmVjb3JkJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBhdHRyaWJ1dGVzOiB7IHR5cGU6IHNvYmplY3RUeXBlIH0sIC4uLnJlYyB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHVybCA9IFt0aGlzLl9iYXNlVXJsKCksICdjb21wb3NpdGUnLCAnc29iamVjdHMnXS5qb2luKCcvJyk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgYWxsT3JOb25lOiBvcHRpb25zLmFsbE9yTm9uZSB8fCBmYWxzZSxcbiAgICAgICAgcmVjb3JkczogX3JlY29yZHMsXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgLi4uKG9wdGlvbnMuaGVhZGVycyB8fCB7fSksXG4gICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgQ29ubmVjdGlvbiNjcmVhdGUoKVxuICAgKi9cbiAgaW5zZXJ0ID0gdGhpcy5jcmVhdGU7XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSByZWNvcmRzXG4gICAqL1xuICB1cGRhdGU8XG4gICAgTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgICBVcGRhdGVSZWNvcmQgZXh0ZW5kcyBTT2JqZWN0VXBkYXRlUmVjb3JkPFMsIE4+ID0gU09iamVjdFVwZGF0ZVJlY29yZDxTLCBOPlxuICA+KFxuICAgIHR5cGU6IE4sXG4gICAgcmVjb3JkczogVXBkYXRlUmVjb3JkW10sXG4gICAgb3B0aW9ucz86IERtbE9wdGlvbnMsXG4gICk6IFByb21pc2U8U2F2ZVJlc3VsdFtdPjtcbiAgdXBkYXRlPFxuICAgIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gICAgVXBkYXRlUmVjb3JkIGV4dGVuZHMgU09iamVjdFVwZGF0ZVJlY29yZDxTLCBOPiA9IFNPYmplY3RVcGRhdGVSZWNvcmQ8UywgTj5cbiAgPih0eXBlOiBOLCByZWNvcmQ6IFVwZGF0ZVJlY29yZCwgb3B0aW9ucz86IERtbE9wdGlvbnMpOiBQcm9taXNlPFNhdmVSZXN1bHQ+O1xuICB1cGRhdGU8XG4gICAgTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgICBVcGRhdGVSZWNvcmQgZXh0ZW5kcyBTT2JqZWN0VXBkYXRlUmVjb3JkPFMsIE4+ID0gU09iamVjdFVwZGF0ZVJlY29yZDxTLCBOPlxuICA+KFxuICAgIHR5cGU6IE4sXG4gICAgcmVjb3JkczogVXBkYXRlUmVjb3JkIHwgVXBkYXRlUmVjb3JkW10sXG4gICAgb3B0aW9ucz86IERtbE9wdGlvbnMsXG4gICk6IFByb21pc2U8U2F2ZVJlc3VsdCB8IFNhdmVSZXN1bHRbXT47XG4gIC8qKlxuICAgKiBAcGFyYW0gdHlwZVxuICAgKiBAcGFyYW0gcmVjb3Jkc1xuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKi9cbiAgdXBkYXRlPE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4+KFxuICAgIHR5cGU6IE4sXG4gICAgcmVjb3JkczogUmVjb3JkIHwgUmVjb3JkW10sXG4gICAgb3B0aW9uczogRG1sT3B0aW9ucyA9IHt9LFxuICApOiBQcm9taXNlPFNhdmVSZXN1bHQgfCBTYXZlUmVzdWx0W10+IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyZWNvcmRzKVxuICAgICAgPyAvLyBjaGVjayB0aGUgdmVyc2lvbiB3aGV0aGVyIFNPYmplY3QgY29sbGVjdGlvbiBBUEkgaXMgc3VwcG9ydGVkICg0Mi4wKVxuICAgICAgICB0aGlzLl9lbnN1cmVWZXJzaW9uKDQyKVxuICAgICAgICA/IHRoaXMuX3VwZGF0ZU1hbnkodHlwZSwgcmVjb3Jkcywgb3B0aW9ucylcbiAgICAgICAgOiB0aGlzLl91cGRhdGVQYXJhbGxlbCh0eXBlLCByZWNvcmRzLCBvcHRpb25zKVxuICAgICAgOiB0aGlzLl91cGRhdGVTaW5nbGUodHlwZSwgcmVjb3Jkcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgYXN5bmMgX3VwZGF0ZVNpbmdsZShcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgcmVjb3JkOiBSZWNvcmQsXG4gICAgb3B0aW9uczogRG1sT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0PiB7XG4gICAgY29uc3QgeyBJZDogaWQsIHR5cGU6IHJ0eXBlLCBhdHRyaWJ1dGVzLCAuLi5yZWMgfSA9IHJlY29yZDtcbiAgICBpZiAoIWlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlY29yZCBpZCBpcyBub3QgZm91bmQgaW4gcmVjb3JkLicpO1xuICAgIH1cbiAgICBjb25zdCBzb2JqZWN0VHlwZSA9IHR5cGUgfHwgKGF0dHJpYnV0ZXMgJiYgYXR0cmlidXRlcy50eXBlKSB8fCBydHlwZTtcbiAgICBpZiAoIXNvYmplY3RUeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFNPYmplY3QgVHlwZSBkZWZpbmVkIGluIHJlY29yZCcpO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBbdGhpcy5fYmFzZVVybCgpLCAnc29iamVjdHMnLCBzb2JqZWN0VHlwZSwgaWRdLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICAgIHVybCxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVjKSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIC4uLihvcHRpb25zLmhlYWRlcnMgfHwge30pLFxuICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBub0NvbnRlbnRSZXNwb25zZTogeyBpZCwgc3VjY2VzczogdHJ1ZSwgZXJyb3JzOiBbXSB9LFxuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGFzeW5jIF91cGRhdGVQYXJhbGxlbCh0eXBlOiBzdHJpbmcsIHJlY29yZHM6IFJlY29yZFtdLCBvcHRpb25zOiBEbWxPcHRpb25zKSB7XG4gICAgaWYgKHJlY29yZHMubGVuZ3RoID4gdGhpcy5fbWF4UmVxdWVzdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGNlZWRlZCBtYXggbGltaXQgb2YgY29uY3VycmVudCBjYWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgIHJlY29yZHMubWFwKChyZWNvcmQpID0+XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNpbmdsZSh0eXBlLCByZWNvcmQsIG9wdGlvbnMpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAvLyBiZSBhd2FyZSB0aGF0IGFsbE9yTm9uZSBpbiBwYXJhbGxlbCBtb2RlIHdpbGwgbm90IHJldmVydCB0aGUgb3RoZXIgc3VjY2Vzc2Z1bCByZXF1ZXN0c1xuICAgICAgICAgIC8vIGl0IG9ubHkgcmFpc2VzIGVycm9yIHdoZW4gbWV0IGF0IGxlYXN0IG9uZSBmYWlsZWQgcmVxdWVzdC5cbiAgICAgICAgICBpZiAob3B0aW9ucy5hbGxPck5vbmUgfHwgIWVyci5lcnJvckNvZGUpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRvU2F2ZVJlc3VsdChlcnIpO1xuICAgICAgICB9KSxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBhc3luYyBfdXBkYXRlTWFueShcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgcmVjb3JkczogUmVjb3JkW10sXG4gICAgb3B0aW9uczogRG1sT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+IHtcbiAgICBpZiAocmVjb3Jkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKHJlY29yZHMubGVuZ3RoID4gTUFYX0RNTF9DT1VOVCAmJiBvcHRpb25zLmFsbG93UmVjdXJzaXZlKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAuLi4oYXdhaXQgdGhpcy5fdXBkYXRlTWFueShcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHJlY29yZHMuc2xpY2UoMCwgTUFYX0RNTF9DT1VOVCksXG4gICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgKSksXG4gICAgICAgIC4uLihhd2FpdCB0aGlzLl91cGRhdGVNYW55KFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgcmVjb3Jkcy5zbGljZShNQVhfRE1MX0NPVU5UKSxcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICApKSxcbiAgICAgIF07XG4gICAgfVxuICAgIGNvbnN0IF9yZWNvcmRzID0gcmVjb3Jkcy5tYXAoKHJlY29yZCkgPT4ge1xuICAgICAgY29uc3QgeyBJZDogaWQsIHR5cGU6IHJ0eXBlLCBhdHRyaWJ1dGVzLCAuLi5yZWMgfSA9IHJlY29yZDtcbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWNvcmQgaWQgaXMgbm90IGZvdW5kIGluIHJlY29yZC4nKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNvYmplY3RUeXBlID0gdHlwZSB8fCAoYXR0cmlidXRlcyAmJiBhdHRyaWJ1dGVzLnR5cGUpIHx8IHJ0eXBlO1xuICAgICAgaWYgKCFzb2JqZWN0VHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFNPYmplY3QgVHlwZSBkZWZpbmVkIGluIHJlY29yZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgaWQsIGF0dHJpYnV0ZXM6IHsgdHlwZTogc29iamVjdFR5cGUgfSwgLi4ucmVjIH07XG4gICAgfSk7XG4gICAgY29uc3QgdXJsID0gW3RoaXMuX2Jhc2VVcmwoKSwgJ2NvbXBvc2l0ZScsICdzb2JqZWN0cyddLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICAgIHVybCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgYWxsT3JOb25lOiBvcHRpb25zLmFsbE9yTm9uZSB8fCBmYWxzZSxcbiAgICAgICAgcmVjb3JkczogX3JlY29yZHMsXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgLi4uKG9wdGlvbnMuaGVhZGVycyB8fCB7fSksXG4gICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwc2VydCByZWNvcmRzXG4gICAqL1xuICB1cHNlcnQ8XG4gICAgTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgICBJbnB1dFJlY29yZCBleHRlbmRzIFNPYmplY3RJbnB1dFJlY29yZDxTLCBOPiA9IFNPYmplY3RJbnB1dFJlY29yZDxTLCBOPixcbiAgICBGaWVsZE5hbWVzIGV4dGVuZHMgU09iamVjdEZpZWxkTmFtZXM8UywgTj4gPSBTT2JqZWN0RmllbGROYW1lczxTLCBOPlxuICA+KFxuICAgIHR5cGU6IE4sXG4gICAgcmVjb3JkczogSW5wdXRSZWNvcmRbXSxcbiAgICBleHRJZEZpZWxkOiBGaWVsZE5hbWVzLFxuICAgIG9wdGlvbnM/OiBEbWxPcHRpb25zLFxuICApOiBQcm9taXNlPFVwc2VydFJlc3VsdFtdPjtcbiAgdXBzZXJ0PFxuICAgIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gICAgSW5wdXRSZWNvcmQgZXh0ZW5kcyBTT2JqZWN0SW5wdXRSZWNvcmQ8UywgTj4gPSBTT2JqZWN0SW5wdXRSZWNvcmQ8UywgTj4sXG4gICAgRmllbGROYW1lcyBleHRlbmRzIFNPYmplY3RGaWVsZE5hbWVzPFMsIE4+ID0gU09iamVjdEZpZWxkTmFtZXM8UywgTj5cbiAgPihcbiAgICB0eXBlOiBOLFxuICAgIHJlY29yZDogSW5wdXRSZWNvcmQsXG4gICAgZXh0SWRGaWVsZDogRmllbGROYW1lcyxcbiAgICBvcHRpb25zPzogRG1sT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxVcHNlcnRSZXN1bHQ+O1xuICB1cHNlcnQ8XG4gICAgTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgICBJbnB1dFJlY29yZCBleHRlbmRzIFNPYmplY3RJbnB1dFJlY29yZDxTLCBOPiA9IFNPYmplY3RJbnB1dFJlY29yZDxTLCBOPixcbiAgICBGaWVsZE5hbWVzIGV4dGVuZHMgU09iamVjdEZpZWxkTmFtZXM8UywgTj4gPSBTT2JqZWN0RmllbGROYW1lczxTLCBOPlxuICA+KFxuICAgIHR5cGU6IE4sXG4gICAgcmVjb3JkczogSW5wdXRSZWNvcmQgfCBJbnB1dFJlY29yZFtdLFxuICAgIGV4dElkRmllbGQ6IEZpZWxkTmFtZXMsXG4gICAgb3B0aW9ucz86IERtbE9wdGlvbnMsXG4gICk6IFByb21pc2U8VXBzZXJ0UmVzdWx0IHwgVXBzZXJ0UmVzdWx0W10+O1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHR5cGVcbiAgICogQHBhcmFtIHJlY29yZHNcbiAgICogQHBhcmFtIGV4dElkRmllbGRcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIHVwc2VydChcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgcmVjb3JkczogUmVjb3JkIHwgUmVjb3JkW10sXG4gICAgZXh0SWRGaWVsZDogc3RyaW5nLFxuICAgIG9wdGlvbnM6IERtbE9wdGlvbnMgPSB7fSxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0IHwgU2F2ZVJlc3VsdFtdPiB7XG4gICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkocmVjb3Jkcyk7XG4gICAgY29uc3QgX3JlY29yZHMgPSBBcnJheS5pc0FycmF5KHJlY29yZHMpID8gcmVjb3JkcyA6IFtyZWNvcmRzXTtcbiAgICBpZiAoX3JlY29yZHMubGVuZ3RoID4gdGhpcy5fbWF4UmVxdWVzdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGNlZWRlZCBtYXggbGltaXQgb2YgY29uY3VycmVudCBjYWxsJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIF9yZWNvcmRzLm1hcCgocmVjb3JkKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgW2V4dElkRmllbGRdOiBleHRJZCwgdHlwZTogcnR5cGUsIGF0dHJpYnV0ZXMsIC4uLnJlYyB9ID0gcmVjb3JkO1xuICAgICAgICBjb25zdCB1cmwgPSBbdGhpcy5fYmFzZVVybCgpLCAnc29iamVjdHMnLCB0eXBlLCBleHRJZEZpZWxkLCBleHRJZF0uam9pbihcbiAgICAgICAgICAnLycsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8U2F2ZVJlc3VsdD4oXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVjKSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgLi4uKG9wdGlvbnMuaGVhZGVycyB8fCB7fSksXG4gICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbm9Db250ZW50UmVzcG9uc2U6IHsgc3VjY2VzczogdHJ1ZSwgZXJyb3JzOiBbXSB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIC8vIEJlIGF3YXJlIHRoYXQgYGFsbE9yTm9uZWAgb3B0aW9uIGluIHVwc2VydCBtZXRob2RcbiAgICAgICAgICAvLyB3aWxsIG5vdCByZXZlcnQgdGhlIG90aGVyIHN1Y2Nlc3NmdWwgcmVxdWVzdHMuXG4gICAgICAgICAgLy8gSXQgb25seSByYWlzZXMgZXJyb3Igd2hlbiBtZXQgYXQgbGVhc3Qgb25lIGZhaWxlZCByZXF1ZXN0LlxuICAgICAgICAgIGlmICghaXNBcnJheSB8fCBvcHRpb25zLmFsbE9yTm9uZSB8fCAhZXJyLmVycm9yQ29kZSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdG9TYXZlUmVzdWx0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgKTtcbiAgICByZXR1cm4gaXNBcnJheSA/IHJlc3VsdHMgOiByZXN1bHRzWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSByZWNvcmRzXG4gICAqL1xuICBkZXN0cm95PE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4+KFxuICAgIHR5cGU6IE4sXG4gICAgaWRzOiBzdHJpbmdbXSxcbiAgICBvcHRpb25zPzogRG1sT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+O1xuICBkZXN0cm95PE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4+KFxuICAgIHR5cGU6IE4sXG4gICAgaWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogRG1sT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0PjtcbiAgZGVzdHJveTxOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+PihcbiAgICB0eXBlOiBOLFxuICAgIGlkczogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgb3B0aW9ucz86IERtbE9wdGlvbnMsXG4gICk6IFByb21pc2U8U2F2ZVJlc3VsdCB8IFNhdmVSZXN1bHRbXT47XG4gIC8qKlxuICAgKiBAcGFyYW0gdHlwZVxuICAgKiBAcGFyYW0gaWRzXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICBhc3luYyBkZXN0cm95KFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBpZHM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIG9wdGlvbnM6IERtbE9wdGlvbnMgPSB7fSxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0IHwgU2F2ZVJlc3VsdFtdPiB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaWRzKVxuICAgICAgPyAvLyBjaGVjayB0aGUgdmVyc2lvbiB3aGV0aGVyIFNPYmplY3QgY29sbGVjdGlvbiBBUEkgaXMgc3VwcG9ydGVkICg0Mi4wKVxuICAgICAgICB0aGlzLl9lbnN1cmVWZXJzaW9uKDQyKVxuICAgICAgICA/IHRoaXMuX2Rlc3Ryb3lNYW55KHR5cGUsIGlkcywgb3B0aW9ucylcbiAgICAgICAgOiB0aGlzLl9kZXN0cm95UGFyYWxsZWwodHlwZSwgaWRzLCBvcHRpb25zKVxuICAgICAgOiB0aGlzLl9kZXN0cm95U2luZ2xlKHR5cGUsIGlkcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgYXN5bmMgX2Rlc3Ryb3lTaW5nbGUoXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGlkOiBzdHJpbmcsXG4gICAgb3B0aW9uczogRG1sT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0PiB7XG4gICAgY29uc3QgdXJsID0gW3RoaXMuX2Jhc2VVcmwoKSwgJ3NvYmplY3RzJywgdHlwZSwgaWRdLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICB1cmwsXG4gICAgICAgIGhlYWRlcnM6IG9wdGlvbnMuaGVhZGVycyB8fCB7fSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5vQ29udGVudFJlc3BvbnNlOiB7IGlkLCBzdWNjZXNzOiB0cnVlLCBlcnJvcnM6IFtdIH0sXG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgYXN5bmMgX2Rlc3Ryb3lQYXJhbGxlbCh0eXBlOiBzdHJpbmcsIGlkczogc3RyaW5nW10sIG9wdGlvbnM6IERtbE9wdGlvbnMpIHtcbiAgICBpZiAoaWRzLmxlbmd0aCA+IHRoaXMuX21heFJlcXVlc3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhjZWVkZWQgbWF4IGxpbWl0IG9mIGNvbmN1cnJlbnQgY2FsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICBpZHMubWFwKChpZCkgPT5cbiAgICAgICAgdGhpcy5fZGVzdHJveVNpbmdsZSh0eXBlLCBpZCwgb3B0aW9ucykuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIC8vIEJlIGF3YXJlIHRoYXQgYGFsbE9yTm9uZWAgb3B0aW9uIGluIHBhcmFsbGVsIG1vZGVcbiAgICAgICAgICAvLyB3aWxsIG5vdCByZXZlcnQgdGhlIG90aGVyIHN1Y2Nlc3NmdWwgcmVxdWVzdHMuXG4gICAgICAgICAgLy8gSXQgb25seSByYWlzZXMgZXJyb3Igd2hlbiBtZXQgYXQgbGVhc3Qgb25lIGZhaWxlZCByZXF1ZXN0LlxuICAgICAgICAgIGlmIChvcHRpb25zLmFsbE9yTm9uZSB8fCAhZXJyLmVycm9yQ29kZSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdG9TYXZlUmVzdWx0KGVycik7XG4gICAgICAgIH0pLFxuICAgICAgKSxcbiAgICApO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGFzeW5jIF9kZXN0cm95TWFueShcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgaWRzOiBzdHJpbmdbXSxcbiAgICBvcHRpb25zOiBEbWxPcHRpb25zLFxuICApOiBQcm9taXNlPFNhdmVSZXN1bHRbXT4ge1xuICAgIGlmIChpZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChpZHMubGVuZ3RoID4gTUFYX0RNTF9DT1VOVCAmJiBvcHRpb25zLmFsbG93UmVjdXJzaXZlKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAuLi4oYXdhaXQgdGhpcy5fZGVzdHJveU1hbnkoXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBpZHMuc2xpY2UoMCwgTUFYX0RNTF9DT1VOVCksXG4gICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgKSksXG4gICAgICAgIC4uLihhd2FpdCB0aGlzLl9kZXN0cm95TWFueSh0eXBlLCBpZHMuc2xpY2UoTUFYX0RNTF9DT1VOVCksIG9wdGlvbnMpKSxcbiAgICAgIF07XG4gICAgfVxuICAgIGxldCB1cmwgPVxuICAgICAgW3RoaXMuX2Jhc2VVcmwoKSwgJ2NvbXBvc2l0ZScsICdzb2JqZWN0cz9pZHM9J10uam9pbignLycpICsgaWRzLmpvaW4oJywnKTtcbiAgICBpZiAob3B0aW9ucy5hbGxPck5vbmUpIHtcbiAgICAgIHVybCArPSAnJmFsbE9yTm9uZT10cnVlJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgdXJsLFxuICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzIHx8IHt9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgQ29ubmVjdGlvbiNkZXN0cm95KClcbiAgICovXG4gIGRlbGV0ZSA9IHRoaXMuZGVzdHJveTtcblxuICAvKipcbiAgICogU3lub255bSBvZiBDb25uZWN0aW9uI2Rlc3Ryb3koKVxuICAgKi9cbiAgZGVsID0gdGhpcy5kZXN0cm95O1xuXG4gIC8qKlxuICAgKiBEZXNjcmliZSBTT2JqZWN0IG1ldGFkYXRhXG4gICAqL1xuICBhc3luYyBkZXNjcmliZSh0eXBlOiBzdHJpbmcpOiBQcm9taXNlPERlc2NyaWJlU09iamVjdFJlc3VsdD4ge1xuICAgIGNvbnN0IHVybCA9IFt0aGlzLl9iYXNlVXJsKCksICdzb2JqZWN0cycsIHR5cGUsICdkZXNjcmliZSddLmpvaW4oJy8nKTtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgdGhpcy5yZXF1ZXN0KHVybCk7XG4gICAgcmV0dXJuIGJvZHkgYXMgRGVzY3JpYmVTT2JqZWN0UmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlc2NyaWJlIGdsb2JhbCBTT2JqZWN0c1xuICAgKi9cbiAgYXN5bmMgZGVzY3JpYmVHbG9iYWwoKSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5fYmFzZVVybCgpfS9zb2JqZWN0c2A7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHRoaXMucmVxdWVzdCh1cmwpO1xuICAgIHJldHVybiBib2R5IGFzIERlc2NyaWJlR2xvYmFsUmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBTT2JqZWN0IGluc3RhbmNlXG4gICAqL1xuICBzb2JqZWN0PE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4+KHR5cGU6IE4pOiBTT2JqZWN0PFMsIE4+O1xuICBzb2JqZWN0PE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4+KHR5cGU6IHN0cmluZyk6IFNPYmplY3Q8UywgTj47XG4gIHNvYmplY3Q8TiBleHRlbmRzIFNPYmplY3ROYW1lczxTPj4odHlwZTogTiB8IHN0cmluZyk6IFNPYmplY3Q8UywgTj4ge1xuICAgIGNvbnN0IHNvID1cbiAgICAgICh0aGlzLnNvYmplY3RzW3R5cGUgYXMgTl0gYXMgU09iamVjdDxTLCBOPiB8IHVuZGVmaW5lZCkgfHxcbiAgICAgIG5ldyBTT2JqZWN0KHRoaXMsIHR5cGUgYXMgTik7XG4gICAgdGhpcy5zb2JqZWN0c1t0eXBlIGFzIE5dID0gc287XG4gICAgcmV0dXJuIHNvO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBpZGVudGl0eSBpbmZvcm1hdGlvbiBvZiBjdXJyZW50IHVzZXJcbiAgICovXG4gIGFzeW5jIGlkZW50aXR5KG9wdGlvbnM6IHsgaGVhZGVycz86IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9IH0gPSB7fSkge1xuICAgIGxldCB1cmwgPSB0aGlzLnVzZXJJbmZvICYmIHRoaXMudXNlckluZm8udXJsO1xuICAgIGlmICghdXJsKSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnJlcXVlc3Q8eyBpZGVudGl0eTogc3RyaW5nIH0+KHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgdXJsOiB0aGlzLl9iYXNlVXJsKCksXG4gICAgICAgIGhlYWRlcnM6IG9wdGlvbnMuaGVhZGVycyxcbiAgICAgIH0pO1xuICAgICAgdXJsID0gcmVzLmlkZW50aXR5O1xuICAgIH1cbiAgICB1cmwgKz0gJz9mb3JtYXQ9anNvbic7XG4gICAgaWYgKHRoaXMuYWNjZXNzVG9rZW4pIHtcbiAgICAgIHVybCArPSBgJm9hdXRoX3Rva2VuPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuYWNjZXNzVG9rZW4pfWA7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucmVxdWVzdDxJZGVudGl0eUluZm8+KHsgbWV0aG9kOiAnR0VUJywgdXJsIH0pO1xuICAgIHRoaXMudXNlckluZm8gPSB7XG4gICAgICBpZDogcmVzLnVzZXJfaWQsXG4gICAgICBvcmdhbml6YXRpb25JZDogcmVzLm9yZ2FuaXphdGlvbl9pZCxcbiAgICAgIHVybDogcmVzLmlkLFxuICAgIH07XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IHJlY2VudGx5IHZpZXdlZCByZWNvcmRzXG4gICAqL1xuICBhc3luYyByZWNlbnQodHlwZT86IHN0cmluZyB8IG51bWJlciwgbGltaXQ/OiBudW1iZXIpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGxpbWl0ID0gdHlwZTtcbiAgICAgIHR5cGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxldCB1cmw7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHVybCA9IFt0aGlzLl9iYXNlVXJsKCksICdzb2JqZWN0cycsIHR5cGVdLmpvaW4oJy8nKTtcbiAgICAgIGNvbnN0IHsgcmVjZW50SXRlbXMgfSA9IGF3YWl0IHRoaXMucmVxdWVzdDx7IHJlY2VudEl0ZW1zOiBSZWNvcmRbXSB9PihcbiAgICAgICAgdXJsLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBsaW1pdCA/IHJlY2VudEl0ZW1zLnNsaWNlKDAsIGxpbWl0KSA6IHJlY2VudEl0ZW1zO1xuICAgIH1cbiAgICB1cmwgPSBgJHt0aGlzLl9iYXNlVXJsKCl9L3JlY2VudGA7XG4gICAgaWYgKGxpbWl0KSB7XG4gICAgICB1cmwgKz0gYD9saW1pdD0ke2xpbWl0fWA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8UmVjb3JkW10+KHVybCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdXBkYXRlZCByZWNvcmRzXG4gICAqL1xuICBhc3luYyB1cGRhdGVkKFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBzdGFydDogc3RyaW5nIHwgRGF0ZSxcbiAgICBlbmQ6IHN0cmluZyB8IERhdGUsXG4gICk6IFByb21pc2U8VXBkYXRlZFJlc3VsdD4ge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgbGV0IHVybCA9IFt0aGlzLl9iYXNlVXJsKCksICdzb2JqZWN0cycsIHR5cGUsICd1cGRhdGVkJ10uam9pbignLycpO1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdGFydCA9IG5ldyBEYXRlKHN0YXJ0KTtcbiAgICB9XG4gICAgc3RhcnQgPSBmb3JtYXREYXRlKHN0YXJ0KTtcbiAgICB1cmwgKz0gYD9zdGFydD0ke2VuY29kZVVSSUNvbXBvbmVudChzdGFydCl9YDtcbiAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuZCA9IG5ldyBEYXRlKGVuZCk7XG4gICAgfVxuICAgIGVuZCA9IGZvcm1hdERhdGUoZW5kKTtcbiAgICB1cmwgKz0gYCZlbmQ9JHtlbmNvZGVVUklDb21wb25lbnQoZW5kKX1gO1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCB0aGlzLnJlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gYm9keSBhcyBVcGRhdGVkUmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGRlbGV0ZWQgcmVjb3Jkc1xuICAgKi9cbiAgYXN5bmMgZGVsZXRlZChcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgc3RhcnQ6IHN0cmluZyB8IERhdGUsXG4gICAgZW5kOiBzdHJpbmcgfCBEYXRlLFxuICApOiBQcm9taXNlPERlbGV0ZWRSZXN1bHQ+IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgIGxldCB1cmwgPSBbdGhpcy5fYmFzZVVybCgpLCAnc29iamVjdHMnLCB0eXBlLCAnZGVsZXRlZCddLmpvaW4oJy8nKTtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgc3RhcnQgPSBuZXcgRGF0ZShzdGFydCk7XG4gICAgfVxuICAgIHN0YXJ0ID0gZm9ybWF0RGF0ZShzdGFydCk7XG4gICAgdXJsICs9IGA/c3RhcnQ9JHtlbmNvZGVVUklDb21wb25lbnQoc3RhcnQpfWA7XG5cbiAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuZCA9IG5ldyBEYXRlKGVuZCk7XG4gICAgfVxuICAgIGVuZCA9IGZvcm1hdERhdGUoZW5kKTtcbiAgICB1cmwgKz0gYCZlbmQ9JHtlbmNvZGVVUklDb21wb25lbnQoZW5kKX1gO1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCB0aGlzLnJlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gYm9keSBhcyBEZWxldGVkUmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIGFsbCB0YWJzXG4gICAqL1xuICBhc3luYyB0YWJzKCk6IFByb21pc2U8RGVzY3JpYmVUYWJbXT4ge1xuICAgIGNvbnN0IHVybCA9IFt0aGlzLl9iYXNlVXJsKCksICd0YWJzJ10uam9pbignLycpO1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCB0aGlzLnJlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gYm9keSBhcyBEZXNjcmliZVRhYltdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVuIHN5c3RlbSBsaW1pdCBpbiB0aGUgb3JnYW5pemF0aW9uXG4gICAqL1xuICBhc3luYyBsaW1pdHMoKTogUHJvbWlzZTxPcmdhbml6YXRpb25MaW1pdHNJbmZvPiB7XG4gICAgY29uc3QgdXJsID0gW3RoaXMuX2Jhc2VVcmwoKSwgJ2xpbWl0cyddLmpvaW4oJy8nKTtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgdGhpcy5yZXF1ZXN0KHVybCk7XG4gICAgcmV0dXJuIGJvZHkgYXMgT3JnYW5pemF0aW9uTGltaXRzSW5mbztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgdGhlbWUgaW5mb1xuICAgKi9cbiAgYXN5bmMgdGhlbWUoKTogUHJvbWlzZTxEZXNjcmliZVRoZW1lPiB7XG4gICAgY29uc3QgdXJsID0gW3RoaXMuX2Jhc2VVcmwoKSwgJ3RoZW1lJ10uam9pbignLycpO1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCB0aGlzLnJlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gYm9keSBhcyBEZXNjcmliZVRoZW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHJlZ2lzdGVyZWQgZ2xvYmFsIHF1aWNrIGFjdGlvbnNcbiAgICovXG4gIGFzeW5jIHF1aWNrQWN0aW9ucygpOiBQcm9taXNlPERlc2NyaWJlUXVpY2tBY3Rpb25SZXN1bHRbXT4ge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCB0aGlzLnJlcXVlc3QoJy9xdWlja0FjdGlvbnMnKTtcbiAgICByZXR1cm4gYm9keSBhcyBEZXNjcmliZVF1aWNrQWN0aW9uUmVzdWx0W107XG4gIH1cblxuICAvKipcbiAgICogR2V0IHJlZmVyZW5jZSBmb3Igc3BlY2lmaWVkIGdsb2JhbCBxdWljayBhY2l0b25cbiAgICovXG4gIHF1aWNrQWN0aW9uKGFjdGlvbk5hbWU6IHN0cmluZyk6IFF1aWNrQWN0aW9uPFM+IHtcbiAgICByZXR1cm4gbmV3IFF1aWNrQWN0aW9uKHRoaXMsIGAvcXVpY2tBY3Rpb25zLyR7YWN0aW9uTmFtZX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb2R1bGUgd2hpY2ggbWFuYWdlcyBwcm9jZXNzIHJ1bGVzIGFuZCBhcHByb3ZhbCBwcm9jZXNzZXNcbiAgICovXG4gIHByb2Nlc3MgPSBuZXcgUHJvY2Vzcyh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGlvbjtcbiJdfQ==