import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.number.constructor";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.promise";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context19; _forEachInstanceProperty(_context19 = ownKeys(Object(source), true)).call(_context19, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context20; _forEachInstanceProperty(_context20 = ownKeys(Object(source))).call(_context20, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @file Command line interface for JSforce
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import http from 'http';
import url from 'url';
import crypto from 'crypto';
import _openUrl from 'open';
import { Command } from 'commander';
import inquirer from 'inquirer';
import request from '../request';
import base64url from 'base64url';
import Repl from './repl';
import jsforce, { Connection, OAuth2 } from '..';
import version from '../VERSION';
var registry = jsforce.registry;

/**
 *
 */
export var Cli = /*#__PURE__*/function () {
  function Cli() {
    _classCallCheck(this, Cli);

    _defineProperty(this, "_repl", new Repl(this));

    _defineProperty(this, "_conn", new Connection());

    _defineProperty(this, "_connName", undefined);

    _defineProperty(this, "_outputEnabled", true);

    _defineProperty(this, "_defaultLoginUrl", undefined);
  }

  _createClass(Cli, [{
    key: "readCommand",

    /**
     *
     */
    value: function readCommand() {
      return new Command().option('-u, --username [username]', 'Salesforce username').option('-p, --password [password]', 'Salesforce password (and security token, if available)').option('-c, --connection [connection]', 'Connection name stored in connection registry').option('-l, --loginUrl [loginUrl]', 'Salesforce login url').option('--sandbox', 'Login to Salesforce sandbox').option('-e, --evalScript [evalScript]', 'Script to evaluate').version(version).parse(process.argv);
    }
  }, {
    key: "start",
    value: function () {
      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var program;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                program = this.readCommand();
                this._outputEnabled = !program.evalScript;
                _context.prev = 2;
                _context.next = 5;
                return this.connect(program);

              case 5:
                if (program.evalScript) {
                  this._repl.start({
                    interactive: false,
                    evalScript: program.evalScript
                  });
                } else {
                  this._repl.start();
                }

                _context.next = 12;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](2);
                console.error(_context.t0);
                process.exit();

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 8]]);
      }));

      function start() {
        return _start.apply(this, arguments);
      }

      return start;
    }()
  }, {
    key: "getCurrentConnection",
    value: function getCurrentConnection() {
      return this._conn;
    }
  }, {
    key: "print",
    value: function print() {
      if (this._outputEnabled) {
        var _console;

        (_console = console).log.apply(_console, arguments);
      }
    }
  }, {
    key: "saveCurrentConnection",
    value: function saveCurrentConnection() {
      if (this._connName) {
        var conn = this._conn;
        var connName = this._connName;
        var connConfig = {
          oauth2: conn.oauth2 ? {
            clientId: conn.oauth2.clientId || undefined,
            clientSecret: conn.oauth2.clientSecret || undefined,
            redirectUri: conn.oauth2.redirectUri || undefined,
            loginUrl: conn.oauth2.loginUrl || undefined
          } : undefined,
          accessToken: conn.accessToken || undefined,
          instanceUrl: conn.instanceUrl || undefined,
          refreshToken: conn.refreshToken || undefined
        };
        registry.saveConnectionConfig(connName, connConfig);
      }
    }
  }, {
    key: "setLoginServer",
    value: function setLoginServer(loginServer) {
      if (!loginServer) {
        return;
      }

      if (loginServer === 'production') {
        this._defaultLoginUrl = 'https://login.salesforce.com';
      } else if (loginServer === 'sandbox') {
        this._defaultLoginUrl = 'https://test.salesforce.com';
      } else if (_indexOfInstanceProperty(loginServer).call(loginServer, 'https://') !== 0) {
        this._defaultLoginUrl = 'https://' + loginServer;
      } else {
        this._defaultLoginUrl = loginServer;
      }

      this.print("Using \"".concat(this._defaultLoginUrl, "\" as default login URL."));
    }
    /**
     *
     */

  }, {
    key: "connect",
    value: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {
        var _this = this;

        var loginServer, connConfig, username, password, identity;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                loginServer = options.loginUrl ? options.loginUrl : options.sandbox ? 'sandbox' : null;
                this.setLoginServer(loginServer);
                this._connName = options.connection;
                _context2.next = 5;
                return registry.getConnectionConfig(options.connection);

              case 5:
                connConfig = _context2.sent;
                username = options.username;

                if (!connConfig) {
                  connConfig = {};

                  if (this._defaultLoginUrl) {
                    connConfig.loginUrl = this._defaultLoginUrl;
                  }

                  username = username || options.connection;
                }

                this._conn = new Connection(connConfig);
                password = options.password;

                if (!username) {
                  _context2.next = 16;
                  break;
                }

                _context2.next = 13;
                return this.startPasswordAuth(username, password);

              case 13:
                this.saveCurrentConnection();
                _context2.next = 34;
                break;

              case 16:
                if (!(this._connName && this._conn.accessToken)) {
                  _context2.next = 34;
                  break;
                }

                this._conn.on('refresh', function () {
                  _this.print('Refreshing access token ... ');

                  _this.saveCurrentConnection();
                });

                _context2.prev = 18;
                _context2.next = 21;
                return this._conn.identity();

              case 21:
                identity = _context2.sent;
                this.print("Logged in as : ".concat(identity.username));
                _context2.next = 34;
                break;

              case 25:
                _context2.prev = 25;
                _context2.t0 = _context2["catch"](18);
                this.print(_context2.t0.message);

                if (!this._conn.oauth2) {
                  _context2.next = 32;
                  break;
                }

                throw new Error('Please re-authorize connection.');

              case 32:
                _context2.next = 34;
                return this.startPasswordAuth(this._connName);

              case 34:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[18, 25]]);
      }));

      function connect(_x) {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
    /**
     *
     */

  }, {
    key: "startPasswordAuth",
    value: function () {
      var _startPasswordAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(username, password) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return this.loginByPassword(username, password, 2);

              case 3:
                _context3.next = 12;
                break;

              case 5:
                _context3.prev = 5;
                _context3.t0 = _context3["catch"](0);

                if (!(_context3.t0.message === 'canceled')) {
                  _context3.next = 11;
                  break;
                }

                console.error('Password authentication canceled: Not logged in');
                _context3.next = 12;
                break;

              case 11:
                throw _context3.t0;

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 5]]);
      }));

      function startPasswordAuth(_x2, _x3) {
        return _startPasswordAuth.apply(this, arguments);
      }

      return startPasswordAuth;
    }()
    /**
     *
     */

  }, {
    key: "loginByPassword",
    value: function () {
      var _loginByPassword = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(username, password, retryCount) {
        var pass, result;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(password === '')) {
                  _context4.next = 2;
                  break;
                }

                throw new Error('canceled');

              case 2:
                if (!(password == null)) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 5;
                return this.promptPassword('Password: ');

              case 5:
                pass = _context4.sent;
                return _context4.abrupt("return", this.loginByPassword(username, pass, retryCount));

              case 7:
                _context4.prev = 7;
                _context4.next = 10;
                return this._conn.login(username, password);

              case 10:
                result = _context4.sent;
                this.print("Logged in as : ".concat(username));
                return _context4.abrupt("return", result);

              case 15:
                _context4.prev = 15;
                _context4.t0 = _context4["catch"](7);
                console.error(_context4.t0.message);

                if (!(retryCount > 0)) {
                  _context4.next = 22;
                  break;
                }

                return _context4.abrupt("return", this.loginByPassword(username, undefined, retryCount - 1));

              case 22:
                throw new Error('canceled');

              case 23:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[7, 15]]);
      }));

      function loginByPassword(_x4, _x5, _x6) {
        return _loginByPassword.apply(this, arguments);
      }

      return loginByPassword;
    }()
    /**
     *
     */

  }, {
    key: "disconnect",
    value: function disconnect(connName) {
      var name = connName || this._connName;

      if (name && registry.getConnectionConfig(name)) {
        registry.removeConnectionConfig(name);
        this.print("Disconnect connection '".concat(name, "'"));
      }

      this._connName = undefined;
      this._conn = new Connection();
    }
    /**
     *
     */

  }, {
    key: "authorize",
    value: function () {
      var _authorize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(clientName) {
        var name, oauth2Config, oauth2, verifier, challenge, state, authzUrl, params, identity;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                name = clientName || 'default';
                _context5.next = 3;
                return registry.getClientConfig(name);

              case 3:
                oauth2Config = _context5.sent;

                if (!(!oauth2Config || !oauth2Config.clientId)) {
                  _context5.next = 9;
                  break;
                }

                if (!(name === 'default' || name === 'sandbox')) {
                  _context5.next = 8;
                  break;
                }

                this.print('No client information registered. Downloading JSforce default client information...');
                return _context5.abrupt("return", this.downloadDefaultClientInfo(name));

              case 8:
                throw new Error("No OAuth2 client information registered : '".concat(name, "'. Please register client info first."));

              case 9:
                oauth2 = new OAuth2(oauth2Config);
                verifier = base64url.encode(crypto.randomBytes(32));
                challenge = base64url.encode(crypto.createHash('sha256').update(verifier).digest());
                state = base64url.encode(crypto.randomBytes(32));
                authzUrl = oauth2.getAuthorizationUrl({
                  code_challenge: challenge,
                  state: state
                });
                this.print('Opening authorization page in browser...');
                this.print("URL: ".concat(authzUrl));
                this.openUrl(authzUrl);
                _context5.next = 19;
                return this.waitCallback(oauth2Config.redirectUri, state);

              case 19:
                params = _context5.sent;

                if (params.code) {
                  _context5.next = 22;
                  break;
                }

                throw new Error('No authorization code returned.');

              case 22:
                if (!(params.state !== state)) {
                  _context5.next = 24;
                  break;
                }

                throw new Error('Invalid state parameter returned.');

              case 24:
                this._conn = new Connection({
                  oauth2: oauth2
                });
                this.print('Received authorization code. Please close the opened browser window.');
                _context5.next = 28;
                return this._conn.authorize(params.code, {
                  code_verifier: verifier
                });

              case 28:
                this.print('Authorized. Fetching user info...');
                _context5.next = 31;
                return this._conn.identity();

              case 31:
                identity = _context5.sent;
                this.print("Logged in as : ".concat(identity.username));
                this._connName = identity.username;
                this.saveCurrentConnection();

              case 35:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function authorize(_x7) {
        return _authorize.apply(this, arguments);
      }

      return authorize;
    }()
    /**
     *
     */

  }, {
    key: "downloadDefaultClientInfo",
    value: function () {
      var _downloadDefaultClientInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(clientName) {
        var configUrl, res, clientConfig;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                configUrl = 'https://jsforce.github.io/client-config/default.json';
                _context6.next = 3;
                return new _Promise(function (resolve, reject) {
                  request({
                    method: 'GET',
                    url: configUrl
                  }).on('complete', resolve).on('error', reject);
                });

              case 3:
                res = _context6.sent;
                clientConfig = JSON.parse(res.body);

                if (clientName === 'sandbox') {
                  clientConfig.loginUrl = 'https://test.salesforce.com';
                }

                _context6.next = 8;
                return registry.registerClientConfig(clientName, clientConfig);

              case 8:
                this.print('Client information downloaded successfully.');
                return _context6.abrupt("return", this.authorize(clientName));

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function downloadDefaultClientInfo(_x8) {
        return _downloadDefaultClientInfo.apply(this, arguments);
      }

      return downloadDefaultClientInfo;
    }()
  }, {
    key: "waitCallback",
    value: function () {
      var _waitCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(serverUrl, state) {
        var code;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (!(serverUrl && _indexOfInstanceProperty(serverUrl).call(serverUrl, 'http://localhost:') === 0)) {
                  _context7.next = 4;
                  break;
                }

                return _context7.abrupt("return", new _Promise(function (resolve, reject) {
                  var server = http.createServer(function (req, res) {
                    if (!req.url) {
                      return;
                    }

                    var qparams = url.parse(req.url, true).query;
                    res.writeHead(200, {
                      'Content-Type': 'text/html'
                    });
                    res.write('<html><script>location.href="about:blank";</script></html>');
                    res.end();

                    if (qparams.error) {
                      reject(new Error(qparams.error));
                    } else {
                      resolve(qparams);
                    }

                    server.close();
                    req.connection.end();
                    req.connection.destroy();
                  });
                  var port = Number(url.parse(serverUrl).port);
                  server.listen(port, 'localhost');
                }));

              case 4:
                _context7.next = 6;
                return this.promptMessage('Copy & paste authz code passed in redirected URL: ');

              case 6:
                code = _context7.sent;
                return _context7.abrupt("return", {
                  code: decodeURIComponent(code),
                  state: state
                });

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function waitCallback(_x9, _x10) {
        return _waitCallback.apply(this, arguments);
      }

      return waitCallback;
    }()
    /**
     *
     */

  }, {
    key: "register",
    value: function () {
      var _register = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(clientName, clientConfig) {
        var _context8,
            _this2 = this;

        var name, prompts, registered, msg, ok;
        return _regeneratorRuntime.wrap(function _callee9$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                name = clientName || 'default';
                prompts = {
                  clientId: 'Input client ID : ',
                  clientSecret: 'Input client secret (optional) : ',
                  redirectUri: 'Input redirect URI : ',
                  loginUrl: 'Input login URL (default is https://login.salesforce.com) : '
                };
                _context10.next = 4;
                return registry.getClientConfig(name);

              case 4:
                registered = _context10.sent;

                if (!registered) {
                  _context10.next = 12;
                  break;
                }

                msg = "Client '".concat(name, "' is already registered. Are you sure you want to override ? [yN] : ");
                _context10.next = 9;
                return this.promptConfirm(msg);

              case 9:
                ok = _context10.sent;

                if (ok) {
                  _context10.next = 12;
                  break;
                }

                throw new Error('Registration canceled.');

              case 12:
                _context10.next = 14;
                return _reduceInstanceProperty(_context8 = _Object$keys(prompts)).call(_context8, /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(promise, name) {
                    var cconfig, promptName, message, value;
                    return _regeneratorRuntime.wrap(function _callee8$(_context9) {
                      while (1) {
                        switch (_context9.prev = _context9.next) {
                          case 0:
                            _context9.next = 2;
                            return promise;

                          case 2:
                            cconfig = _context9.sent;
                            promptName = name;
                            message = prompts[promptName];

                            if (cconfig[promptName]) {
                              _context9.next = 11;
                              break;
                            }

                            _context9.next = 8;
                            return _this2.promptMessage(message);

                          case 8:
                            value = _context9.sent;

                            if (!value) {
                              _context9.next = 11;
                              break;
                            }

                            return _context9.abrupt("return", _objectSpread(_objectSpread({}, cconfig), {}, _defineProperty({}, promptName, value)));

                          case 11:
                            return _context9.abrupt("return", cconfig);

                          case 12:
                          case "end":
                            return _context9.stop();
                        }
                      }
                    }, _callee8);
                  }));

                  return function (_x13, _x14) {
                    return _ref.apply(this, arguments);
                  };
                }(), _Promise.resolve(clientConfig));

              case 14:
                clientConfig = _context10.sent;
                _context10.next = 17;
                return registry.registerClientConfig(name, clientConfig);

              case 17:
                this.print('Client registered successfully.');

              case 18:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee9, this);
      }));

      function register(_x11, _x12) {
        return _register.apply(this, arguments);
      }

      return register;
    }()
    /**
     *
     */

  }, {
    key: "listConnections",
    value: function () {
      var _listConnections = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var names, i, name;
        return _regeneratorRuntime.wrap(function _callee10$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return registry.getConnectionNames();

              case 2:
                names = _context11.sent;

                for (i = 0; i < names.length; i++) {
                  name = names[i];
                  this.print((name === this._connName ? '* ' : '  ') + name);
                }

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee10, this);
      }));

      function listConnections() {
        return _listConnections.apply(this, arguments);
      }

      return listConnections;
    }()
    /**
     *
     */

  }, {
    key: "getConnectionNames",
    value: function () {
      var _getConnectionNames = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                return _context12.abrupt("return", registry.getConnectionNames());

              case 1:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee11);
      }));

      function getConnectionNames() {
        return _getConnectionNames.apply(this, arguments);
      }

      return getConnectionNames;
    }()
    /**
     *
     */

  }, {
    key: "getClientNames",
    value: function () {
      var _getClientNames = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        return _regeneratorRuntime.wrap(function _callee12$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                return _context13.abrupt("return", registry.getClientNames());

              case 1:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee12);
      }));

      function getClientNames() {
        return _getClientNames.apply(this, arguments);
      }

      return getClientNames;
    }()
    /**
     *
     */

  }, {
    key: "prompt",
    value: function () {
      var _prompt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(type, message) {
        var answer;
        return _regeneratorRuntime.wrap(function _callee13$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                this._repl.pause();

                _context14.next = 3;
                return inquirer.prompt([{
                  type: type,
                  name: 'value',
                  message: message
                }]);

              case 3:
                answer = _context14.sent;

                this._repl.resume();

                return _context14.abrupt("return", answer.value);

              case 6:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee13, this);
      }));

      function prompt(_x15, _x16) {
        return _prompt.apply(this, arguments);
      }

      return prompt;
    }()
    /**
     *
     */

  }, {
    key: "promptMessage",
    value: function () {
      var _promptMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(message) {
        return _regeneratorRuntime.wrap(function _callee14$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                return _context15.abrupt("return", this.prompt('input', message));

              case 1:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee14, this);
      }));

      function promptMessage(_x17) {
        return _promptMessage.apply(this, arguments);
      }

      return promptMessage;
    }()
  }, {
    key: "promptPassword",
    value: function () {
      var _promptPassword = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(message) {
        return _regeneratorRuntime.wrap(function _callee15$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                return _context16.abrupt("return", this.prompt('password', message));

              case 1:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee15, this);
      }));

      function promptPassword(_x18) {
        return _promptPassword.apply(this, arguments);
      }

      return promptPassword;
    }()
    /**
     *
     */

  }, {
    key: "promptConfirm",
    value: function () {
      var _promptConfirm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(message) {
        return _regeneratorRuntime.wrap(function _callee16$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                return _context17.abrupt("return", this.prompt('confirm', message));

              case 1:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee16, this);
      }));

      function promptConfirm(_x19) {
        return _promptConfirm.apply(this, arguments);
      }

      return promptConfirm;
    }()
    /**
     *
     */

  }, {
    key: "openUrl",
    value: function openUrl(url) {
      _openUrl(url);
    }
    /**
     *
     */

  }, {
    key: "openUrlUsingSession",
    value: function openUrlUsingSession(url) {
      var _context18;

      var frontdoorUrl = _concatInstanceProperty(_context18 = "".concat(this._conn.instanceUrl, "/secur/frontdoor.jsp?sid=")).call(_context18, this._conn.accessToken);

      if (url) {
        frontdoorUrl += '&retURL=' + encodeURIComponent(url);
      }

      this.openUrl(frontdoorUrl);
    }
  }]);

  return Cli;
}();
/* ------------------------------------------------------------------------- */

var cli = new Cli();
export default cli;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,