import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.string.replace";
import "core-js/modules/es.string.split";
import _Object$keys2 from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Object$getOwnPropertyNames from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-names";
import _Object$getPrototypeOf from "@babel/runtime-corejs3/core-js-stable/object/get-prototype-of";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context6; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context6 = Object.prototype.toString.call(o)).call(_context6, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * @file Creates REPL interface with built in Salesforce API objects and automatically resolves promise object
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 * @private
 */
import { EventEmitter } from 'events';
import { start as startRepl } from 'repl';
import { Transform } from 'stream';
import jsforce from '..';
import { isPromiseLike, isNumber, isFunction, isObject } from '../util/function';

/**
 * Intercept the evaled value returned from repl evaluator, convert and send back to output.
 * @private
 */
function injectBefore(replServer, method, beforeFn) {
  var _orig = replServer[method];

  replServer[method] = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var callback = args.pop();
    beforeFn.apply(null, _concatInstanceProperty(args).call(args, function (err, res) {
      if (err || res) {
        callback(err, res);
      } else {
        _orig.apply(replServer, _concatInstanceProperty(args).call(args, callback));
      }
    }));
  };

  return replServer;
}
/**
 * @private
 */


function injectAfter(replServer, method, afterFn) {
  var _orig = replServer[method];

  replServer[method] = function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var callback = args.pop();

    _orig.apply(replServer, _concatInstanceProperty(args).call(args, function () {
      try {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        afterFn.apply(null, _concatInstanceProperty(args).call(args, callback));
      } catch (e) {
        callback(e);
      }
    }));
  };

  return replServer;
}
/**
 * When the result was "promise", resolve its value
 * @private
 */


function promisify(err, value, callback) {
  // callback immediately if no value passed
  if (!callback && isFunction(value)) {
    callback = value;
    return callback();
  }

  if (err) {
    throw err;
  }

  if (isPromiseLike(value)) {
    value.then(function (v) {
      callback(null, v);
    }, function (err) {
      callback(err);
    });
  } else {
    callback(null, value);
  }
}
/**
 * Output object to stdout in JSON representation
 * @private
 */


function outputToStdout(prettyPrint) {
  if (prettyPrint && !isNumber(prettyPrint)) {
    prettyPrint = 4;
  }

  return function (err, value, callback) {
    if (err) {
      console.error(err);
    } else {
      var str = _JSON$stringify(value, null, prettyPrint);

      console.log(str);
    }

    callback(err, value);
  };
}
/**
 * define get accessor using Object.defineProperty
 * @private
 */


function defineProp(obj, prop, getter) {
  if (_Object$defineProperty) {
    _Object$defineProperty(obj, prop, {
      get: getter
    });
  }
}
/**
 *
 */


export var Repl = /*#__PURE__*/function () {
  function Repl(cli) {
    var _this = this;

    _classCallCheck(this, Repl);

    _defineProperty(this, "_cli", void 0);

    _defineProperty(this, "_in", void 0);

    _defineProperty(this, "_out", void 0);

    _defineProperty(this, "_interactive", true);

    _defineProperty(this, "_paused", false);

    _defineProperty(this, "_replServer", undefined);

    this._cli = cli;
    this._in = new Transform();
    this._out = new Transform();

    this._in._transform = function (chunk, encoding, callback) {
      if (!_this._paused) {
        _this._in.push(chunk);
      }

      callback();
    };

    this._out._transform = function (chunk, encoding, callback) {
      if (!_this._paused && _this._interactive !== false) {
        _this._out.push(chunk);
      }

      callback();
    };
  }
  /**
   *
   */


  _createClass(Repl, [{
    key: "start",
    value: function start() {
      var _this2 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this._interactive = options.interactive !== false;
      process.stdin.resume();

      if (process.stdin.setRawMode) {
        process.stdin.setRawMode(true);
      }

      process.stdin.pipe(this._in);

      this._out.pipe(process.stdout);

      defineProp(this._out, 'columns', function () {
        return process.stdout.columns;
      });
      this._replServer = startRepl({
        input: this._in,
        output: this._out,
        terminal: true
      });

      this._defineAdditionalCommands();

      this._replServer = injectBefore(this._replServer, 'completer', function (line, callback) {
        _this2.complete(line).then(function (rets) {
          callback(null, rets);
        }).catch(function (err) {
          callback(err);
        });
      });
      this._replServer = injectAfter(this._replServer, 'eval', promisify);

      if (options.interactive === false) {
        this._replServer = injectAfter(this._replServer, 'eval', outputToStdout(options.prettyPrint));
        this._replServer = injectAfter(this._replServer, 'eval', function () {
          process.exit();
        });
      }

      this._replServer.on('exit', function () {
        return process.exit();
      });

      this._defineBuiltinVars(this._replServer.context);

      if (options.evalScript) {
        this._in.write(options.evalScript + '\n', 'utf-8');
      }

      return this;
    }
    /**
     *
     */

  }, {
    key: "_defineAdditionalCommands",
    value: function _defineAdditionalCommands() {
      var cli = this._cli;
      var replServer = this._replServer;

      if (!replServer) {
        return;
      }

      replServer.defineCommand('connections', {
        help: 'List currenty registered Salesforce connections',
        action: function () {
          var _action = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return cli.listConnections();

                  case 2:
                    replServer.displayPrompt();

                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function action() {
            return _action.apply(this, arguments);
          }

          return action;
        }()
      });
      replServer.defineCommand('connect', {
        help: 'Connect to Salesforce instance',
        action: function () {
          var _action2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
            var _len4,
                args,
                _key4,
                name,
                password,
                params,
                _args2 = arguments;

            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    for (_len4 = _args2.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                      args[_key4] = _args2[_key4];
                    }

                    name = args[0], password = args[1];
                    params = password ? {
                      connection: name,
                      username: name,
                      password: password
                    } : {
                      connection: name,
                      username: name
                    };
                    _context2.prev = 3;
                    _context2.next = 6;
                    return cli.connect(params);

                  case 6:
                    _context2.next = 11;
                    break;

                  case 8:
                    _context2.prev = 8;
                    _context2.t0 = _context2["catch"](3);
                    console.error(_context2.t0.message);

                  case 11:
                    replServer.displayPrompt();

                  case 12:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, null, [[3, 8]]);
          }));

          function action() {
            return _action2.apply(this, arguments);
          }

          return action;
        }()
      });
      replServer.defineCommand('disconnect', {
        help: 'Disconnect connection and erase it from registry',
        action: function action(name) {
          cli.disconnect(name);
          replServer.displayPrompt();
        }
      });
      replServer.defineCommand('use', {
        help: 'Specify login server to establish connection',
        action: function action(loginServer) {
          cli.setLoginServer(loginServer);
          replServer.displayPrompt();
        }
      });
      replServer.defineCommand('authorize', {
        help: 'Connect to Salesforce using OAuth2 authorization flow',
        action: function () {
          var _action3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(clientName) {
            return _regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.prev = 0;
                    _context3.next = 3;
                    return cli.authorize(clientName);

                  case 3:
                    _context3.next = 8;
                    break;

                  case 5:
                    _context3.prev = 5;
                    _context3.t0 = _context3["catch"](0);
                    console.error(_context3.t0.message);

                  case 8:
                    replServer.displayPrompt();

                  case 9:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, null, [[0, 5]]);
          }));

          function action(_x) {
            return _action3.apply(this, arguments);
          }

          return action;
        }()
      });
      replServer.defineCommand('register', {
        help: 'Register OAuth2 client information',
        action: function () {
          var _action4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
            var _len5,
                args,
                _key5,
                clientName,
                clientId,
                clientSecret,
                redirectUri,
                loginUrl,
                config,
                _args4 = arguments;

            return _regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    for (_len5 = _args4.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                      args[_key5] = _args4[_key5];
                    }

                    clientName = args[0], clientId = args[1], clientSecret = args[2], redirectUri = args[3], loginUrl = args[4];
                    config = {
                      clientId: clientId,
                      clientSecret: clientSecret,
                      redirectUri: redirectUri,
                      loginUrl: loginUrl
                    };
                    _context4.prev = 3;
                    _context4.next = 6;
                    return cli.register(clientName, config);

                  case 6:
                    _context4.next = 11;
                    break;

                  case 8:
                    _context4.prev = 8;
                    _context4.t0 = _context4["catch"](3);
                    console.error(_context4.t0.message);

                  case 11:
                    replServer.displayPrompt();

                  case 12:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, null, [[3, 8]]);
          }));

          function action() {
            return _action4.apply(this, arguments);
          }

          return action;
        }()
      });
      replServer.defineCommand('open', {
        help: 'Open Salesforce web page using established connection',
        action: function action(url) {
          cli.openUrlUsingSession(url);
          replServer.displayPrompt();
        }
      });
    }
    /**
     *
     */

  }, {
    key: "pause",
    value: function pause() {
      this._paused = true;

      if (process.stdin.setRawMode) {
        process.stdin.setRawMode(false);
      }
    }
    /**
     *
     */

  }, {
    key: "resume",
    value: function resume() {
      this._paused = false;
      process.stdin.resume();

      if (process.stdin.setRawMode) {
        process.stdin.setRawMode(true);
      }
    }
    /**
     *
     */

  }, {
    key: "complete",
    value: function () {
      var _complete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(line) {
        var tokens, _tokens, command, _tokens$, keyword, candidates;

        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                tokens = line.replace(/^\s+/, '').split(/\s+/);
                _tokens = _slicedToArray(tokens, 2), command = _tokens[0], _tokens$ = _tokens[1], keyword = _tokens$ === void 0 ? '' : _tokens$;

                if (!(command[0] === '.' && tokens.length === 2)) {
                  _context5.next = 19;
                  break;
                }

                candidates = [];

                if (!(command === '.connect' || command === '.disconnect')) {
                  _context5.next = 10;
                  break;
                }

                _context5.next = 7;
                return this._cli.getConnectionNames();

              case 7:
                candidates = _context5.sent;
                _context5.next = 17;
                break;

              case 10:
                if (!(command === '.authorize')) {
                  _context5.next = 16;
                  break;
                }

                _context5.next = 13;
                return this._cli.getClientNames();

              case 13:
                candidates = _context5.sent;
                _context5.next = 17;
                break;

              case 16:
                if (command === '.use') {
                  candidates = ['production', 'sandbox'];
                }

              case 17:
                candidates = _filterInstanceProperty(candidates).call(candidates, function (name) {
                  return _indexOfInstanceProperty(name).call(name, keyword) === 0;
                });
                return _context5.abrupt("return", [candidates, keyword]);

              case 19:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function complete(_x2) {
        return _complete.apply(this, arguments);
      }

      return complete;
    }()
    /**
     * Map all jsforce object to REPL context
     * @private
     */

  }, {
    key: "_defineBuiltinVars",
    value: function _defineBuiltinVars(context) {
      var cli = this._cli; // define salesforce package root objects

      for (var key in jsforce) {
        if (Object.prototype.hasOwnProperty.call(jsforce, key) && !global[key]) {
          context[key] = jsforce[key];
        }
      } // expose jsforce package root object in context.


      context.jsforce = jsforce;

      function createProxyFunc(prop) {
        return function () {
          var _ref;

          var conn = cli.getCurrentConnection();
          return (_ref = conn)[prop].apply(_ref, arguments);
        };
      }

      function createProxyAccessor(prop) {
        return function () {
          var conn = cli.getCurrentConnection();
          return conn[prop];
        };
      }

      var conn = cli.getCurrentConnection(); // list all props in connection instance, other than EventEmitter or object built-in methods

      var props = {};
      var o = conn;

      while (o && o !== EventEmitter.prototype && o !== Object.prototype) {
        var _iterator = _createForOfIteratorHelper(_Object$getOwnPropertyNames(o)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var p = _step.value;

            if (p !== 'constructor') {
              props[p] = true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        o = _Object$getPrototypeOf(o);
      }

      for (var _i = 0, _Object$keys = _Object$keys2(props); _i < _Object$keys.length; _i++) {
        var _prop = _Object$keys[_i];

        if (typeof global[_prop] !== 'undefined') {
          // avoid global override
          continue;
        }

        if (_indexOfInstanceProperty(_prop).call(_prop, '_') === 0) {
          // ignore private
          continue;
        }

        if (isFunction(conn[_prop])) {
          context[_prop] = createProxyFunc(_prop);
        } else if (isObject(conn[_prop])) {
          defineProp(context, _prop, createProxyAccessor(_prop));
        }
      } // expose default connection as "$conn"


      defineProp(context, '$conn', function () {
        return cli.getCurrentConnection();
      });
    }
  }]);

  return Repl;
}();
export default Repl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,