import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.array.includes";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.array.join";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.promise";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.string.includes";
import "core-js/modules/es.string.iterator";
import "core-js/modules/es.string.split";
import "core-js/modules/web.dom-collections.iterator";
import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _toConsumableArray from "@babel/runtime-corejs3/helpers/toConsumableArray";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _sortInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/sort";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context34; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context34 = Object.prototype.toString.call(o)).call(_context34, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context32; _forEachInstanceProperty(_context32 = ownKeys(Object(source), true)).call(_context32, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context33; _forEachInstanceProperty(_context33 = ownKeys(Object(source))).call(_context33, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @file Manages query for records in Salesforce
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { getLogger } from './util/logger';
import RecordStream, { Serializable } from './record-stream';
import { createSOQL } from './soql-builder';
var ResponseTargetValues = ['QueryResult', 'Records', 'SingleRecord', 'Count'];
export var ResponseTargets = _reduceInstanceProperty(ResponseTargetValues).call(ResponseTargetValues, function (values, target) {
  return _objectSpread(_objectSpread({}, values), {}, _defineProperty({}, target, target));
}, {});

/**
 *
 */
var DEFAULT_BULK_THRESHOLD = 200;
/**
 * Query
 */

export var Query = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Query, _EventEmitter);

  var _super = _createSuper(Query);

  /**
   *
   */
  function Query(conn, config, options) {
    var _this;

    _classCallCheck(this, Query);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "_conn", void 0);

    _defineProperty(_assertThisInitialized(_this), "_logger", void 0);

    _defineProperty(_assertThisInitialized(_this), "_soql", void 0);

    _defineProperty(_assertThisInitialized(_this), "_locator", void 0);

    _defineProperty(_assertThisInitialized(_this), "_config", {});

    _defineProperty(_assertThisInitialized(_this), "_children", []);

    _defineProperty(_assertThisInitialized(_this), "_options", void 0);

    _defineProperty(_assertThisInitialized(_this), "_executed", false);

    _defineProperty(_assertThisInitialized(_this), "_finished", false);

    _defineProperty(_assertThisInitialized(_this), "_chaining", false);

    _defineProperty(_assertThisInitialized(_this), "_promise", void 0);

    _defineProperty(_assertThisInitialized(_this), "_stream", void 0);

    _defineProperty(_assertThisInitialized(_this), "totalSize", void 0);

    _defineProperty(_assertThisInitialized(_this), "totalFetched", void 0);

    _defineProperty(_assertThisInitialized(_this), "offset", _this.skip);

    _defineProperty(_assertThisInitialized(_this), "orderby", _sortInstanceProperty(_this));

    _defineProperty(_assertThisInitialized(_this), "exec", _this.execute);

    _defineProperty(_assertThisInitialized(_this), "run", _this.execute);

    _defineProperty(_assertThisInitialized(_this), "delete", _this.destroy);

    _defineProperty(_assertThisInitialized(_this), "del", _this.destroy);

    _this._conn = conn;
    _this._logger = conn._logLevel ? Query._logger.createInstance(conn._logLevel) : Query._logger;

    if (typeof config === 'string') {
      _this._soql = config;
    } else if (typeof config.locator === 'string') {
      var locator = config.locator;

      if (_indexOfInstanceProperty(locator).call(locator, '/') >= 0) {
        _this._locator = locator.split('/').pop();
      }
    } else {
      var _ref = config,
          _fields = _ref.fields,
          includes = _includesInstanceProperty(_ref),
          _sort2 = _sortInstanceProperty(_ref),
          _config = _objectWithoutProperties(_ref, ["fields", "includes", "sort"]);

      _this._config = _config;

      _this.select(_fields);

      if (includes) {
        _this.includeChildren(includes);
      }

      if (_sort2) {
        _sortInstanceProperty(_this).call(_this, _sort2);
      }
    }

    _this._options = _objectSpread({
      headers: {},
      maxFetch: 10000,
      autoFetch: false,
      scanAll: false,
      responseTarget: 'QueryResult'
    }, options || {}); // promise instance

    _this._promise = new _Promise(function (resolve, reject) {
      _this.on('response', resolve);

      _this.on('error', reject);
    });
    _this._stream = new Serializable();

    _this.on('record', function (record) {
      return _this._stream.push(record);
    });

    _this.on('end', function () {
      return _this._stream.push(null);
    });

    _this.on('error', function (err) {
      try {
        _this._stream.emit('error', err);
      } catch (e) {// eslint-disable-line no-empty
      }
    });

    return _this;
  }
  /**
   * Select fields to include in the returning result
   */


  _createClass(Query, [{
    key: "select",
    value: function select() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';

      if (this._soql) {
        throw Error('Cannot set select fields for the query which has already built SOQL.');
      }

      function toFieldArray(fields) {
        var _context, _context2, _context4, _context5;

        return typeof fields === 'string' ? fields.split(/\s*,\s*/) : _Array$isArray(fields) ? _reduceInstanceProperty(_context = _mapInstanceProperty(_context2 = fields).call(_context2, toFieldArray)).call(_context, function (fs, f) {
          var _context3;

          return _concatInstanceProperty(_context3 = []).call(_context3, _toConsumableArray(fs), _toConsumableArray(f));
        }, []) : _reduceInstanceProperty(_context4 = _mapInstanceProperty(_context5 = _Object$entries(fields)).call(_context5, function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
              f = _ref3[0],
              v = _ref3[1];

          if (typeof v === 'number' || typeof v === 'boolean') {
            return v ? [f] : [];
          } else {
            var _context6;

            return _mapInstanceProperty(_context6 = toFieldArray(v)).call(_context6, function (p) {
              var _context7;

              return _concatInstanceProperty(_context7 = "".concat(f, ".")).call(_context7, p);
            });
          }
        })).call(_context4, function (fs, f) {
          var _context8;

          return _concatInstanceProperty(_context8 = []).call(_context8, _toConsumableArray(fs), _toConsumableArray(f));
        }, []);
      }

      if (fields) {
        this._config.fields = toFieldArray(fields);
      } // force convert query record type without changing instance;


      return this;
    }
    /**
     * Set query conditions to filter the result records
     */

  }, {
    key: "where",
    value: function where(conditions) {
      if (this._soql) {
        throw Error('Cannot set where conditions for the query which has already built SOQL.');
      }

      this._config.conditions = conditions;
      return this;
    }
    /**
     * Limit the returning result
     */

  }, {
    key: "limit",
    value: function limit(_limit) {
      if (this._soql) {
        throw Error('Cannot set limit for the query which has already built SOQL.');
      }

      this._config.limit = _limit;
      return this;
    }
    /**
     * Skip records
     */

  }, {
    key: "skip",
    value: function skip(offset) {
      if (this._soql) {
        throw Error('Cannot set skip/offset for the query which has already built SOQL.');
      }

      this._config.offset = offset;
      return this;
    }
    /**
     * Synonym of Query#skip()
     */

  }, {
    key: "sort",
    value: function (_sort) {
      function sort(_x, _x2) {
        return _sort.apply(this, arguments);
      }

      sort.toString = function () {
        return _sort.toString();
      };

      return sort;
    }(function (sort, dir) {
      if (this._soql) {
        throw Error('Cannot set sort for the query which has already built SOQL.');
      }

      if (typeof sort === 'string' && typeof dir !== 'undefined') {
        this._config.sort = [[sort, dir]];
      } else {
        this._config.sort = sort;
      }

      return this;
    })
    /**
     * Synonym of Query#sort()
     */

  }, {
    key: "include",
    value: function include(childRelName, conditions, fields) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      if (this._soql) {
        throw Error('Cannot include child relationship into the query which has already built SOQL.');
      }

      var childConfig = {
        fields: fields === null ? undefined : fields,
        table: childRelName,
        conditions: conditions === null ? undefined : conditions,
        limit: options.limit,
        offset: options.offset,
        sort: _sortInstanceProperty(options)
      }; // eslint-disable-next-line no-use-before-define

      var childQuery = new SubQuery(this._conn, childRelName, childConfig, this);

      this._children.push(childQuery);

      return childQuery;
    }
    /**
     * Include child relationship queryies, but not moving down to the children context
     */

  }, {
    key: "includeChildren",
    value: function includeChildren(includes) {
      if (this._soql) {
        throw Error('Cannot include child relationship into the query which has already built SOQL.');
      }

      var _iterator = _createForOfIteratorHelper(_Object$keys(includes)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var crname = _step.value;

          var _ref4 = includes[crname],
              _conditions = _ref4.conditions,
              _fields2 = _ref4.fields,
              _options = _objectWithoutProperties(_ref4, ["conditions", "fields"]);

          this.include(crname, _conditions, _fields2, _options);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return this;
    }
    /**
     * Setting maxFetch query option
     */

  }, {
    key: "maxFetch",
    value: function maxFetch(_maxFetch) {
      this._options.maxFetch = _maxFetch;
      return this;
    }
    /**
     * Switching auto fetch mode
     */

  }, {
    key: "autoFetch",
    value: function autoFetch(_autoFetch) {
      this._options.autoFetch = _autoFetch;
      return this;
    }
    /**
     * Set flag to scan all records including deleted and archived.
     */

  }, {
    key: "scanAll",
    value: function scanAll(_scanAll) {
      this._options.scanAll = _scanAll;
      return this;
    }
    /**
     *
     */

  }, {
    key: "setResponseTarget",
    value: function setResponseTarget(responseTarget) {
      if (responseTarget in ResponseTargets) {
        this._options.responseTarget = responseTarget;
      } // force change query response target without changing instance


      return this;
    }
    /**
     * Execute query and fetch records from server.
     */

  }, {
    key: "execute",
    value: function execute() {
      var _this2 = this;

      var options_ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this._executed) {
        throw new Error('re-executing already executed query');
      }

      if (this._finished) {
        throw new Error('executing already closed query');
      }

      var options = {
        headers: options_.headers || this._options.headers,
        responseTarget: options_.responseTarget || this._options.responseTarget,
        autoFetch: options_.autoFetch || this._options.autoFetch,
        maxFetch: options_.maxFetch || this._options.maxFetch,
        scanAll: options_.scanAll || this._options.scanAll
      }; // collect fetched records in array
      // only when response target is Records and
      // either callback or chaining promises are available to this query.

      this.once('fetch', function () {
        if (options.responseTarget === ResponseTargets.Records && _this2._chaining) {
          _this2._logger.debug('--- collecting all fetched records ---');

          var records = [];

          var onRecord = function onRecord(record) {
            return records.push(record);
          };

          _this2.on('record', onRecord);

          _this2.once('end', function () {
            _this2.removeListener('record', onRecord);

            _this2.emit('response', records, _this2);
          });
        }
      }); // flag to prevent re-execution

      this._executed = true;

      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                // start actual query
                _this2._logger.debug('>>> Query start >>>');

                _context9.prev = 1;
                _context9.next = 4;
                return _this2._execute(options);

              case 4:
                _this2._logger.debug('*** Query finished ***');

                _context9.next = 11;
                break;

              case 7:
                _context9.prev = 7;
                _context9.t0 = _context9["catch"](1);

                _this2._logger.debug('--- Query error ---', _context9.t0);

                _this2.emit('error', _context9.t0);

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee, null, [[1, 7]]);
      }))(); // return Query instance for chaining


      return this;
    }
    /**
     * Synonym of Query#execute()
     */

  }, {
    key: "_execute",

    /**
     * @private
     */
    value: function () {
      var _execute2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {
        var headers, responseTarget, autoFetch, maxFetch, scanAll, url, soql, data, res, numRecords, totalFetched, i, record;
        return _regeneratorRuntime.wrap(function _callee2$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                headers = options.headers, responseTarget = options.responseTarget, autoFetch = options.autoFetch, maxFetch = options.maxFetch, scanAll = options.scanAll;
                url = '';

                if (!this._locator) {
                  _context10.next = 6;
                  break;
                }

                url = [this._conn._baseUrl(), '/query/', this._locator].join('');
                _context10.next = 12;
                break;

              case 6:
                _context10.next = 8;
                return this.toSOQL();

              case 8:
                soql = _context10.sent;
                this.totalFetched = 0;

                this._logger.debug("SOQL = ".concat(soql));

                url = [this._conn._baseUrl(), '/', scanAll ? 'queryAll' : 'query', '?q=', encodeURIComponent(soql)].join('');

              case 12:
                _context10.next = 14;
                return this._conn.request({
                  method: 'GET',
                  url: url,
                  headers: headers
                });

              case 14:
                data = _context10.sent;
                this.emit('fetch');
                this.totalSize = data.totalSize;
                _context10.t0 = responseTarget;
                _context10.next = _context10.t0 === ResponseTargets.SingleRecord ? 20 : _context10.t0 === ResponseTargets.Records ? 22 : _context10.t0 === ResponseTargets.Count ? 24 : 26;
                break;

              case 20:
                res = data.records && data.records.length > 0 ? data.records[0] : null;
                return _context10.abrupt("break", 27);

              case 22:
                res = data.records;
                return _context10.abrupt("break", 27);

              case 24:
                res = data.totalSize;
                return _context10.abrupt("break", 27);

              case 26:
                res = data;

              case 27:
                // only fire response event when it should be notified per fetch
                if (responseTarget !== ResponseTargets.Records) {
                  this.emit('response', res, this);
                } // streaming record instances


                numRecords = data.records && data.records.length || 0;
                totalFetched = this.totalFetched || 0;
                i = 0;

              case 31:
                if (!(i < numRecords)) {
                  _context10.next = 41;
                  break;
                }

                if (!(totalFetched >= maxFetch)) {
                  _context10.next = 35;
                  break;
                }

                this._finished = true;
                return _context10.abrupt("break", 41);

              case 35:
                record = data.records[i];
                this.emit('record', record, totalFetched, this);
                totalFetched += 1;

              case 38:
                i++;
                _context10.next = 31;
                break;

              case 41:
                this.totalFetched = totalFetched;

                if (data.nextRecordsUrl) {
                  this._locator = data.nextRecordsUrl.split('/').pop();
                }

                this._finished = this._finished || data.done || !autoFetch;

                if (this._finished) {
                  this.emit('end');
                } else {
                  this._execute(options);
                }

                return _context10.abrupt("return", res);

              case 46:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee2, this);
      }));

      function _execute(_x3) {
        return _execute2.apply(this, arguments);
      }

      return _execute;
    }()
    /**
     * Obtain readable stream instance
     */

  }, {
    key: "stream",
    value: function stream() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'csv';

      if (!this._finished && !this._executed) {
        this.execute({
          autoFetch: true
        });
      }

      return type === 'record' ? this._stream : this._stream.stream(type);
    }
    /**
     * Pipe the queried records to another stream
     * This is for backward compatibility; Query is not a record stream instance anymore in 2.0.
     * If you want a record stream instance, use `Query#stream('record')`.
     */

  }, {
    key: "pipe",
    value: function pipe(stream) {
      return this.stream('record').pipe(stream);
    }
    /**
     * @protected
     */

  }, {
    key: "_expandFields",
    value: function () {
      var _expandFields2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(sobject_) {
        var _context11, _context12, _context13, _context15, _context16;

        var _this$_config, _this$_config$fields, fields, _this$_config$table, table, sobject, _yield$Promise$all, _yield$Promise$all2, efields;

        return _regeneratorRuntime.wrap(function _callee4$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                if (!this._soql) {
                  _context17.next = 2;
                  break;
                }

                throw new Error('Cannot expand fields for the query which has already built SOQL.');

              case 2:
                _this$_config = this._config, _this$_config$fields = _this$_config.fields, fields = _this$_config$fields === void 0 ? [] : _this$_config$fields, _this$_config$table = _this$_config.table, table = _this$_config$table === void 0 ? '' : _this$_config$table;
                sobject = sobject_ || table;

                this._logger.debug(_concatInstanceProperty(_context11 = "_expandFields: sobject = ".concat(sobject, ", fields = ")).call(_context11, fields.join(', ')));

                _context17.next = 7;
                return _Promise.all(_concatInstanceProperty(_context12 = [this._expandAsteriskFields(sobject, fields)]).call(_context12, _toConsumableArray(_mapInstanceProperty(_context13 = this._children).call(_context13, /*#__PURE__*/function () {
                  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(childQuery) {
                    return _regeneratorRuntime.wrap(function _callee3$(_context14) {
                      while (1) {
                        switch (_context14.prev = _context14.next) {
                          case 0:
                            _context14.next = 2;
                            return childQuery._expandFields();

                          case 2:
                            return _context14.abrupt("return", []);

                          case 3:
                          case "end":
                            return _context14.stop();
                        }
                      }
                    }, _callee3);
                  }));

                  return function (_x5) {
                    return _ref6.apply(this, arguments);
                  };
                }()))));

              case 7:
                _yield$Promise$all = _context17.sent;
                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);
                efields = _yield$Promise$all2[0];
                this._config.fields = efields;
                this._config.includes = _reduceInstanceProperty(_context15 = _mapInstanceProperty(_context16 = this._children).call(_context16, function (cquery) {
                  var cconfig = cquery._query._config;
                  return [cconfig.table, cconfig];
                })).call(_context15, function (includes, _ref7) {
                  var _ref8 = _slicedToArray(_ref7, 2),
                      ctable = _ref8[0],
                      cconfig = _ref8[1];

                  return _objectSpread(_objectSpread({}, includes), {}, _defineProperty({}, ctable, cconfig));
                }, {});

              case 12:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee4, this);
      }));

      function _expandFields(_x4) {
        return _expandFields2.apply(this, arguments);
      }

      return _expandFields;
    }()
    /**
     *
     */

  }, {
    key: "_findRelationObject",
    value: function () {
      var _findRelationObject2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(relName) {
        var _context18;

        var table, sobject, upperRname, _iterator2, _step2, cr;

        return _regeneratorRuntime.wrap(function _callee5$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                table = this._config.table;

                if (table) {
                  _context19.next = 3;
                  break;
                }

                throw new Error('No table information provided in the query');

              case 3:
                this._logger.debug(_concatInstanceProperty(_context18 = "finding table for relation \"".concat(relName, "\" in \"")).call(_context18, table, "\"..."));

                _context19.next = 6;
                return this._conn.describe$(table);

              case 6:
                sobject = _context19.sent;
                upperRname = relName.toUpperCase();
                _iterator2 = _createForOfIteratorHelper(sobject.childRelationships);
                _context19.prev = 9;

                _iterator2.s();

              case 11:
                if ((_step2 = _iterator2.n()).done) {
                  _context19.next = 17;
                  break;
                }

                cr = _step2.value;

                if (!((cr.relationshipName || '').toUpperCase() === upperRname && cr.childSObject)) {
                  _context19.next = 15;
                  break;
                }

                return _context19.abrupt("return", cr.childSObject);

              case 15:
                _context19.next = 11;
                break;

              case 17:
                _context19.next = 22;
                break;

              case 19:
                _context19.prev = 19;
                _context19.t0 = _context19["catch"](9);

                _iterator2.e(_context19.t0);

              case 22:
                _context19.prev = 22;

                _iterator2.f();

                return _context19.finish(22);

              case 25:
                throw new Error("No child relationship found: ".concat(relName));

              case 26:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee5, this, [[9, 19, 22, 25]]);
      }));

      function _findRelationObject(_x6) {
        return _findRelationObject2.apply(this, arguments);
      }

      return _findRelationObject;
    }()
    /**
     *
     */

  }, {
    key: "_expandAsteriskFields",
    value: function () {
      var _expandAsteriskFields2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(sobject, fields) {
        var _this3 = this;

        var expandedFields;
        return _regeneratorRuntime.wrap(function _callee7$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return _Promise.all(_mapInstanceProperty(fields).call(fields, /*#__PURE__*/function () {
                  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(field) {
                    return _regeneratorRuntime.wrap(function _callee6$(_context20) {
                      while (1) {
                        switch (_context20.prev = _context20.next) {
                          case 0:
                            return _context20.abrupt("return", _this3._expandAsteriskField(sobject, field));

                          case 1:
                          case "end":
                            return _context20.stop();
                        }
                      }
                    }, _callee6);
                  }));

                  return function (_x9) {
                    return _ref9.apply(this, arguments);
                  };
                }()));

              case 2:
                expandedFields = _context22.sent;
                return _context22.abrupt("return", _reduceInstanceProperty(expandedFields).call(expandedFields, function (eflds, flds) {
                  var _context21;

                  return _concatInstanceProperty(_context21 = []).call(_context21, _toConsumableArray(eflds), _toConsumableArray(flds));
                }, []));

              case 4:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee7);
      }));

      function _expandAsteriskFields(_x7, _x8) {
        return _expandAsteriskFields2.apply(this, arguments);
      }

      return _expandAsteriskFields;
    }()
    /**
     *
     */

  }, {
    key: "_expandAsteriskField",
    value: function () {
      var _expandAsteriskField2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(sobject, field) {
        var _context23,
            _this4 = this;

        var fpath, _context26, so, _ret;

        return _regeneratorRuntime.wrap(function _callee9$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                this._logger.debug(_concatInstanceProperty(_context23 = "expanding field \"".concat(field, "\" in \"")).call(_context23, sobject, "\"..."));

                fpath = field.split('.');

                if (!(fpath[fpath.length - 1] === '*')) {
                  _context27.next = 13;
                  break;
                }

                _context27.next = 5;
                return this._conn.describe$(sobject);

              case 5:
                so = _context27.sent;

                this._logger.debug("table ".concat(sobject, " has been described"));

                if (!(fpath.length > 1)) {
                  _context27.next = 12;
                  break;
                }

                return _context27.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
                  var rname, _iterator3, _step3, f, rfield, referenceTo, rtable, fpaths;

                  return _regeneratorRuntime.wrap(function _callee8$(_context25) {
                    while (1) {
                      switch (_context25.prev = _context25.next) {
                        case 0:
                          rname = fpath.shift();
                          _iterator3 = _createForOfIteratorHelper(so.fields);
                          _context25.prev = 2;

                          _iterator3.s();

                        case 4:
                          if ((_step3 = _iterator3.n()).done) {
                            _context25.next = 16;
                            break;
                          }

                          f = _step3.value;

                          if (!(f.relationshipName && rname && f.relationshipName.toUpperCase() === rname.toUpperCase())) {
                            _context25.next = 14;
                            break;
                          }

                          rfield = f;
                          referenceTo = rfield.referenceTo || [];
                          rtable = referenceTo.length === 1 ? referenceTo[0] : 'Name';
                          _context25.next = 12;
                          return _this4._expandAsteriskField(rtable, fpath.join('.'));

                        case 12:
                          fpaths = _context25.sent;
                          return _context25.abrupt("return", {
                            v: _mapInstanceProperty(fpaths).call(fpaths, function (fp) {
                              var _context24;

                              return _concatInstanceProperty(_context24 = "".concat(rname, ".")).call(_context24, fp);
                            })
                          });

                        case 14:
                          _context25.next = 4;
                          break;

                        case 16:
                          _context25.next = 21;
                          break;

                        case 18:
                          _context25.prev = 18;
                          _context25.t0 = _context25["catch"](2);

                          _iterator3.e(_context25.t0);

                        case 21:
                          _context25.prev = 21;

                          _iterator3.f();

                          return _context25.finish(21);

                        case 24:
                          return _context25.abrupt("return", {
                            v: []
                          });

                        case 25:
                        case "end":
                          return _context25.stop();
                      }
                    }
                  }, _callee8, null, [[2, 18, 21, 24]]);
                })(), "t0", 9);

              case 9:
                _ret = _context27.t0;

                if (!(_typeof(_ret) === "object")) {
                  _context27.next = 12;
                  break;
                }

                return _context27.abrupt("return", _ret.v);

              case 12:
                return _context27.abrupt("return", _mapInstanceProperty(_context26 = so.fields).call(_context26, function (f) {
                  return f.name;
                }));

              case 13:
                return _context27.abrupt("return", [field]);

              case 14:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee9, this);
      }));

      function _expandAsteriskField(_x10, _x11) {
        return _expandAsteriskField2.apply(this, arguments);
      }

      return _expandAsteriskField;
    }()
    /**
     * Explain plan for executing query
     */

  }, {
    key: "explain",
    value: function () {
      var _explain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var soql, url;
        return _regeneratorRuntime.wrap(function _callee10$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return this.toSOQL();

              case 2:
                soql = _context28.sent;

                this._logger.debug("SOQL = ".concat(soql));

                url = "/query/?explain=".concat(encodeURIComponent(soql));
                return _context28.abrupt("return", this._conn.request(url));

              case 6:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee10, this);
      }));

      function explain() {
        return _explain.apply(this, arguments);
      }

      return explain;
    }()
    /**
     * Return SOQL expression for the query
     */

  }, {
    key: "toSOQL",
    value: function () {
      var _toSOQL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                if (!this._soql) {
                  _context29.next = 2;
                  break;
                }

                return _context29.abrupt("return", this._soql);

              case 2:
                _context29.next = 4;
                return this._expandFields();

              case 4:
                return _context29.abrupt("return", createSOQL(this._config));

              case 5:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee11, this);
      }));

      function toSOQL() {
        return _toSOQL.apply(this, arguments);
      }

      return toSOQL;
    }()
    /**
     * Promise/A+ interface
     * http://promises-aplus.github.io/promises-spec/
     *
     * Delegate to deferred promise, return promise instance for query result
     */

  }, {
    key: "then",
    value: function then(onResolve, onReject) {
      this._chaining = true;

      if (!this._finished && !this._executed) {
        this.execute();
      }

      if (!this._promise) {
        throw new Error('invalid state: promise is not set after query execution');
      }

      return this._promise.then(onResolve, onReject);
    }
  }, {
    key: "catch",
    value: function _catch(onReject) {
      return this.then(null, onReject);
    }
  }, {
    key: "promise",
    value: function promise() {
      return _Promise.resolve(this);
    }
    /**
     * Bulk delete queried records
     */

  }, {
    key: "destroy",
    value: function destroy(type, options) {
      var _this5 = this;

      if (_typeof(type) === 'object' && type !== null) {
        options = type;
        type = undefined;
      }

      options = options || {};
      var type_ = type || this._config.table;

      if (!type_) {
        throw new Error('SOQL based query needs SObject type information to bulk delete.');
      } // Set the threshold number to pass to bulk API


      var thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold : // determine threshold if the connection version supports SObject collection API or not
      this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
      return new _Promise(function (resolve, reject) {
        var createBatch = function createBatch() {
          return _this5._conn.sobject(type_).deleteBulk().on('response', resolve).on('error', reject);
        };

        var records = [];
        var batch = null;

        var handleRecord = function handleRecord(rec) {
          if (!rec.Id) {
            var _err = new Error('Queried record does not include Salesforce record ID.');

            _this5.emit('error', _err);

            return;
          }

          var record = {
            Id: rec.Id
          };

          if (batch) {
            batch.write(record);
          } else {
            records.push(record);

            if (thresholdNum >= 0 && records.length > thresholdNum) {
              // Use bulk delete instead of SObject REST API
              batch = createBatch();

              var _iterator4 = _createForOfIteratorHelper(records),
                  _step4;

              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  var _record = _step4.value;
                  batch.write(_record);
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }

              records = [];
            }
          }
        };

        var handleEnd = function handleEnd() {
          if (batch) {
            batch.end();
          } else {
            var ids = _mapInstanceProperty(records).call(records, function (record) {
              return record.Id;
            });

            _this5._conn.sobject(type_).destroy(ids, {
              allowRecursive: true
            }).then(resolve, reject);
          }
        };

        _this5.stream('record').on('data', handleRecord).on('end', handleEnd).on('error', reject);
      });
    }
    /**
     * Synonym of Query#destroy()
     */

  }, {
    key: "update",
    value: function update(mapping, type, options) {
      var _this6 = this;

      if (_typeof(type) === 'object' && type !== null) {
        options = type;
        type = undefined;
      }

      options = options || {};
      var type_ = type || this._config && this._config.table;

      if (!type_) {
        throw new Error('SOQL based query needs SObject type information to bulk update.');
      }

      var updateStream = typeof mapping === 'function' ? _mapInstanceProperty(RecordStream).call(RecordStream, mapping) : RecordStream.recordMapStream(mapping); // Set the threshold number to pass to bulk API

      var thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold : // determine threshold if the connection version supports SObject collection API or not
      this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
      return new _Promise(function (resolve, reject) {
        var createBatch = function createBatch() {
          return _this6._conn.sobject(type_).updateBulk().on('response', resolve).on('error', reject);
        };

        var records = [];
        var batch = null;

        var handleRecord = function handleRecord(record) {
          if (batch) {
            batch.write(record);
          } else {
            records.push(record);
          }

          if (thresholdNum >= 0 && records.length > thresholdNum) {
            // Use bulk update instead of SObject REST API
            batch = createBatch();

            var _iterator5 = _createForOfIteratorHelper(records),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var _record2 = _step5.value;
                batch.write(_record2);
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }

            records = [];
          }
        };

        var handleEnd = function handleEnd() {
          if (batch) {
            batch.end();
          } else {
            _this6._conn.sobject(type_).update(records, {
              allowRecursive: true
            }).then(resolve, reject);
          }
        };

        _this6.stream('record').on('error', reject).pipe(updateStream).on('data', handleRecord).on('end', handleEnd).on('error', reject);
      });
    }
  }]);

  return Query;
}(EventEmitter);
/*--------------------------------------------*/

/**
 * SubQuery object for representing child relationship query
 */

_defineProperty(Query, "_logger", getLogger('query'));

export var SubQuery = /*#__PURE__*/function () {
  /**
   *
   */
  function SubQuery(conn, relName, config, parent) {
    _classCallCheck(this, SubQuery);

    _defineProperty(this, "_relName", void 0);

    _defineProperty(this, "_query", void 0);

    _defineProperty(this, "_parent", void 0);

    _defineProperty(this, "offset", this.skip);

    _defineProperty(this, "orderby", _sortInstanceProperty(this));

    this._relName = relName;
    this._query = new Query(conn, config);
    this._parent = parent;
  }
  /**
   *
   */


  _createClass(SubQuery, [{
    key: "select",
    value: function select(fields) {
      // force convert query record type without changing instance
      this._query = this._query.select(fields);
      return this;
    }
    /**
     *
     */

  }, {
    key: "where",
    value: function where(conditions) {
      this._query = this._query.where(conditions);
      return this;
    }
    /**
     * Limit the returning result
     */

  }, {
    key: "limit",
    value: function limit(_limit2) {
      this._query = this._query.limit(_limit2);
      return this;
    }
    /**
     * Skip records
     */

  }, {
    key: "skip",
    value: function skip(offset) {
      this._query = this._query.skip(offset);
      return this;
    }
    /**
     * Synonym of SubQuery#skip()
     */

  }, {
    key: "sort",
    value: function (_sort3) {
      function sort(_x12, _x13) {
        return _sort3.apply(this, arguments);
      }

      sort.toString = function () {
        return _sort3.toString();
      };

      return sort;
    }(function (sort, dir) {
      var _context30;

      this._query = _sortInstanceProperty(_context30 = this._query).call(_context30, sort, dir);
      return this;
    })
    /**
     * Synonym of SubQuery#sort()
     */

  }, {
    key: "_expandFields",

    /**
     *
     */
    value: function () {
      var _expandFields3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var sobject;
        return _regeneratorRuntime.wrap(function _callee12$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                _context31.next = 2;
                return this._parent._findRelationObject(this._relName);

              case 2:
                sobject = _context31.sent;
                return _context31.abrupt("return", this._query._expandFields(sobject));

              case 4:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee12, this);
      }));

      function _expandFields() {
        return _expandFields3.apply(this, arguments);
      }

      return _expandFields;
    }()
    /**
     * Back the context to parent query object
     */

  }, {
    key: "end",
    value: function end() {
      return this._parent;
    }
  }]);

  return SubQuery;
}();
export default Query;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,