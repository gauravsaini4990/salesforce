"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SandboxAccessor = void 0;
const types_1 = require("../types");
class SandboxAccessor {
    constructor(globalInfo) {
        this.globalInfo = globalInfo;
    }
    /**
     * Returns all the sandboxes (or all the sandboxes for a given prod org)
     *
     * @param entity entity as a string should be a production org username
     * and when entity is a SfSandbox, the prod org entity.prodOrgUsername will
     * used in the filter.
     */
    getAll(entity) {
        const all = this.globalInfo.get(types_1.SfInfoKeys.SANDBOXES) || {};
        if (!entity) {
            return all;
        }
        const prodOrgUsername = typeof entity === 'string' ? entity : entity.prodOrgUsername;
        return Object.fromEntries(Object.entries(all).filter(([, value]) => value.prodOrgUsername === prodOrgUsername));
    }
    /**
     * Returns the SfSandbox config entry that corresponds to the given
     * sandbox org id if it exists
     *
     * @param sandboxOrgId the sandboxOrgId that corresponds to a sandbox
     */
    get(sandboxOrgId) {
        var _a;
        return sandboxOrgId ? (_a = this.getAll()[sandboxOrgId]) !== null && _a !== void 0 ? _a : null : null;
    }
    /**
     * Returns true if the given sandbox org id exists
     *
     * @param sandboxOrgId the sandboxOrgId that corresponds to a sandbox
     */
    has(sandboxOrgId) {
        var _a;
        return !!(sandboxOrgId ? (_a = this.getAll()[sandboxOrgId]) !== null && _a !== void 0 ? _a : null : null);
    }
    /**
     * Set an sandboxOrgId for the given sandbox entity
     *
     * @param sandboxOrgId the sandboxOrgId you want to set
     * @param entity the sandbox entity
     */
    set(sandboxOrgId, entity) {
        this.globalInfo.set(`${types_1.SfInfoKeys.SANDBOXES}["${sandboxOrgId}"]`, entity);
    }
    unset(sandboxOrgId) {
        delete this.globalInfo.get(types_1.SfInfoKeys.SANDBOXES)[sandboxOrgId];
    }
}
exports.SandboxAccessor = SandboxAccessor;
//# sourceMappingURL=sandboxAccessor.js.map